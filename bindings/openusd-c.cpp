
#include <pxr/usd/ar/asset.h>
#include <pxr/usd/ar/assetInfo.h>
#include <pxr/usd/ar/resolver.h>
#include <pxr/usd/ar/resolvedPath.h>
#include <pxr/usd/ar/resolverContext.h>
#include <pxr/usd/ar/timestamp.h>
#include <pxr/usd/ar/writableAsset.h>
#include <pxr/usd/ar/inMemoryAsset.h>
#include <pxr/usd/ar/defineResolver.h>
#include <iostream>
#include <pxr/base/gf/interval.h>
#include <pxr/base/gf/vec2f.h>
#include <pxr/base/gf/vec3f.h>
#include <pxr/base/gf/vec4f.h>
#include <pxr/base/gf/vec2h.h>
#include <pxr/base/gf/vec3h.h>
#include <pxr/base/gf/vec4h.h>
#include <pxr/base/gf/vec2d.h>
#include <pxr/base/gf/vec3d.h>
#include <pxr/base/gf/vec4d.h>
#include <pxr/base/gf/vec2i.h>
#include <pxr/base/gf/vec3i.h>
#include <pxr/base/gf/vec4i.h>
#include <pxr/base/gf/matrix2d.h>
#include <pxr/base/gf/matrix3d.h>
#include <pxr/base/gf/matrix4d.h>
#include <pxr/base/gf/matrix2f.h>
#include <pxr/base/gf/matrix3f.h>
#include <pxr/base/gf/matrix4f.h>
#include <pxr/base/gf/quatd.h>
#include <pxr/base/gf/quatf.h>
#include <pxr/base/gf/quath.h>
#include <pxr/base/gf/dualQuatd.h>
#include <pxr/base/gf/dualQuatf.h>
#include <pxr/base/gf/dualQuath.h>
#include <pxr/base/gf/bbox3d.h>
#include <pxr/base/gf/range1d.h>
#include <pxr/base/gf/range1f.h>
#include <pxr/base/gf/range2d.h>
#include <pxr/base/gf/range2f.h>
#include <pxr/base/gf/range3d.h>
#include <pxr/base/gf/range3f.h>
#include <pxr/base/gf/camera.h>
#include <pxr/base/gf/declare.h>
#include <pxr/base/gf/frustum.h>
#include <pxr/base/gf/rotation.h>
#include <pxr/base/gf/line.h>
#include <pxr/base/gf/line2d.h>
#include <pxr/base/gf/lineSeg.h>
#include <pxr/base/gf/lineSeg2d.h>
#include <pxr/base/gf/multiInterval.h>
#include <pxr/base/gf/rect2i.h>
#include <pxr/base/gf/size2.h>
#include <pxr/base/gf/size3.h>
#include <pxr/base/gf/transform.h>
#include <pxr/base/vt/types.h>
#include <pxr/base/vt/array.h>
#include <stddef.h>
#include <pxr/base/js/value.h>
#include <pxr/base/js/types.h>
#include <pxr/base/tf/token.h>
#include <pxr/usd/ndr/declare.h>
#include <pxr/usd/ndr/discoveryPlugin.h>
#include <pxr/usd/ndr/filesystemDiscoveryHelpers.h>
#include <pxr/usd/ndr/node.h>
#include <pxr/usd/ndr/nodeDiscoveryResult.h>
#include <pxr/usd/ndr/parserPlugin.h>
#include <pxr/usd/ndr/property.h>
#include <pxr/usd/ndr/registry.h>
#include <pxr/usd/sdf/valueTypeName.h>
#include <pxr/usd/pcp/arc.h>
#include <pxr/usd/pcp/cache.h>
#include <pxr/usd/pcp/changes.h>
#include <pxr/usd/pcp/dependency.h>
#include <pxr/usd/pcp/dynamicFileFormatContext.h>
#include <pxr/usd/pcp/dynamicFileFormatDependencyData.h>
#include <pxr/usd/pcp/dynamicFileFormatInterface.h>
#include <pxr/usd/pcp/expressionVariables.h>
#include <pxr/usd/pcp/expressionVariablesDependencyData.h>
#include <pxr/usd/pcp/instanceKey.h>
#include <pxr/usd/pcp/iterator.h>
#include <pxr/usd/pcp/layerStack.h>
#include <pxr/usd/pcp/layerStackIdentifier.h>
#include <pxr/usd/pcp/mapExpression.h>
#include <pxr/usd/pcp/mapFunction.h>
#include <pxr/usd/pcp/namespaceEdits.h>
#include <pxr/usd/pcp/node.h>
#include <pxr/usd/pcp/primIndex.h>
#include <pxr/usd/pcp/propertyIndex.h>
#include <pxr/usd/pcp/site.h>
#include <pxr/usd/pcp/targetIndex.h>
#include <pxr/usd/pcp/types.h>
#include <pxr/base/vt/dictionary.h>
#include <pxr/base/vt/value.h>
#include <pxr/usd/sdf/abstractData.h>
#include <pxr/usd/sdf/allowed.h>
#include <pxr/usd/sdf/assetPath.h>
#include <pxr/usd/sdf/attributeSpec.h>
#include <pxr/usd/sdf/changeBlock.h>
#include <pxr/usd/sdf/changeList.h>
#include <pxr/usd/sdf/copyUtils.h>
#include <pxr/usd/sdf/data.h>
#include <pxr/usd/sdf/declareHandles.h>
#include <pxr/usd/sdf/fileFormat.h>
#include <pxr/usd/sdf/layer.h>
#include <pxr/usd/sdf/layerOffset.h>
#include <pxr/usd/sdf/layerStateDelegate.h>
#include <pxr/usd/sdf/layerTree.h>
#include <pxr/usd/sdf/listEditorProxy.h>
#include <pxr/usd/sdf/namespaceEdit.h>
#include <pxr/usd/sdf/notice.h>
#include <pxr/usd/sdf/path.h>
#include <pxr/usd/sdf/pathExpression.h>
#include <pxr/usd/sdf/payload.h>
#include <pxr/usd/sdf/primSpec.h>
#include <pxr/usd/sdf/propertySpec.h>
#include <pxr/usd/sdf/proxyTypes.h>
#include <pxr/usd/sdf/reference.h>
#include <pxr/usd/sdf/relationshipSpec.h>
#include <pxr/usd/sdf/schema.h>
#include <pxr/usd/sdf/spec.h>
#include <pxr/usd/sdf/textFileFormat.h>
#include <pxr/usd/sdf/timeCode.h>
#include <pxr/usd/sdf/types.h>
#include <pxr/usd/sdf/variableExpression.h>
#include <pxr/usd/sdf/variantSetSpec.h>
#include <pxr/usd/sdf/variantSpec.h>
#include <pxr/usd/sdr/registry.h>
#include <pxr/usd/sdr/shaderNode.h>
#include <pxr/usd/sdr/shaderProperty.h>
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <pxr/base/tf/type.h>
#include <pxr/base/tf/enum.h>
#include <pxr/usd/usd/attributeQuery.h>
#include <pxr/usd/usd/clipsAPI.h>
#include <pxr/usd/usd/collectionAPI.h>
#include <pxr/usd/usd/collectionMembershipQuery.h>
#include <pxr/usd/usd/common.h>
#include <pxr/usd/usd/interpolation.h>
#include <pxr/usd/usd/crateInfo.h>
#include <pxr/usd/usd/editTarget.h>
#include <pxr/usd/usd/inherits.h>
#include <pxr/usd/usd/modelAPI.h>
#include <pxr/usd/usd/notice.h>
#include <pxr/usd/usd/object.h>
#include <pxr/usd/usd/attribute.h>
#include <pxr/usd/usd/relationship.h>
#include <pxr/usd/usd/property.h>
#include <pxr/usd/usd/prim.h>
#include <pxr/usd/usd/payloads.h>
#include <pxr/usd/usd/primCompositionQuery.h>
#include <pxr/usd/usd/primDefinition.h>
#include <pxr/usd/usd/primRange.h>
#include <pxr/usd/usd/references.h>
#include <pxr/usd/usd/resolveInfo.h>
#include <pxr/usd/usd/resolveTarget.h>
#include <pxr/usd/usd/apiSchemaBase.h>
#include <pxr/usd/usd/schemaBase.h>
#include <pxr/usd/usd/schemaRegistry.h>
#include <pxr/usd/usd/specializes.h>
#include <pxr/usd/usd/stage.h>
#include <pxr/usd/usd/stageCache.h>
#include <pxr/usd/usd/stageLoadRules.h>
#include <pxr/usd/usd/stagePopulationMask.h>
#include <pxr/usd/usd/timeCode.h>
#include <pxr/usd/usd/variantSets.h>
#include <pxr/base/tf/hashmap.h>
#include <pxr/usd/usdGeom/basisCurves.h>
#include <pxr/usd/usdGeom/bboxCache.h>
#include <pxr/usd/usdGeom/boundable.h>
#include <pxr/usd/usdGeom/camera.h>
#include <pxr/usd/usdGeom/capsule.h>
#include <pxr/usd/usdGeom/cone.h>
#include <pxr/usd/usdGeom/constraintTarget.h>
#include <pxr/usd/usdGeom/cube.h>
#include <pxr/usd/usdGeom/curves.h>
#include <pxr/usd/usdGeom/cylinder.h>
#include <pxr/usd/usdGeom/gprim.h>
#include <pxr/usd/usdGeom/hermiteCurves.h>
#include <pxr/usd/usdGeom/imageable.h>
#include <pxr/usd/usdGeom/mesh.h>
#include <pxr/usd/usdGeom/modelAPI.h>
#include <pxr/usd/usdGeom/motionAPI.h>
#include <pxr/usd/usdGeom/nurbsCurves.h>
#include <pxr/usd/usdGeom/nurbsPatch.h>
#include <pxr/usd/usdGeom/plane.h>
#include <pxr/usd/usdGeom/pointBased.h>
#include <pxr/usd/usdGeom/pointInstancer.h>
#include <pxr/usd/usdGeom/points.h>
#include <pxr/usd/usdGeom/primvar.h>
#include <pxr/usd/usdGeom/primvarsAPI.h>
#include <pxr/usd/usdGeom/scope.h>
#include <pxr/usd/usdGeom/sphere.h>
#include <pxr/usd/usdGeom/subset.h>
#include <pxr/usd/usdGeom/visibilityAPI.h>
#include <pxr/usd/usdGeom/xform.h>
#include <pxr/usd/usdGeom/xformCache.h>
#include <pxr/usd/usdGeom/xformCommonAPI.h>
#include <pxr/usd/usdGeom/xformOp.h>
#include <pxr/usd/usdGeom/xformable.h>
#include <pxr/usd/usdLux/boundableLightBase.h>
#include <pxr/usd/usdLux/cylinderLight.h>
#include <pxr/usd/usdLux/diskLight.h>
#include <pxr/usd/usdLux/distantLight.h>
#include <pxr/usd/usdLux/domeLight.h>
#include <pxr/usd/usdLux/geometryLight.h>
#include <pxr/usd/usdLux/lightFilter.h>
#include <pxr/usd/usdLux/lightListAPI.h>
#include <pxr/usd/usdLux/listAPI.h>
#include <pxr/usd/usdLux/meshLightAPI.h>
#include <pxr/usd/usdLux/nonboundableLightBase.h>
#include <pxr/usd/usdLux/pluginLight.h>
#include <pxr/usd/usdLux/pluginLightFilter.h>
#include <pxr/usd/usdLux/portalLight.h>
#include <pxr/usd/usdLux/rectLight.h>
#include <pxr/usd/usdLux/shadowAPI.h>
#include <pxr/usd/usdLux/shapingAPI.h>
#include <pxr/usd/usdLux/sphereLight.h>
#include <pxr/usd/usdLux/volumeLightAPI.h>
#include <pxr/usd/usdRender/denoisePass.h>
#include <pxr/usd/usdRender/pass.h>
#include <pxr/usd/usdRender/product.h>
#include <pxr/usd/usdRender/settings.h>
#include <pxr/usd/usdRender/settingsBase.h>
#include <pxr/usd/usdRender/spec.h>
#include <pxr/usd/usdRender/var.h>
#include <pxr/usd/usdShade/connectableAPI.h>
#include <pxr/usd/usdShade/connectableAPIBehavior.h>
#include <pxr/usd/usdShade/coordSysAPI.h>
#include <pxr/usd/usdShade/input.h>
#include <pxr/usd/usdShade/material.h>
#include <pxr/usd/usdShade/materialBindingAPI.h>
#include <pxr/usd/usdShade/nodeDefAPI.h>
#include <pxr/usd/usdShade/nodeGraph.h>
#include <pxr/usd/usdShade/output.h>
#include <pxr/usd/usdShade/shader.h>
#include <pxr/usd/usdShade/shaderDefParser.h>
#include <pxr/usd/usdShade/shaderDefUtils.h>
#include <pxr/usd/usdShade/tokens.h>
#include <pxr/usd/usdShade/types.h>
#include <pxr/usd/usdShade/udimUtils.h>
#include <pxr/usd/usdShade/utils.h>
#include <pxr/usdImaging/usdImagingGL/engine.h>
#include <pxr/usdImaging/usdImagingGL/renderParams.h>

#if defined(__GNUC__) || defined(__clang__)
#  define BBL_ALIGN(x) __attribute__ ((aligned(x)))
#elif defined(_MSC_VER)
#  define BBL_ALIGN(x) __declspec(align(x))
#else
#  error "Unknown compiler; can't define ALIGN"
#endif

#include <stddef.h>
#include <exception>
#include <thread>
#include <string>

static thread_local std::string _bbl_error_message;

namespace bblext {

void set_ar_resolver_factory(
        const PXR_NS::TfType& type,
        void* create_identifier_for_new_asset,
        void* create_identifier,
        void* open_asset,
        void* resolve,
        void* resolve_for_new_asset,
        void* open_asset_for_write,
        void* get_extension,
        void* get_modification_timestamp,
        void* close_writeable_asset,
        void* open_writable_asset,
        void* write_writable_asset
    ) {
        typedef void (*CREATE_IDENTIFIER_FN_PTR)(const std::string *assetPath, const PXR_NS::ArResolvedPath *anchorAssetPath, std::string** output);
        typedef void (*OPEN_ASSET_FN_PTR)(const PXR_NS::ArResolvedPath *resolvedPath, std::shared_ptr<PXR_NS::ArAsset>** output);
        typedef void (*RESOLVE_FN_PTR)(const std::string *assetPath, PXR_NS::ArResolvedPath** output);
        typedef void (*OPEN_ASSET_FOR_WRITE_FN_PTR)(const PXR_NS::ArResolvedPath *, PXR_NS::ArResolver::WriteMode, std::shared_ptr<PXR_NS::ArWritableAsset>** output);
        typedef void (*GET_EXTENSION_FN_PTR)(const std::string* assetPath, std::string** output);
        typedef void (*GET_MODIFICATION_TIMESTAMP_FN_PTR)(const std::string *assetPath, const PXR_NS::ArResolvedPath *resolvedPath, PXR_NS::ArTimestamp** output);
        typedef bool (*CLOSE_WRITABLE_ASSET_FN_PTR)(void*);
        typedef void* (*OPEN_WRITABLE_ASSET_FN_PTR)(const PXR_NS::ArResolvedPath *resolvedPath, PXR_NS::ArResolver::WriteMode);
        typedef size_t (*WRITE_WRITABLE_ASSET_FN_PTR)(void*, const void*, size_t, size_t);

        class CustomFunctionWriteableAsset: public PXR_NS::ArWritableAsset {
            public:
                void* custom_data;
                CLOSE_WRITABLE_ASSET_FN_PTR close_writeable_asset;
                WRITE_WRITABLE_ASSET_FN_PTR write_writable_asset;

                CustomFunctionWriteableAsset(
                    const PXR_NS::ArResolvedPath &resolved_path,
                    PXR_NS::ArResolver::WriteMode writeMode,
                    CLOSE_WRITABLE_ASSET_FN_PTR close_writeable_asset_,
                    OPEN_WRITABLE_ASSET_FN_PTR open_writable_asset,
                    WRITE_WRITABLE_ASSET_FN_PTR write_writable_asset_
                ): write_writable_asset(write_writable_asset_), custom_data(open_writable_asset(&resolved_path, writeMode)), close_writeable_asset(close_writeable_asset_) {

                }

                bool Close() {
                    return close_writeable_asset(custom_data);
                }

                size_t Write(const void* src, size_t count, size_t offset) {
                    return write_writable_asset(custom_data, src, count, offset);
                }
        };

        struct Functions {
            CREATE_IDENTIFIER_FN_PTR create_identifier_for_new_asset;
            CREATE_IDENTIFIER_FN_PTR create_identifier;
            OPEN_ASSET_FN_PTR open_asset;
            RESOLVE_FN_PTR resolve;
            RESOLVE_FN_PTR resolve_for_new_asset;
            OPEN_ASSET_FOR_WRITE_FN_PTR open_asset_for_write;
            GET_EXTENSION_FN_PTR get_extension;
            GET_MODIFICATION_TIMESTAMP_FN_PTR get_modification_timestamp;
            CLOSE_WRITABLE_ASSET_FN_PTR close_writeable_asset;
            OPEN_WRITABLE_ASSET_FN_PTR open_writable_asset;
            WRITE_WRITABLE_ASSET_FN_PTR write_writable_asset;
        };

        Functions functions = {
            (CREATE_IDENTIFIER_FN_PTR) create_identifier_for_new_asset,
            (CREATE_IDENTIFIER_FN_PTR) create_identifier,
            (OPEN_ASSET_FN_PTR) open_asset,
            (RESOLVE_FN_PTR) resolve,
            (RESOLVE_FN_PTR) resolve_for_new_asset,
            (OPEN_ASSET_FOR_WRITE_FN_PTR) open_asset_for_write,
            (GET_EXTENSION_FN_PTR) get_extension,
            (GET_MODIFICATION_TIMESTAMP_FN_PTR) get_modification_timestamp,
            (CLOSE_WRITABLE_ASSET_FN_PTR) close_writeable_asset,
            (OPEN_WRITABLE_ASSET_FN_PTR) open_writable_asset,
            (WRITE_WRITABLE_ASSET_FN_PTR) write_writable_asset
        };

        class CustomFunctionArResolver : public PXR_NS::ArResolver {
            Functions functions;

        public:
            CustomFunctionArResolver(
                Functions functions_
            ): functions(functions_) {}

            std::string _CreateIdentifierForNewAsset(const std::string &assetPath, const PXR_NS::ArResolvedPath &anchorAssetPath) const override {
                std::cout << "_CreateIdentifierForNewAsset" << std::endl;
                std::string output;
                std::string* output_ptr = &output;
                functions.create_identifier_for_new_asset(&assetPath, &anchorAssetPath, &output_ptr);
                output = *output_ptr;
                return output;
            }

            std::string _CreateIdentifier(const std::string &assetPath, const PXR_NS::ArResolvedPath &anchorAssetPath) const override {
                std::cout << "_CreateIdentifier" << std::endl;
                if (functions.create_identifier) {
                    std::string output;
                    std::string* output_ptr = &output;
                    functions.create_identifier(&assetPath, &anchorAssetPath, &output_ptr);
                    output = *output_ptr;
                    return output;
                } else {
                    return assetPath;
                }
            }

            PXR_NS::ArResolvedPath _Resolve(const std::string &assetPath) const override {
                std::cout << "_Resolve" << std::endl;
                if (functions.resolve) {
                    PXR_NS::ArResolvedPath output;
                    PXR_NS::ArResolvedPath* output_ptr = &output;
                    functions.resolve(&assetPath, &output_ptr);
                    output = *output_ptr;
                    return output;
                } else {
                    return PXR_NS::ArResolvedPath(assetPath);
                }
            }

            PXR_NS::ArResolvedPath _ResolveForNewAsset(const std::string &assetPath) const override {
                std::cout << "_ResolveForNewAsset" << std::endl;
                if (functions.resolve_for_new_asset) {
                    PXR_NS::ArResolvedPath output;
                    PXR_NS::ArResolvedPath* output_ptr = &output;
                    functions.resolve_for_new_asset(&assetPath, &output_ptr);
                    output = *output_ptr;
                    return output;
                } else {
                    return PXR_NS::ArResolvedPath();
                }
            }

            std::shared_ptr<PXR_NS::ArAsset> _OpenAsset(const PXR_NS::ArResolvedPath &resolvedPath) const override {
                std::cout << "_OpenAsset" << std::endl;
                std::shared_ptr<PXR_NS::ArAsset> output;
                std::shared_ptr<PXR_NS::ArAsset>* output_ptr = &output;
                functions.open_asset(&resolvedPath, &output_ptr);
                output = *output_ptr;
                return output;
            }

            PXR_NS::ArTimestamp _GetModificationTimestamp(const std::string &assetPath, const PXR_NS::ArResolvedPath &resolvedPath) const override {
                std::cout << "_GetModificationTimestamp" << std::endl;

                if (functions.get_modification_timestamp) {
                    PXR_NS::ArTimestamp output;
                    PXR_NS::ArTimestamp* output_ptr = &output;
                    functions.get_modification_timestamp(&assetPath, &resolvedPath, &output_ptr);
                    output = *output_ptr;
                    return output;
                } else {
                    return PXR_NS::ArResolver::_GetModificationTimestamp(assetPath, resolvedPath);
                }
            }

            std::string _GetExtension(const std::string& assetPath) const override {
                std::cout << "_GetExtension" << std::endl;

                if (functions.get_extension) {
                    std::string output;
                    std::string* output_ptr = &output;
                    functions.get_extension(&assetPath, &output_ptr);
                    output = *output_ptr;
                    return output;
                } else {
                    return PXR_NS::ArResolver::_GetExtension(assetPath);
                }
            }

            std::shared_ptr<PXR_NS::ArWritableAsset> _OpenAssetForWrite(
                const PXR_NS::ArResolvedPath &resolvedPath,
                PXR_NS::ArResolver::WriteMode writeMode
            ) const override {
                std::cout << "_OpenAssetForWrite" << std::endl;
                return std::make_shared<CustomFunctionWriteableAsset>(resolvedPath, writeMode, functions.close_writeable_asset, functions.open_writable_asset, functions.write_writable_asset);
            }
        };

        class CustomFunctionArResolverFactory: public PXR_NS::Ar_ResolverFactoryBase {
            Functions functions;

        public:
            CustomFunctionArResolverFactory(
                Functions functions_
            ): functions(functions_) {}

            virtual PXR_NS::ArResolver* New() const {
                return new CustomFunctionArResolver(functions);
            }
        };

        type.SetFactory(
            std::unique_ptr<PXR_NS::TfType::FactoryBase>(
                new CustomFunctionArResolverFactory(functions)
            )
        );
    }
std::shared_ptr<PXR_NS::ArAsset> asset_from_bytes(const char* bytes, size_t len) {
        char* buf = new char[len];
        memcpy(buf, bytes, len);

        std::shared_ptr<char> buffer;
        buffer.reset(buf, std::default_delete<char[]>());

        return PXR_NS::ArInMemoryAsset::FromBuffer(buffer, len);
    }
PXR_NS::PcpArcType Arc_get_type(PXR_NS::PcpArc const& arc) {
    return arc.type;
}
PXR_NS::PcpNodeRef Arc_get_parent(PXR_NS::PcpArc const& arc) {
    return arc.parent;
}
PXR_NS::PcpNodeRef Arc_get_origin(PXR_NS::PcpArc const& arc) {
    return arc.origin;
}
PXR_NS::PcpMapExpression const& Arc_get_map_to_parent(PXR_NS::PcpArc const& arc) {
    return arc.mapToParent;
}
int Arc_get_sibling_num_at_origin(PXR_NS::PcpArc const& arc) {
    return arc.siblingNumAtOrigin;
}
int Arc_get_namespace_depth(PXR_NS::PcpArc const& arc) {
    return arc.namespaceDepth;
}
class FileFormatBase : public PXR_NS::SdfFileFormat {
public:
    // expose protected members
    FileFormatBase(PXR_NS::TfToken const& formatId, PXR_NS::TfToken const& versionString, PXR_NS::TfToken const& target, char const* extension)
    : PXR_NS::SdfFileFormat(formatId, versionString, target, extension)
    {}

    virtual ~FileFormatBase() {}

    virtual auto CanRead(std::string const& file) const -> bool override {
        return false;
    }

    virtual auto Read(PXR_NS::SdfLayer* layer, std::string const& resolvedPath, bool metadaOnly) const -> bool override {
        return false;
    }

    // Helper function for _ReadDetached
    auto _ReadAndCopyLayerDataToMemory(PXR_NS::SdfLayer* layer, char const* resolvedPath, bool metadataOnly, bool* didCopyData) const -> bool {
        return PXR_NS::SdfFileFormat::_ReadAndCopyLayerDataToMemory(layer, resolvedPath, metadataOnly, didCopyData);
    }

    virtual auto _InstantiateNewLayer(PXR_NS::SdfFileFormatConstPtr const& fileFormat, const std::string &identifier, const std::string &realPath, const PXR_NS::ArAssetInfo &assetInfo, const PXR_NS::SdfFileFormat::FileFormatArguments &args) const -> PXR_NS::SdfLayer* override {
        return PXR_NS::SdfFileFormat::_InstantiateNewLayer(fileFormat, identifier, realPath, assetInfo, args);
    }

    auto _InstantiateNewLayer_base(PXR_NS::SdfFileFormatConstPtr const& fileFormat, char const* identifier, char const* realPath, const PXR_NS::ArAssetInfo &assetInfo, const PXR_NS::SdfFileFormat::FileFormatArguments &args) const -> PXR_NS::SdfLayer* {
        return PXR_NS::SdfFileFormat::_InstantiateNewLayer(fileFormat, identifier, realPath, assetInfo, args);
    }

    virtual auto _ShouldSkipAnonymousReload() const -> bool override {
        return PXR_NS::SdfFileFormat::ShouldSkipAnonymousReload();
    }

    auto _ShouldSkipAnonymousReload_base() const -> bool {
        return PXR_NS::SdfFileFormat::ShouldSkipAnonymousReload();
    }

    virtual auto _ShouldReadAnonymousLayers() const -> bool override {
        return PXR_NS::SdfFileFormat::ShouldReadAnonymousLayers();
    }

    auto _ShouldReadAnonymousLayers_base() const -> bool {
        return PXR_NS::SdfFileFormat::ShouldReadAnonymousLayers();
    }

    virtual auto _InitDetachedData(PXR_NS::SdfFileFormat::FileFormatArguments const& args) const -> PXR_NS::SdfAbstractDataRefPtr  override {
        return PXR_NS::SdfFileFormat::InitDetachedData(args);
    }

    auto _InitDetachedData_base(PXR_NS::SdfFileFormat::FileFormatArguments const& args) const -> PXR_NS::SdfAbstractDataRefPtr {
        return PXR_NS::SdfFileFormat::_InitDetachedData(args);
    }

    virtual bool _ReadDetached(PXR_NS::SdfLayer *layer, const std::string &resolvedPath, bool metadataOnly) const override {
        return PXR_NS::SdfFileFormat::_ReadDetached(layer, resolvedPath, metadataOnly);
    }

    bool _ReadDetached_base(PXR_NS::SdfLayer *layer, const std::string &resolvedPath, bool metadataOnly) const {
        return PXR_NS::SdfFileFormat::_ReadDetached(layer, resolvedPath, metadataOnly);
    }

    // static protected member functions
    static void _SetLayerData(PXR_NS::SdfLayer* layer, PXR_NS::SdfAbstractDataRefPtr& data) {
        PXR_NS::SdfFileFormat::_SetLayerData(layer, data);
    }

    static void _SetLayerData_with_hints(PXR_NS::SdfLayer* layer, PXR_NS::SdfAbstractDataRefPtr& data, PXR_NS::SdfLayerHints hints) {
        PXR_NS::SdfFileFormat::_SetLayerData(layer, data, hints);
    }

    static auto _GetLayerData(PXR_NS::SdfLayer const& layer) -> PXR_NS::SdfAbstractDataConstPtr {
        return PXR_NS::SdfFileFormat::_GetLayerData(layer);
    }
};
PXR_NS::SdfAssetPath AssetPath_from_path(char const* path) {
    return PXR_NS::SdfAssetPath(path);
}
PXR_NS::SdfAssetPath AssetPath_from_path_and_resolved_path(char const* path, char const* resolved_path) {
    return PXR_NS::SdfAssetPath(path, resolved_path);
}
char const* AssetPath_GetAssetPath(PXR_NS::SdfAssetPath const& path) {
    return path.GetAssetPath().c_str();
}
char const* AssetPath_GetResolvedPath(PXR_NS::SdfAssetPath const& path) {
    return path.GetResolvedPath().c_str();
}
bool LayerHandle_ExportToString(
    const PXR_NS::SdfLayerHandle& layer,
    std::string** output
) {
    return layer->ExportToString(*output);
}
bool LayerRefPtr_ExportToString(
    const PXR_NS::SdfLayerRefPtr& layer,
    std::string** output
) {
    return layer->ExportToString(*output);
}
PXR_NS::SdfPath const&
NamespaceEdit_get_current_path(PXR_NS::SdfNamespaceEdit const& edit) {
    return edit.currentPath;
}
PXR_NS::SdfPath const&
NamespaceEdit_get_new_path(PXR_NS::SdfNamespaceEdit const& edit) {
    return edit.newPath;
}
PXR_NS::SdfNamespaceEdit::Index const&
NamespaceEdit_get_index(PXR_NS::SdfNamespaceEdit const& edit) {
    return edit.index;
}
PXR_NS::SdfNamespaceEdit const&
NamespaceEditDetail_get_edit(PXR_NS::SdfNamespaceEditDetail const& detail) {
    return detail.edit;
}
PXR_NS::SdfNamespaceEditDetail::Result
NamespaceEditDetail_get_result(PXR_NS::SdfNamespaceEditDetail const& detail) {
    return detail.result;
}
char const*
NamespaceEditDetail_get_reason(PXR_NS::SdfNamespaceEditDetail const& detail) {
    return detail.reason.c_str();
}
PXR_NS::SdfPayload* Payload_from_asset_path(char const* assetPath) {
    return new PXR_NS::SdfPayload(assetPath);
}
PXR_NS::SdfPayload*
Payload_from_asset_path_and_prim_path(char const* assetPath,
                                      PXR_NS::SdfPath const& primPath) {
    return new PXR_NS::SdfPayload(assetPath, primPath);
}
PXR_NS::SdfPayload* Payload_from_asset_path_and_prim_path_and_layer_offset(
    char const* assetPath, PXR_NS::SdfPath const& primPath,
    PXR_NS::SdfLayerOffset const& layerOffset) {
    return new PXR_NS::SdfPayload(assetPath, primPath, layerOffset);
}
PXR_NS::SdfReference* Reference_from_asset_path(char const* assetPath) {
    return new PXR_NS::SdfReference(assetPath);
}
PXR_NS::SdfReference*
Reference_from_asset_path_and_prim_path(char const* assetPath,
                                        PXR_NS::SdfPath const& primPath) {
    return new PXR_NS::SdfReference(assetPath, primPath);
}
PXR_NS::SdfReference* Reference_from_asset_path_and_prim_path_and_layer_offset(
    char const* assetPath, PXR_NS::SdfPath const& primPath,
    PXR_NS::SdfLayerOffset const& layerOffset) {
    return new PXR_NS::SdfReference(assetPath, primPath, layerOffset);
}
PXR_NS::SdfReference*
Reference_from_asset_path_and_prim_path_and_layer_offset_and_custom_data(
    char const* assetPath, PXR_NS::SdfPath const& primPath,
    PXR_NS::SdfLayerOffset const& layerOffset,
    PXR_NS::VtDictionary const& customData) {
    return new PXR_NS::SdfReference(assetPath, primPath, layerOffset,
                                    customData);
}
char const* ValueTypeName_GetCPPTypeName(PXR_NS::SdfValueTypeName const& vtn) {
    return vtn.GetCPPTypeName().c_str();
}
auto UsdPrim_GetProperties(PXR_NS::UsdPrim prim) -> std::vector<PXR_NS::UsdProperty> {
    return prim.GetProperties();
}
auto UsdPrim_GetAuthoredProperties(PXR_NS::UsdPrim prim) -> std::vector<PXR_NS::UsdProperty> {
    return prim.GetAuthoredProperties();
}
auto PrimSiblingIterator_op_eq(PXR_NS::UsdPrimSiblingIterator const& lhs, PXR_NS::UsdPrimSiblingIterator const& rhs) -> bool {
    return lhs == rhs;
}
auto UsdSchemaRegistrySchemaInfo_identifier(
    PXR_NS::UsdSchemaRegistry::SchemaInfo const& info) -> PXR_NS::TfToken {
    return info.identifier;
}
auto UsdSchemaRegistrySchemaInfo_type(
    PXR_NS::UsdSchemaRegistry::SchemaInfo const& info) -> PXR_NS::TfType {
    return info.type;
}
auto UsdSchemaRegistrySchemaInfo_family(
    PXR_NS::UsdSchemaRegistry::SchemaInfo const& info) -> PXR_NS::TfToken {
    return info.family;
}
auto UsdSchemaRegistrySchemaInfo_version(
    PXR_NS::UsdSchemaRegistry::SchemaInfo const& info)
    -> PXR_NS::UsdSchemaVersion {
    return info.version;
}
auto UsdSchemaRegistrySchemaInfo_kind(
    PXR_NS::UsdSchemaRegistry::SchemaInfo const& info)
    -> PXR_NS::UsdSchemaKind {
    return info.kind;
}
PXR_NS::UsdStageRefPtr Stage_Open(char const* filename, PXR_NS::UsdStage::InitialLoadSet loadSet) {
    return PXR_NS::UsdStage::Open(filename, loadSet);
}
bool StageRefPtr_ExportToString(
    const PXR_NS::UsdStageRefPtr& stage,
    std::string** output,
    bool addSourceFileComment
) {
    return stage->ExportToString(*output, addSourceFileComment);
}
void GLRenderParams_SetEnableLighting(PXR_NS::UsdImagingGLRenderParams& params, bool enableLighting) {
        params.enableLighting = enableLighting;
    }
void GLRenderParams_SetCullStyle(PXR_NS::UsdImagingGLRenderParams& params, PXR_NS::UsdImagingGLCullStyle cullStyle) {
        params.cullStyle = cullStyle;
    }
void GLRenderParams_SetColorCorrectionMode(PXR_NS::UsdImagingGLRenderParams& params, PXR_NS::TfToken colorCorrectionMode) {
        params.colorCorrectionMode = colorCorrectionMode;
    }
}

using ar_ResolvedWriteMode = int;
using gf_CameraProjection = unsigned int;
using gf_CameraFOVDirection = unsigned int;
using gf_FrustumProjectionType = unsigned int;
using ndr_VersionFilter = unsigned int;
using pcp_ArcType = unsigned int;
using pcp_CacheChangesTargetType = unsigned int;
using pcp_DependencyType = unsigned int;
using pcp_ErrorType = unsigned int;
using pcp_EditType = unsigned int;
using pcp_PcpRangeType = unsigned int;
using sdf_SdfChangeListSubLayerChangeType = unsigned int;
using sdf_ListOpType = unsigned int;
using sdf_NamespaceEditDetailResult = unsigned int;
using sdf_Op = unsigned int;
using sdf_PredicateExpressionFnCallKind = unsigned int;
using sdf_PredicateExpressionOp = unsigned int;
using sdf_Permission = unsigned int;
using sdf_Specifier = unsigned int;
using sdf_SpecType = unsigned int;
using sdf_Variability = unsigned int;
using usd_InterpolationType = unsigned int;
using usd_ListPosition = unsigned int;
using usd_LoadPolicy = unsigned int;
using usd_SchemaKind = int;
using usd_ModelAPIKindValidation = unsigned int;
using usd_UsdObjType = unsigned int;
using usd_PrimCompositionQueryArcTypeFilter = int;
using usd_PrimCompositionQueryArcIntroducedFilter = int;
using usd_PrimCompositionQueryDependencyTypeFilter = int;
using usd_PrimCompositionQueryHasSpecsFilter = int;
using usd_ResolveInfoSource = unsigned int;
using usd_SchemaRegistryVersionPolicy = int;
using usd_StageInitialLoadSet = unsigned int;
using usd_StageLoadRulesRule = unsigned int;
using usdGeom_ProtoXformInclusion = unsigned int;
using usdGeom_MaskApplication = unsigned int;
using usdGeom_XformCommonAPIRotationOrder = unsigned int;
using usdGeom_XformCommonAPIOpFlags = unsigned int;
using usdGeom_XformOpType = unsigned int;
using usdGeom_XformOpPrecision = unsigned int;
using usdLux_LightListAPIComputeMode = unsigned int;
using usdShade_ConnectableAPIBehaviorConnectableNodeTypes = unsigned int;
using usdShade_AttributeType = int;
using usdShade_ConnectionModification = int;
using usdImaging_GLCullStyle = int;

using ar_ArAsset_t = pxr::ArAsset;
using ar_AssetSharedPtr_t = std::shared_ptr<pxr::ArAsset>;
using ar_ConstCharSharedPtr_t = std::shared_ptr<const char>;
using ar_FileSizePair_t = std::pair<FILE *, size_t>;
using ar_AssetInfo_t = pxr::ArAssetInfo;
using ar_ResolvedPath_t = pxr::ArResolvedPath;
using ar_Resolver_t = pxr::ArResolver;
using ar_ResolverContext_t = pxr::ArResolverContext;
using ar_ResolverContextVector_t = std::vector<pxr::ArResolverContext>;
using ar_Timestamp_t = pxr::ArTimestamp;
using ar_WritableAsset_t = pxr::ArWritableAsset;
using ar_WritableAssetSharedPtr_t = std::shared_ptr<pxr::ArWritableAsset>;
using gf_Vec2f_t = pxr::GfVec2f;
struct BBL_ALIGN(4) gf_Vec2f_t_bbl_size_check {
    float x;
    float y;
};
static_assert(sizeof(gf_Vec2f_t_bbl_size_check) == sizeof(pxr::GfVec2f), "size of value type does not match");
static_assert(alignof(gf_Vec2f_t_bbl_size_check) == alignof(pxr::GfVec2f), "align of value type does not match");

using gf_Vec2fArray_t = pxr::VtArray<pxr::GfVec2f>;
using gf_Vec3f_t = pxr::GfVec3f;
struct BBL_ALIGN(4) gf_Vec3f_t_bbl_size_check {
    float x;
    float y;
    float z;
};
static_assert(sizeof(gf_Vec3f_t_bbl_size_check) == sizeof(pxr::GfVec3f), "size of value type does not match");
static_assert(alignof(gf_Vec3f_t_bbl_size_check) == alignof(pxr::GfVec3f), "align of value type does not match");

using gf_Vec3fArray_t = pxr::VtArray<pxr::GfVec3f>;
using gf_Vec3fArrayVector_t = std::vector<pxr::VtVec3fArray>;
using gf_Vec4f_t = pxr::GfVec4f;
struct BBL_ALIGN(4) gf_Vec4f_t_bbl_size_check {
    float x;
    float y;
    float z;
    float w;
};
static_assert(sizeof(gf_Vec4f_t_bbl_size_check) == sizeof(pxr::GfVec4f), "size of value type does not match");
static_assert(alignof(gf_Vec4f_t_bbl_size_check) == alignof(pxr::GfVec4f), "align of value type does not match");

using gf_Vec4fArray_t = pxr::VtArray<pxr::GfVec4f>;
using gf_Vec4fVector_t = std::vector<pxr::GfVec4f>;
using gf_Vec2h_t = pxr::GfVec2h;
struct BBL_ALIGN(2) gf_Vec2h_t_bbl_size_check {
    short x;
    short y;
};
static_assert(sizeof(gf_Vec2h_t_bbl_size_check) == sizeof(pxr::GfVec2h), "size of value type does not match");
static_assert(alignof(gf_Vec2h_t_bbl_size_check) == alignof(pxr::GfVec2h), "align of value type does not match");

using gf_Vec2hArray_t = pxr::VtArray<pxr::GfVec2h>;
using gf_Vec3h_t = pxr::GfVec3h;
struct BBL_ALIGN(2) gf_Vec3h_t_bbl_size_check {
    short x;
    short y;
    short z;
};
static_assert(sizeof(gf_Vec3h_t_bbl_size_check) == sizeof(pxr::GfVec3h), "size of value type does not match");
static_assert(alignof(gf_Vec3h_t_bbl_size_check) == alignof(pxr::GfVec3h), "align of value type does not match");

using gf_Vec3hArray_t = pxr::VtArray<pxr::GfVec3h>;
using gf_Vec4h_t = pxr::GfVec4h;
struct BBL_ALIGN(2) gf_Vec4h_t_bbl_size_check {
    short x;
    short y;
    short z;
    short w;
};
static_assert(sizeof(gf_Vec4h_t_bbl_size_check) == sizeof(pxr::GfVec4h), "size of value type does not match");
static_assert(alignof(gf_Vec4h_t_bbl_size_check) == alignof(pxr::GfVec4h), "align of value type does not match");

using gf_Vec4hArray_t = pxr::VtArray<pxr::GfVec4h>;
using gf_Vec2d_t = pxr::GfVec2d;
struct BBL_ALIGN(8) gf_Vec2d_t_bbl_size_check {
    double x;
    double y;
};
static_assert(sizeof(gf_Vec2d_t_bbl_size_check) == sizeof(pxr::GfVec2d), "size of value type does not match");
static_assert(alignof(gf_Vec2d_t_bbl_size_check) == alignof(pxr::GfVec2d), "align of value type does not match");

using gf_Vec2dArray_t = pxr::VtArray<pxr::GfVec2d>;
using gf_Vec3d_t = pxr::GfVec3d;
struct BBL_ALIGN(8) gf_Vec3d_t_bbl_size_check {
    double x;
    double y;
    double z;
};
static_assert(sizeof(gf_Vec3d_t_bbl_size_check) == sizeof(pxr::GfVec3d), "size of value type does not match");
static_assert(alignof(gf_Vec3d_t_bbl_size_check) == alignof(pxr::GfVec3d), "align of value type does not match");

using gf_Vec3dVector_t = std::vector<pxr::GfVec3d>;
using gf_Vec3dArray_t = pxr::VtArray<pxr::GfVec3d>;
using gf_Vec4d_t = pxr::GfVec4d;
struct BBL_ALIGN(8) gf_Vec4d_t_bbl_size_check {
    double x;
    double y;
    double z;
    double w;
};
static_assert(sizeof(gf_Vec4d_t_bbl_size_check) == sizeof(pxr::GfVec4d), "size of value type does not match");
static_assert(alignof(gf_Vec4d_t_bbl_size_check) == alignof(pxr::GfVec4d), "align of value type does not match");

using gf_Vec4dArray_t = pxr::VtArray<pxr::GfVec4d>;
using gf_Vec2i_t = pxr::GfVec2i;
struct BBL_ALIGN(4) gf_Vec2i_t_bbl_size_check {
    int x;
    int y;
};
static_assert(sizeof(gf_Vec2i_t_bbl_size_check) == sizeof(pxr::GfVec2i), "size of value type does not match");
static_assert(alignof(gf_Vec2i_t_bbl_size_check) == alignof(pxr::GfVec2i), "align of value type does not match");

using gf_Vec2iArray_t = pxr::VtArray<pxr::GfVec2i>;
using gf_Vec3i_t = pxr::GfVec3i;
struct BBL_ALIGN(4) gf_Vec3i_t_bbl_size_check {
    int x;
    int y;
    int z;
};
static_assert(sizeof(gf_Vec3i_t_bbl_size_check) == sizeof(pxr::GfVec3i), "size of value type does not match");
static_assert(alignof(gf_Vec3i_t_bbl_size_check) == alignof(pxr::GfVec3i), "align of value type does not match");

using gf_Vec3iArray_t = pxr::VtArray<pxr::GfVec3i>;
using gf_Vec4i_t = pxr::GfVec4i;
struct BBL_ALIGN(4) gf_Vec4i_t_bbl_size_check {
    int x;
    int y;
    int z;
    int w;
};
static_assert(sizeof(gf_Vec4i_t_bbl_size_check) == sizeof(pxr::GfVec4i), "size of value type does not match");
static_assert(alignof(gf_Vec4i_t_bbl_size_check) == alignof(pxr::GfVec4i), "align of value type does not match");

using gf_Vec4iArray_t = pxr::VtArray<pxr::GfVec4i>;
using gf_BBox3d_t = pxr::GfBBox3d;
using gf_Camera_t = pxr::GfCamera;
using gf_DualQuatd_t = pxr::GfDualQuatd;
using gf_DualQuatf_t = pxr::GfDualQuatf;
using gf_DualQuath_t = pxr::GfDualQuath;
using gf_Frustum_t = pxr::GfFrustum;
using gf_Half_t = pxr::GfHalf;
using gf_HalfPair_t = std::pair<pxr::GfHalf, pxr::GfHalf>;
using gf_Interval_t = pxr::GfInterval;
using gf_IntervalVector_t = std::vector<pxr::GfInterval>;
using gf_Line_t = pxr::GfLine;
using gf_Line2d_t = pxr::GfLine2d;
using gf_LineSeg_t = pxr::GfLineSeg;
using gf_LineSeg2d_t = pxr::GfLineSeg2d;
using gf_Matrix2d_t = pxr::GfMatrix2d;
struct BBL_ALIGN(8) gf_Matrix2d_t_bbl_size_check {
    double m[4];
};
static_assert(sizeof(gf_Matrix2d_t_bbl_size_check) == sizeof(pxr::GfMatrix2d), "size of value type does not match");
static_assert(alignof(gf_Matrix2d_t_bbl_size_check) == alignof(pxr::GfMatrix2d), "align of value type does not match");

using gf_Matrix2dArray_t = pxr::VtArray<pxr::GfMatrix2d>;
using gf_Matrix3d_t = pxr::GfMatrix3d;
struct BBL_ALIGN(8) gf_Matrix3d_t_bbl_size_check {
    double m[9];
};
static_assert(sizeof(gf_Matrix3d_t_bbl_size_check) == sizeof(pxr::GfMatrix3d), "size of value type does not match");
static_assert(alignof(gf_Matrix3d_t_bbl_size_check) == alignof(pxr::GfMatrix3d), "align of value type does not match");

using gf_Matrix3dArray_t = pxr::VtArray<pxr::GfMatrix3d>;
using gf_Matrix4d_t = pxr::GfMatrix4d;
struct BBL_ALIGN(8) gf_Matrix4d_t_bbl_size_check {
    double m[16];
};
static_assert(sizeof(gf_Matrix4d_t_bbl_size_check) == sizeof(pxr::GfMatrix4d), "size of value type does not match");
static_assert(alignof(gf_Matrix4d_t_bbl_size_check) == alignof(pxr::GfMatrix4d), "align of value type does not match");

using gf_Matrix4dArray_t = pxr::VtArray<pxr::GfMatrix4d>;
using gf_Matrix4dArrayVector_t = std::vector<pxr::VtMatrix4dArray>;
using gf_Matrix2f_t = pxr::GfMatrix2f;
struct BBL_ALIGN(4) gf_Matrix2f_t_bbl_size_check {
    float m[4];
};
static_assert(sizeof(gf_Matrix2f_t_bbl_size_check) == sizeof(pxr::GfMatrix2f), "size of value type does not match");
static_assert(alignof(gf_Matrix2f_t_bbl_size_check) == alignof(pxr::GfMatrix2f), "align of value type does not match");

using gf_Matrix2fArray_t = pxr::VtArray<pxr::GfMatrix2f>;
using gf_Matrix3f_t = pxr::GfMatrix3f;
struct BBL_ALIGN(4) gf_Matrix3f_t_bbl_size_check {
    float m[9];
};
static_assert(sizeof(gf_Matrix3f_t_bbl_size_check) == sizeof(pxr::GfMatrix3f), "size of value type does not match");
static_assert(alignof(gf_Matrix3f_t_bbl_size_check) == alignof(pxr::GfMatrix3f), "align of value type does not match");

using gf_Matrix3fArray_t = pxr::VtArray<pxr::GfMatrix3f>;
using gf_Matrix4f_t = pxr::GfMatrix4f;
struct BBL_ALIGN(4) gf_Matrix4f_t_bbl_size_check {
    float m[16];
};
static_assert(sizeof(gf_Matrix4f_t_bbl_size_check) == sizeof(pxr::GfMatrix4f), "size of value type does not match");
static_assert(alignof(gf_Matrix4f_t_bbl_size_check) == alignof(pxr::GfMatrix4f), "align of value type does not match");

using gf_Matrix4fArray_t = pxr::VtArray<pxr::GfMatrix4f>;
using gf_MultiInterval_t = pxr::GfMultiInterval;
using gf_MultiIntervalSet_t = pxr::GfMultiInterval::Set;
using gf_MultiIntervalIterator_t = pxr::GfMultiInterval::iterator;
using gf_Plane_t = pxr::GfPlane;
using gf_Quaternion_t = pxr::GfQuaternion;
using gf_Quatd_t = pxr::GfQuatd;
struct BBL_ALIGN(8) gf_Quatd_t_bbl_size_check {
    double x;
    double y;
    double z;
    double w;
};
static_assert(sizeof(gf_Quatd_t_bbl_size_check) == sizeof(pxr::GfQuatd), "size of value type does not match");
static_assert(alignof(gf_Quatd_t_bbl_size_check) == alignof(pxr::GfQuatd), "align of value type does not match");

using gf_QuatdArray_t = pxr::VtArray<pxr::GfQuatd>;
using gf_Quatf_t = pxr::GfQuatf;
struct BBL_ALIGN(4) gf_Quatf_t_bbl_size_check {
    float x;
    float y;
    float z;
    float w;
};
static_assert(sizeof(gf_Quatf_t_bbl_size_check) == sizeof(pxr::GfQuatf), "size of value type does not match");
static_assert(alignof(gf_Quatf_t_bbl_size_check) == alignof(pxr::GfQuatf), "align of value type does not match");

using gf_QuatfArray_t = pxr::VtArray<pxr::GfQuatf>;
using gf_Quath_t = pxr::GfQuath;
struct BBL_ALIGN(2) gf_Quath_t_bbl_size_check {
    short x;
    short y;
    short z;
    short w;
};
static_assert(sizeof(gf_Quath_t_bbl_size_check) == sizeof(pxr::GfQuath), "size of value type does not match");
static_assert(alignof(gf_Quath_t_bbl_size_check) == alignof(pxr::GfQuath), "align of value type does not match");

using gf_QuathArray_t = pxr::VtArray<pxr::GfQuath>;
using gf_Range1d_t = pxr::GfRange1d;
struct BBL_ALIGN(8) gf_Range1d_t_bbl_size_check {
    double mn;
    double mx;
};
static_assert(sizeof(gf_Range1d_t_bbl_size_check) == sizeof(pxr::GfRange1d), "size of value type does not match");
static_assert(alignof(gf_Range1d_t_bbl_size_check) == alignof(pxr::GfRange1d), "align of value type does not match");

using gf_Range1f_t = pxr::GfRange1f;
struct BBL_ALIGN(4) gf_Range1f_t_bbl_size_check {
    float mn;
    float mx;
};
static_assert(sizeof(gf_Range1f_t_bbl_size_check) == sizeof(pxr::GfRange1f), "size of value type does not match");
static_assert(alignof(gf_Range1f_t_bbl_size_check) == alignof(pxr::GfRange1f), "align of value type does not match");

using gf_Range2d_t = pxr::GfRange2d;
struct BBL_ALIGN(8) gf_Range2d_t_bbl_size_check {
    gf_Vec2d_t mn;
    gf_Vec2d_t mx;
};
static_assert(sizeof(gf_Range2d_t_bbl_size_check) == sizeof(pxr::GfRange2d), "size of value type does not match");
static_assert(alignof(gf_Range2d_t_bbl_size_check) == alignof(pxr::GfRange2d), "align of value type does not match");

using gf_Range2f_t = pxr::GfRange2f;
struct BBL_ALIGN(4) gf_Range2f_t_bbl_size_check {
    gf_Vec2f_t mn;
    gf_Vec2f_t mx;
};
static_assert(sizeof(gf_Range2f_t_bbl_size_check) == sizeof(pxr::GfRange2f), "size of value type does not match");
static_assert(alignof(gf_Range2f_t_bbl_size_check) == alignof(pxr::GfRange2f), "align of value type does not match");

using gf_Range3d_t = pxr::GfRange3d;
struct BBL_ALIGN(8) gf_Range3d_t_bbl_size_check {
    gf_Vec3d_t mn;
    gf_Vec3d_t mx;
};
static_assert(sizeof(gf_Range3d_t_bbl_size_check) == sizeof(pxr::GfRange3d), "size of value type does not match");
static_assert(alignof(gf_Range3d_t_bbl_size_check) == alignof(pxr::GfRange3d), "align of value type does not match");

using gf_Range3f_t = pxr::GfRange3f;
struct BBL_ALIGN(4) gf_Range3f_t_bbl_size_check {
    gf_Vec3f_t mn;
    gf_Vec3f_t mx;
};
static_assert(sizeof(gf_Range3f_t_bbl_size_check) == sizeof(pxr::GfRange3f), "size of value type does not match");
static_assert(alignof(gf_Range3f_t_bbl_size_check) == alignof(pxr::GfRange3f), "align of value type does not match");

using gf_Ray_t = pxr::GfRay;
struct BBL_ALIGN(8) gf_Ray_t_bbl_size_check {
    gf_Vec3d_t startPoint;
    gf_Vec3d_t direction;
};
static_assert(sizeof(gf_Ray_t_bbl_size_check) == sizeof(pxr::GfRay), "size of value type does not match");
static_assert(alignof(gf_Ray_t_bbl_size_check) == alignof(pxr::GfRay), "align of value type does not match");

using gf_Rect2i_t = pxr::GfRect2i;
using gf_Rotation_t = pxr::GfRotation;
struct BBL_ALIGN(8) gf_Rotation_t_bbl_size_check {
    gf_Vec3d_t axis;
    double angle;
};
static_assert(sizeof(gf_Rotation_t_bbl_size_check) == sizeof(pxr::GfRotation), "size of value type does not match");
static_assert(alignof(gf_Rotation_t_bbl_size_check) == alignof(pxr::GfRotation), "align of value type does not match");

using gf_Size2_t = pxr::GfSize2;
using gf_Size3_t = pxr::GfSize3;
using gf_Transform_t = pxr::GfTransform;
using js_Array_t = pxr::JsArray;
using js_Object_t = pxr::JsObject;
using js_Value_t = pxr::JsValue;
using js_TokenValuePair_t = std::pair<pxr::TfToken, pxr::JsValue>;
using ndr_NdrVersion_t = pxr::NdrVersion;
using ndr_DiscoveryPluginContext_t = pxr::NdrDiscoveryPluginContext;
using ndr_DiscoveryPlugin_t = pxr::NdrDiscoveryPlugin;
using ndr_DiscoveryPluginRefPtr_t = pxr::NdrDiscoveryPluginRefPtr;
using ndr_DiscoveryUri_t = pxr::NdrDiscoveryUri;
using ndr_Node_t = pxr::NdrNode;
using ndr_NodeUniquePtr_t = pxr::NdrNodeUniquePtr;
using ndr_NodeConstPtrVec_t = pxr::NdrNodeConstPtrVec;
using ndr_NodeDiscoveryResult_t = pxr::NdrNodeDiscoveryResult;
using ndr_NodeDiscoveryResultVector_t = std::vector<pxr::NdrNodeDiscoveryResult>;
using ndr_ParserPlugin_t = pxr::NdrParserPlugin;
using ndr_Property_t = pxr::NdrProperty;
using ndr_PropertyUniquePtr_t = pxr::NdrPropertyUniquePtr;
using ndr_PropertyUniquePtrVec_t = pxr::NdrPropertyUniquePtrVec;
using ndr_SdfTypeIndicator_t = pxr::NdrSdfTypeIndicator;
using ndr_Registry_t = pxr::NdrRegistry;
using ndr_NdrRegistryDiscoveryPluginRefPtrVec_t = pxr::NdrRegistry::DiscoveryPluginRefPtrVec;
using ndr_TokenMap_t = pxr::NdrTokenMap;
using ndr_OptionVec_t = pxr::NdrOptionVec;
using pcp_Arc_t = pxr::PcpArc;
using pcp_Cache_t = pxr::PcpCache;
using pcp_InvalidAssetPathMap_t = std::map<pxr::SdfPath, std::vector<std::string>, pxr::SdfPath::FastLessThan>;
using pcp_CachePayloadSet_t = pxr::PcpCache::PayloadSet;
using pcp_Changes_t = pxr::PcpChanges;
using pcp_PcpChangesCacheChanges_t = pxr::PcpChanges::CacheChanges;
using pcp_PcpLayerStackChanges_t = pxr::PcpChanges::LayerStackChanges;
using pcp_CacheChanges_t = pxr::PcpCacheChanges;
using pcp_CompressedSdSite_t = pxr::Pcp_CompressedSdSite;
using pcp_SourceArcInfo_t = pxr::PcpSourceArcInfo;
using pcp_SourceArcInfoVector_t = pxr::PcpSourceArcInfoVector;
using pcp_Dependency_t = pxr::PcpDependency;
using pcp_DependencyVector_t = pxr::PcpDependencyVector;
using pcp_CulledDependency_t = pxr::PcpCulledDependency;
using pcp_DynamicFileFormatContext_t = pxr::PcpDynamicFileFormatContext;
using pcp_DynamicFileFormatDependencyData_t = pxr::PcpDynamicFileFormatDependencyData;
using pcp_DynamicFileFormatInterface_t = pxr::PcpDynamicFileFormatInterface;
using pcp_ErrorBase_t = pxr::PcpErrorBase;
using pcp_ErrorBaseSharedPtr_t = std::shared_ptr<pxr::PcpErrorBase>;
using pcp_ErrorBaseSharedPtrVector_t = std::vector<std::shared_ptr<pxr::PcpErrorBase>>;
using pcp_ErrorArcCycle_t = pxr::PcpErrorArcCycle;
using pcp_ErrorArcPermissionDenied_t = pxr::PcpErrorArcPermissionDenied;
using pcp_ErrorCapacityExceeded_t = pxr::PcpErrorCapacityExceeded;
using pcp_ErrorInconsistentPropertyBase_t = pxr::PcpErrorInconsistentPropertyBase;
using pcp_ErrorInconsistentPropertyBaseSharedPtr_t = std::shared_ptr<pxr::PcpErrorInconsistentPropertyBase>;
using pcp_ErrorInconsistentPropertyType_t = pxr::PcpErrorInconsistentPropertyType;
using pcp_ErrorInconsistentAttributeType_t = pxr::PcpErrorInconsistentAttributeType;
using pcp_ErrorInconsistentAttributeVariability_t = pxr::PcpErrorInconsistentAttributeVariability;
using pcp_ErrorInvalidPrimPath_t = pxr::PcpErrorInvalidPrimPath;
using pcp_ErrorInvalidAssetPathBase_t = pxr::PcpErrorInvalidAssetPathBase;
using pcp_ErrorInvalidAssetPathBaseSharedPtr_t = std::shared_ptr<pxr::PcpErrorInvalidAssetPathBase>;
using pcp_ErrorInvalidAssetPath_t = pxr::PcpErrorInvalidAssetPath;
using pcp_ErrorMutedAssetPath_t = pxr::PcpErrorMutedAssetPath;
using pcp_ErrorTargetPathBase_t = pxr::PcpErrorTargetPathBase;
using pcp_ErrorTargetPathBaseSharedPtr_t = std::shared_ptr<pxr::PcpErrorTargetPathBase>;
using pcp_ErrorInvalidInstaceTargetPath_t = pxr::PcpErrorInvalidInstanceTargetPath;
using pcp_ErrorInvalidExternalTargetPath_t = pxr::PcpErrorInvalidExternalTargetPath;
using pcp_ErrorInvalidTargetPath_t = pxr::PcpErrorInvalidTargetPath;
using pcp_ErrorInvalidSublayerOffset_t = pxr::PcpErrorInvalidSublayerOffset;
using pcp_ErrorInvalidReferenceOffset_t = pxr::PcpErrorInvalidReferenceOffset;
using pcp_ErrorInvalidSublayerOwnership_t = pxr::PcpErrorInvalidSublayerOwnership;
using pcp_ErrorInvalidSublayerPath_t = pxr::PcpErrorInvalidSublayerPath;
using pcp_ErrorOpinionAtRelocationSource_t = pxr::PcpErrorOpinionAtRelocationSource;
using pcp_ErrorPrimPermissionDenied_t = pxr::PcpErrorPrimPermissionDenied;
using pcp_ErrorPropertyPermissionDenied_t = pxr::PcpErrorPropertyPermissionDenied;
using pcp_ErrorSublayerCycle_t = pxr::PcpErrorSublayerCycle;
using pcp_ErrorTargetPermissionDenied_t = pxr::PcpErrorTargetPermissionDenied;
using pcp_ErrorUnresolvedPrimPath_t = pxr::PcpErrorUnresolvedPrimPath;
using pcp_ErrorVariableExpressionError_t = pxr::PcpErrorVariableExpressionError;
using pcp_ExpressionVariables_t = pxr::PcpExpressionVariables;
using pcp_ExpressionVariableCachingComposer_t = pxr::PcpExpressionVariableCachingComposer;
using pcp_ExpressionVariablesDependencyData_t = pxr::PcpExpressionVariablesDependencyData;
using pcp_ExpressionVariablesSource_t = pxr::PcpExpressionVariablesSource;
using pcp_InstanceKey_t = pxr::PcpInstanceKey;
using pcp_LayerStackSite_t = pxr::PcpLayerStackSite;
using pcp_NodeIterator_t = pxr::PcpNodeIterator;
using pcp_NodeReverseIterator_t = pxr::PcpNodeReverseIterator;
using pcp_PrimIterator_t = pxr::PcpPrimIterator;
using pcp_PrimReverseIterator_t = pxr::PcpPrimReverseIterator;
using pcp_PropertyIterator_t = pxr::PcpPropertyIterator;
using pcp_PropertyReverseIterator_t = pxr::PcpPropertyReverseIterator;
using pcp_LayerStack_t = pxr::PcpLayerStack;
using pcp_LayerStackChanges_t = pxr::PcpLayerStackChanges;
using pcp_LayerStackPtr_t = pxr::PcpLayerStackPtr;
using pcp_LayerStackPtrVector_t = pxr::PcpLayerStackPtrVector;
using pcp_LayerStackRefPtr_t = pxr::PcpLayerStackRefPtr;
using pcp_LayerStackIdentifier_t = pxr::PcpLayerStackIdentifier;
using pcp_MapExpression_t = pxr::PcpMapExpression;
using pcp_MapExpressionVariable_t = pxr::PcpMapExpression::Variable;
using pcp_MapExpressionVariableUniquePtr_t = pxr::PcpMapExpression::VariableUniquePtr;
using pcp_MapFunction_t = pxr::PcpMapFunction;
using pcp_MapFunctionPathMap_t = pxr::PcpMapFunction::PathMap;
using pcp_NamespaceEdits_t = pxr::PcpNamespaceEdits;
using pcp_NamespaceEditsCacheSite_t = pxr::PcpNamespaceEdits::CacheSite;
using pcp_NamespaceEditsLayerStackSite_t = pxr::PcpNamespaceEdits::LayerStackSite;
using pcp_NodeRef_t = pxr::PcpNodeRef;
using pcp_NodeRange_t = pxr::PcpNodeRange;
using pcp_NodeRef_child_const_iterator_t = pxr::PcpNodeRef::child_const_iterator;
using pcp_NodeRef_child_const_reverse_iterator_t = pxr::PcpNodeRef::child_const_reverse_iterator;
using pcp_NodeRef_child_const_range_t = pxr::PcpNodeRef::child_const_range;
using pcp_PrimIndex_t = pxr::PcpPrimIndex;
using pcp_PrimIndexOutputs_t = pxr::PcpPrimIndexOutputs;
using pcp_PrimIndexInputs_t = pxr::PcpPrimIndexInputs;
using pcp_PrimIndex_Graph_t = pxr::PcpPrimIndex_Graph;
using pcp_PrimIndex_GraphRefPtr_t = pxr::PcpPrimIndex_GraphRefPtr;
using pcp_PrimRange_t = pxr::PcpPrimRange;
using pcp_PropertyIndex_t = pxr::PcpPropertyIndex;
using pcp_PropertyRange_t = pxr::PcpPropertyRange;
using pcp_SdSiteRef_t = pxr::Pcp_SdSiteRef;
using pcp_Site_t = pxr::PcpSite;
using pcp_TargetIndex_t = pxr::PcpTargetIndex;
using pcp_TokenSet_t = pxr::PcpTokenSet;
using pcp_VariantFallbackMap_t = pxr::PcpVariantFallbackMap;
using pcp_SiteTrackerSegment_t = pxr::PcpSiteTrackerSegment;
using sdf_AbstractData_t = pxr::SdfAbstractData;
using sdf_AbstractDataPtr_t = pxr::SdfAbstractDataPtr;
using sdf_AbstractDataPtrVector_t = pxr::SdfAbstractDataPtrVector;
using sdf_AbstractDataConstPtr_t = pxr::SdfAbstractDataConstPtr;
using sdf_AbstractDataConstPtrVector_t = pxr::SdfAbstractDataConstPtrVector;
using sdf_AbstractDataRefPtr_t = pxr::SdfAbstractDataRefPtr;
using sdf_AbstractDataRefPtrVector_t = pxr::SdfAbstractDataRefPtrVector;
using sdf_AbstractDataConstRefPtr_t = pxr::SdfAbstractDataConstRefPtr;
using sdf_AbstractDataConstRefPtrVector_t = pxr::SdfAbstractDataConstRefPtrVector;
using sdf_AbstractDataValue_t = pxr::SdfAbstractDataValue;
using sdf_AbstractDataConstValue_t = pxr::SdfAbstractDataConstValue;
using sdf_Allowed_t = pxr::SdfAllowed;
using sdf_AssetPath_t = pxr::SdfAssetPath;
using sdf_AssetPathArray_t = pxr::VtArray<pxr::SdfAssetPath>;
using sdf_AttributeSpec_t = pxr::SdfAttributeSpec;
using sdf_AttributeSpecHandle_t = pxr::SdfAttributeSpecHandle;
using sdf_AttributeSpecHandleVector_t = pxr::SdfAttributeSpecHandleVector;
using sdf_AttributeSpecView_t = pxr::SdfAttributeSpecView;
using sdf_ChangeBlock_t = pxr::SdfChangeBlock;
using sdf_ChangeList_t = pxr::SdfChangeList;
using sdf_SdfChangeListEntry_t = pxr::SdfChangeList::Entry;
using sdf_ChangeListEntryList_t = pxr::SdfChangeList::EntryList;
using sdf_PathChangeListEntryPair_t = std::pair<pxr::SdfPath, pxr::SdfChangeList::Entry>;
using sdf_LayerChangeListVec_t = pxr::SdfLayerChangeListVec;
using sdf_SdfCopySpecsValueEdit_t = pxr::SdfCopySpecsValueEdit;
using sdf_SdfData_t = pxr::SdfData;
using sdf_SdfFileFormat_t = pxr::SdfFileFormat;
using sdf_FileFormatBase_t = bblext::FileFormatBase;
using sdf_FileFormatConstPtr_t = pxr::SdfFileFormatConstPtr;
using sdf_FileFormatFileFormatArguments_t = pxr::SdfFileFormat::FileFormatArguments;
using sdf_Layer_t = pxr::SdfLayer;
using sdf_LayerHandle_t = pxr::SdfLayerHandle;
using sdf_LayerRefPtr_t = pxr::SdfLayerRefPtr;
using sdf_LayerHandleVector_t = pxr::SdfLayerHandleVector;
using sdf_LayerRefPtrVector_t = pxr::SdfLayerRefPtrVector;
using sdf_LayerHandleSet_t = pxr::SdfLayerHandleSet;
using sdf_LayerHints_t = pxr::SdfLayerHints;
struct BBL_ALIGN(1) sdf_LayerHints_t_bbl_size_check {
    bool mightHaveRelocates;
};
static_assert(sizeof(sdf_LayerHints_t_bbl_size_check) == sizeof(pxr::SdfLayerHints), "size of value type does not match");
static_assert(alignof(sdf_LayerHints_t_bbl_size_check) == alignof(pxr::SdfLayerHints), "align of value type does not match");

using sdf_LayerOffset_t = pxr::SdfLayerOffset;
using sdf_LayerOffsetVector_t = pxr::SdfLayerOffsetVector;
using sdf_LayerStateDelegate_t = pxr::SdfLayerStateDelegateBase;
using sdf_LayerTree_t = pxr::SdfLayerTree;
using sdf_LayerTreeHandle_t = pxr::SdfLayerTreeHandle;
using sdf_LayerTreeHandleVector_t = pxr::SdfLayerTreeHandleVector;
using sdf_StringListOp_t = pxr::SdfListOp<std::string>;
using sdf_NamespaceEdit_t = pxr::SdfNamespaceEdit;
using sdf_NamespaceEditVector_t = std::vector<pxr::SdfNamespaceEdit>;
using sdf_NamespaceEditDetail_t = pxr::SdfNamespaceEditDetail;
using sdf_NamespaceEditDetailVector_t = pxr::SdfNamespaceEditDetailVector;
using sdf_BatchNamespaceEdit_t = pxr::SdfBatchNamespaceEdit;
using sdf_Notice_t = pxr::SdfNotice;
using sdf_NoticeBase_t = pxr::SdfNotice::Base;
using sdf_NoticeBaseLayersDidChange_t = pxr::SdfNotice::BaseLayersDidChange;
using sdf_NoticeBaseLayersDidChangeConstIterator_t = pxr::SdfNotice::BaseLayersDidChange::const_iterator;
using sdf_NoticeLayersDidChangeSentPerLayer_t = pxr::SdfNotice::LayersDidChangeSentPerLayer;
using sdf_NoticeLayersDidChange_t = pxr::SdfNotice::LayersDidChange;
using sdf_NoticeLayerInfoDidChange_t = pxr::SdfNotice::LayerInfoDidChange;
using sdf_NoticeLayerIdentifierDidChange_t = pxr::SdfNotice::LayerIdentifierDidChange;
using sdf_NoticeLayerDidReplaceContent_t = pxr::SdfNotice::LayerDidReplaceContent;
using sdf_NoticeLayerDidReloadContent_t = pxr::SdfNotice::LayerDidReloadContent;
using sdf_NoticeDidSaveLayerToFile_t = pxr::SdfNotice::LayerDidSaveLayerToFile;
using sdf_NoticeLayerDirtinessChanged_t = pxr::SdfNotice::LayerDirtinessChanged;
using sdf_NoticeLayerMutenessChanged_t = pxr::SdfNotice::LayerMutenessChanged;
using sdf_Path_t = pxr::SdfPath;
using sdf_PathSet_t = pxr::SdfPathSet;
using sdf_PathVector_t = pxr::SdfPathVector;
using sdf_SdfPathExpression_t = pxr::SdfPathExpression;
using sdf_PathPattern_t = pxr::SdfPathExpression::PathPattern;
using sdf_Component_t = pxr::SdfPathExpression::PathPattern::Component;
using sdf_ExpressionReference_t = pxr::SdfPathExpression::ExpressionReference;
using sdf_Payload_t = pxr::SdfPayload;
using sdf_PayloadVector_t = pxr::SdfPayloadVector;
using sdf_PredicateExpression_t = pxr::SdfPredicateExpression;
using sdf_PredicateExpressionFnArg_t = pxr::SdfPredicateExpression::FnArg;
using sdf_PredicateExpressionFnCall_t = pxr::SdfPredicateExpression::FnCall;
using sdf_PrimSpec_t = pxr::SdfPrimSpec;
using sdf_PrimSpecHandle_t = pxr::SdfPrimSpecHandle;
using sdf_PrimSpecHandleVector_t = pxr::SdfPrimSpecHandleVector;
using sdf_PrimSpecHandleOffsetPair_t = std::pair<pxr::SdfPrimSpecHandle, pxr::SdfLayerOffset>;
using sdf_PrimSpecHandleOffsetPairVector_t = std::vector<std::pair<pxr::SdfPrimSpecHandle, pxr::SdfLayerOffset>>;
using sdf_PrimSpecView_t = pxr::SdfPrimSpecView;
using sdf_PropertySpec_t = pxr::SdfPropertySpec;
using sdf_PropertySpecHandle_t = pxr::SdfPropertySpecHandle;
using sdf_PropertySpecHandleVector_t = pxr::SdfPropertySpecHandleVector;
using sdf_PropertySpecHandleOffsetPair_t = std::pair<pxr::SdfPropertySpecHandle, pxr::SdfLayerOffset>;
using sdf_PropertySpecHandleOffsetPairVector_t = std::vector<std::pair<pxr::SdfPropertySpecHandle, pxr::SdfLayerOffset>>;
using sdf_PropertySpecView_t = pxr::SdfPropertySpecView;
using sdf_DictionaryProxy_t = pxr::SdfDictionaryProxy;
using sdf_NameOrderProxy_t = pxr::SdfNameOrderProxy;
using sdf_SubLayerProxy_t = pxr::SdfSubLayerProxy;
using sdf_NameEditorProxy_t = pxr::SdfNameEditorProxy;
using sdf_PathEditorProxy_t = pxr::SdfPathEditorProxy;
using sdf_PayloadEditorProxy_t = pxr::SdfPayloadEditorProxy;
using sdf_ReferenceEditorProxy_t = pxr::SdfReferenceEditorProxy;
using sdf_VariantSelectionProxy_t = pxr::SdfVariantSelectionProxy;
using sdf_RelocatesMapProxy_t = pxr::SdfRelocatesMapProxy;
using sdf_VariantSetsProxy_t = pxr::SdfVariantSetsProxy;
using sdf_Reference_t = pxr::SdfReference;
using sdf_ReferenceVector_t = pxr::SdfReferenceVector;
using sdf_RelationshipSpec_t = pxr::SdfRelationshipSpec;
using sdf_RelationshipSpecHandle_t = pxr::SdfRelationshipSpecHandle;
using sdf_RelationshipSpecHandleVector_t = pxr::SdfRelationshipSpecHandleVector;
using sdf_RelationshipSpecView_t = pxr::SdfRelationshipSpecView;
using sdf_RelationshipSpecHandleOffsetPair_t = std::pair<pxr::SdfRelationshipSpecHandle, pxr::SdfLayerOffset>;
using sdf_RelationshipSpecHandleOffsetPairVector_t = std::vector<std::pair<pxr::SdfRelationshipSpecHandle, pxr::SdfLayerOffset>>;
using sdf_SdfSchemaBase_t = pxr::SdfSchemaBase;
using sdf_FieldDefinition_t = pxr::SdfSchemaBase::FieldDefinition;
using sdf_SpecDefinition_t = pxr::SdfSchemaBase::SpecDefinition;
using sdf_SdfSchema_t = pxr::SdfSchema;
using sdf_SchemaBaseFieldDefinitionInfoVec_t = pxr::SdfSchemaBase::FieldDefinition::InfoVec;
using sdf_SdfSpec_t = pxr::SdfSpec;
using sdf_SpecHandle_t = pxr::SdfSpecHandle;
using sdf_TimeCode_t = pxr::SdfTimeCode;
struct BBL_ALIGN(8) sdf_TimeCode_t_bbl_size_check {
    double time;
};
static_assert(sizeof(sdf_TimeCode_t_bbl_size_check) == sizeof(pxr::SdfTimeCode), "size of value type does not match");
static_assert(alignof(sdf_TimeCode_t_bbl_size_check) == alignof(pxr::SdfTimeCode), "align of value type does not match");

using sdf_RelocatesMap_t = pxr::SdfRelocatesMap;
using sdf_TimeSampleMap_t = pxr::SdfTimeSampleMap;
using sdf_ValueBlock_t = pxr::SdfValueBlock;
using sdf_ValueTypeName_t = pxr::SdfValueTypeName;
using sdf_ValueTypeNameVector_t = std::vector<pxr::SdfValueTypeName>;
using sdf_TupleDimensions_t = pxr::SdfTupleDimensions;
struct BBL_ALIGN(8) sdf_TupleDimensions_t_bbl_size_check {
    size_t d[2];
    size_t size;
};
static_assert(sizeof(sdf_TupleDimensions_t_bbl_size_check) == sizeof(pxr::SdfTupleDimensions), "size of value type does not match");
static_assert(alignof(sdf_TupleDimensions_t_bbl_size_check) == alignof(pxr::SdfTupleDimensions), "align of value type does not match");

using sdf_VariableExpression_t = pxr::SdfVariableExpression;
using sdf_VariableExpressionResult_t = pxr::SdfVariableExpression::Result;
using sdf_VariantSetSpec_t = pxr::SdfVariantSetSpec;
using sdf_VariantSetSpecHandle_t = pxr::SdfVariantSetSpecHandle;
using sdf_VariantSpec_t = pxr::SdfVariantSpec;
using sdf_VariantSpecHandle_t = pxr::SdfVariantSpecHandle;
using sdf_VariantSpecHandleVector_t = pxr::SdfVariantSpecHandleVector;
using sdf_VariantView_t = pxr::SdfVariantView;
using sdr_Registry_t = pxr::SdrRegistry;
using sdr_ShaderNode_t = pxr::SdrShaderNode;
using sdr_ShaderNodeVector_t = std::vector<pxr::SdrShaderNode>;
using sdr_ShaderNodePtrVector_t = pxr::SdrShaderNodePtrVec;
using sdr_ShaderProperty_t = pxr::SdrShaderProperty;
using std_String_t = std::string;
using std_StringVector_t = std::vector<std::string>;
using std_StringPair_t = std::pair<std::string, std::string>;
using std_StringPairVector_t = std::vector<std::pair<std::string, std::string>>;
using std_StringSet_t = std::set<std::string>;
using std_StringUnorderedSet_t = std::unordered_set<std::string>;
using std_DoubleVector_t = std::vector<double>;
using std_DoubleSet_t = std::set<double>;
using std_DoublePair_t = std::pair<double, double>;
using std_FloatPair_t = std::pair<float, float>;
using tf_Enum_t = pxr::TfEnum;
using tf_Token_t = pxr::TfToken;
using tf_Type_t = pxr::TfType;
using tf_TypeSet_t = std::set<pxr::TfType>;
using tf_TypeVector_t = std::vector<pxr::TfType>;
using tf_TokenVector_t = pxr::TfTokenVector;
using tf_TokenSet_t = pxr::TfToken::Set;
using tf_TokenTokenPair_t = std::pair<pxr::TfToken, pxr::TfToken>;
using usd_AttributeQuery_t = pxr::UsdAttributeQuery;
using usd_AttributeQueryVector_t = std::vector<pxr::UsdAttributeQuery>;
using usd_ClipsAPI_t = pxr::UsdClipsAPI;
using usd_CollectionAPI_t = pxr::UsdCollectionAPI;
using usd_CollectionAPIVector_t = std::vector<pxr::UsdCollectionAPI>;
using usd_CollectionMembershipQuery_t = pxr::UsdCollectionMembershipQuery;
using usd_CollectionMembershipQueryHash_t = pxr::UsdCollectionMembershipQuery::Hash;
using usd_CollectionMembershipQueryPathExpansionRuleMap_t = pxr::UsdCollectionMembershipQuery::PathExpansionRuleMap;
using usd_MetadataValueMap_t = pxr::UsdMetadataValueMap;
using usd_CrateInfo_t = pxr::UsdCrateInfo;
using usd_CrateInfoSection_t = pxr::UsdCrateInfo::Section;
using usd_CratreInfoSectionVector_t = std::vector<pxr::UsdCrateInfo::Section>;
using usd_CrateInfoSummaryStats_t = pxr::UsdCrateInfo::SummaryStats;
struct BBL_ALIGN(8) usd_CrateInfoSummaryStats_t_bbl_size_check {
    size_t numSpecs;
    size_t numUniquePaths;
    size_t numUniqueTokens;
    size_t numUniqueStrings;
    size_t numUniqueFields;
    size_t numUniqueFieldSets;
};
static_assert(sizeof(usd_CrateInfoSummaryStats_t_bbl_size_check) == sizeof(pxr::UsdCrateInfo::SummaryStats), "size of value type does not match");
static_assert(alignof(usd_CrateInfoSummaryStats_t_bbl_size_check) == alignof(pxr::UsdCrateInfo::SummaryStats), "align of value type does not match");

using usd_EditTarget_t = pxr::UsdEditTarget;
using usd_Inherits_t = pxr::UsdInherits;
using usd_ModelAPI_t = pxr::UsdModelAPI;
using usd_Notice_t = pxr::UsdNotice;
using usd_StageNotice_t = pxr::UsdNotice::StageNotice;
using usd_StageContentsChanged_t = pxr::UsdNotice::StageContentsChanged;
using usd_ObjectsChanged_t = pxr::UsdNotice::ObjectsChanged;
using usd_ObjectsChangedPathRange_t = pxr::UsdNotice::ObjectsChanged::PathRange;
using usd_ObjectsChangedPathRangeIterator_t = pxr::UsdNotice::ObjectsChanged::PathRange::iterator;
using usd_StageEditTargetChanged_t = pxr::UsdNotice::StageEditTargetChanged;
using usd_LayerMutingChanged_t = pxr::UsdNotice::LayerMutingChanged;
using usd_Attribute_t = pxr::UsdAttribute;
using usd_AttributeVector_t = std::vector<pxr::UsdAttribute>;
using usd_Object_t = pxr::UsdObject;
using usd_ObjectSet_t = std::set<pxr::UsdObject>;
using usd_Prim_t = pxr::UsdPrim;
using usd_PrimTypeInfo_t = pxr::UsdPrimTypeInfo;
using usd_PrimVector_t = std::vector<pxr::UsdPrim>;
using usd_PrimFlagsPredicate_t = pxr::Usd_PrimFlagsPredicate;
using usd_Property_t = pxr::UsdProperty;
using usd_PropertyVector_t = std::vector<pxr::UsdProperty>;
using usd_Relationship_t = pxr::UsdRelationship;
using usd_RelationshipVector_t = std::vector<pxr::UsdRelationship>;
using usd_Payloads_t = pxr::UsdPayloads;
using usd_PrimCompositionQuery_t = pxr::UsdPrimCompositionQuery;
using usd_PrimCompositionQueryArc_t = pxr::UsdPrimCompositionQueryArc;
using usd_PrimCompositionQueryArcVector_t = std::vector<pxr::UsdPrimCompositionQueryArc>;
using usd_PrimCompositionQueryFilter_t = pxr::UsdPrimCompositionQuery::Filter;
struct BBL_ALIGN(4) usd_PrimCompositionQueryFilter_t_bbl_size_check {
    int arcTypeFilter;
    int dependencyTypeFilter;
    int arcIntroducedFilter;
    int hasSpecsFilter;
};
static_assert(sizeof(usd_PrimCompositionQueryFilter_t_bbl_size_check) == sizeof(pxr::UsdPrimCompositionQuery::Filter), "size of value type does not match");
static_assert(alignof(usd_PrimCompositionQueryFilter_t_bbl_size_check) == alignof(pxr::UsdPrimCompositionQuery::Filter), "align of value type does not match");

using usd_PrimDefinition_t = pxr::UsdPrimDefinition;
using usd_PrimDefinitionProperty_t = pxr::UsdPrimDefinition::Property;
using usd_PrimDefinitionAttribute_t = pxr::UsdPrimDefinition::Attribute;
using usd_PrimDefinitionRelationship_t = pxr::UsdPrimDefinition::Relationship;
using usd_PrimRange_t = pxr::UsdPrimRange;
using usd_PrimRangeIterator_t = pxr::UsdPrimRange::iterator;
using usd_PrimSiblingRange_t = pxr::UsdPrimSiblingRange;
using usd_PrimSiblingIterator_t = pxr::UsdPrimSiblingIterator;
using usd_PrimSubtreeRange_t = pxr::UsdPrimSubtreeRange;
using usd_References_t = pxr::UsdReferences;
using usd_ResolveInfo_t = pxr::UsdResolveInfo;
using usd_ResolveTarget_t = pxr::UsdResolveTarget;
using usd_APISchemaBase_t = pxr::UsdAPISchemaBase;
using usd_SchemaBase_t = pxr::UsdSchemaBase;
using usd_SchemaRegistry_t = pxr::UsdSchemaRegistry;
using usd_SchemaRegistrySchemaInfo_t = pxr::UsdSchemaRegistry::SchemaInfo;
using usd_SchemaRegistrySchemaInfoConstPtrVector_t = std::vector<const pxr::UsdSchemaRegistry::SchemaInfo *>;
using usd_TokenSchemaVersionPair_t = std::pair<pxr::TfToken, pxr::UsdSchemaVersion>;
using usd_SchemaRegistryTokenToTokenVectorMap_t = pxr::UsdSchemaRegistry::TokenToTokenVectorMap;
using usd_PrimDefinitionPtr_t = std::unique_ptr<pxr::UsdPrimDefinition>;
using usd_Specializes_t = pxr::UsdSpecializes;
using usd_Stage_t = pxr::UsdStage;
using usd_StageRefPtr_t = pxr::UsdStageRefPtr;
using usd_StageRefPtrVector_t = pxr::UsdStageRefPtrVector;
using usd_StageWeakPtr_t = pxr::UsdStageWeakPtr;
using usd_StageCache_t = pxr::UsdStageCache;
using usd_StageCacheId_t = pxr::UsdStageCache::Id;
using usd_UsdStageCacheRequest_t = pxr::UsdStageCacheRequest;
using usd_StageLoadRules_t = pxr::UsdStageLoadRules;
using usd_PathStageLoadRulesRulePair_t = std::pair<pxr::SdfPath, pxr::UsdStageLoadRules::Rule>;
using usd_PathStageLoadRulesRulePairVector_t = std::vector<std::pair<pxr::SdfPath, pxr::UsdStageLoadRules::Rule>>;
using usd_UsdStagePopulationMask_t = pxr::UsdStagePopulationMask;
using usd_TimeCode_t = pxr::UsdTimeCode;
struct BBL_ALIGN(8) usd_TimeCode_t_bbl_size_check {
    double time;
};
static_assert(sizeof(usd_TimeCode_t_bbl_size_check) == sizeof(pxr::UsdTimeCode), "size of value type does not match");
static_assert(alignof(usd_TimeCode_t_bbl_size_check) == alignof(pxr::UsdTimeCode), "align of value type does not match");

using usd_TimeCodeVector_t = std::vector<pxr::UsdTimeCode>;
using usd_UsdVariantSet_t = pxr::UsdVariantSet;
using usd_UsdVariantSets_t = pxr::UsdVariantSets;
using usd_StageEditTargetPair_t = std::pair<pxr::UsdStagePtr, pxr::UsdEditTarget>;
using usdGeom_BasisCurves_t = pxr::UsdGeomBasisCurves;
using usdGeom_BBoxCache_t = pxr::UsdGeomBBoxCache;
using usdGeom_PathMatrixHashMap_t = pxr::TfHashMap<pxr::SdfPath, pxr::GfMatrix4d, pxr::SdfPath::Hash>;
using usdGeom_Boundable_t = pxr::UsdGeomBoundable;
using usdGeom_Camera_t = pxr::UsdGeomCamera;
using usdGeom_Capsule_t = pxr::UsdGeomCapsule;
using usdGeom_Cone_t = pxr::UsdGeomCone;
using usdGeom_ConstraintTarget_t = pxr::UsdGeomConstraintTarget;
using usdGeom_ConstraintTargetVector_t = std::vector<pxr::UsdGeomConstraintTarget>;
using usdGeom_Cube_t = pxr::UsdGeomCube;
using usdGeom_Curves_t = pxr::UsdGeomCurves;
using usdGeom_Cylinder_t = pxr::UsdGeomCylinder;
using usdGeom_Gprim_t = pxr::UsdGeomGprim;
using usdGeom_HermiteCurves_t = pxr::UsdGeomHermiteCurves;
using usdGeom_Imageable_t = pxr::UsdGeomImageable;
using usdGeom_ImageablePurposeInfo_t = pxr::UsdGeomImageable::PurposeInfo;
using usdGeom_Mesh_t = pxr::UsdGeomMesh;
using usdGeom_ModelAPI_t = pxr::UsdGeomModelAPI;
using usdGeom_MotionAPI_t = pxr::UsdGeomMotionAPI;
using usdGeom_NurbsCurves_t = pxr::UsdGeomNurbsCurves;
using usdGeom_NurbsPatch_t = pxr::UsdGeomNurbsPatch;
using usdGeom_Plane_t = pxr::UsdGeomPlane;
using usdGeom_PointBased_t = pxr::UsdGeomPointBased;
using usdGeom_PointInstancer_t = pxr::UsdGeomPointInstancer;
using usdGeom_Points_t = pxr::UsdGeomPoints;
using usdGeom_Primvar_t = pxr::UsdGeomPrimvar;
using usdGeom_PrimvarVector_t = std::vector<pxr::UsdGeomPrimvar>;
using usdGeom_PrimvarsAPI_t = pxr::UsdGeomPrimvarsAPI;
using usdGeom_Scope_t = pxr::UsdGeomScope;
using usdGeom_Sphere_t = pxr::UsdGeomSphere;
using usdGeom_Subset_t = pxr::UsdGeomSubset;
using usdGeom_SubsetVector_t = std::vector<pxr::UsdGeomSubset>;
using usdGeom_VisibilityAPI_t = pxr::UsdGeomVisibilityAPI;
using usdGeom_Xform_t = pxr::UsdGeomXform;
using usdGeom_XformCache_t = pxr::UsdGeomXformCache;
using usdGeom_XformCommonAPI_t = pxr::UsdGeomXformCommonAPI;
using usdGeom_XformCommonAPIOps_t = pxr::UsdGeomXformCommonAPI::Ops;
using usdGeom_Xformable_t = pxr::UsdGeomXformable;
using usdGeom_XformOp_t = pxr::UsdGeomXformOp;
using usdGeom_XformOpVector_t = std::vector<pxr::UsdGeomXformOp>;
using usdLux_BoundableLightBase_t = pxr::UsdLuxBoundableLightBase;
using usdLux_CylinderLight_t = pxr::UsdLuxCylinderLight;
using usdLux_DiskLight_t = pxr::UsdLuxDiskLight;
using usdLux_DistantLight_t = pxr::UsdLuxDistantLight;
using usdLux_DomeLight_t = pxr::UsdLuxDomeLight;
using usdLux_GeometryLight_t = pxr::UsdLuxGeometryLight;
using usdLux_LightAPI_t = pxr::UsdLuxLightAPI;
using usdLux_LightFilter_t = pxr::UsdLuxLightFilter;
using usdLux_LightListAPI_t = pxr::UsdLuxLightListAPI;
using usdLux_MeshLightAPI_t = pxr::UsdLuxMeshLightAPI;
using usdLux_NonboundableLightBase_t = pxr::UsdLuxNonboundableLightBase;
using usdLux_PluginLight_t = pxr::UsdLuxPluginLight;
using usdLux_PluginLightFilter_t = pxr::UsdLuxPluginLightFilter;
using usdLux_PortalLight_t = pxr::UsdLuxPortalLight;
using usdLux_RectLight_t = pxr::UsdLuxRectLight;
using usdLux_ShadowAPI_t = pxr::UsdLuxShadowAPI;
using usdLux_ShapingAPI_t = pxr::UsdLuxShapingAPI;
using usdLux_SphereLight_t = pxr::UsdLuxSphereLight;
using usdLux_VolumeLightAPI_t = pxr::UsdLuxVolumeLightAPI;
using usdRender_DenoisePass_t = pxr::UsdRenderDenoisePass;
using usdRender_Pass_t = pxr::UsdRenderPass;
using usdRender_Product_t = pxr::UsdRenderProduct;
using usdRender_Settings_t = pxr::UsdRenderSettings;
using usdRender_SettingsBase_t = pxr::UsdRenderSettingsBase;
using usdRender_Spec_t = pxr::UsdRenderSpec;
using usdRender_SpecProduct_t = pxr::UsdRenderSpec::Product;
using usdRender_SpecRenderVar_t = pxr::UsdRenderSpec::RenderVar;
using usdRender_Var_t = pxr::UsdRenderVar;
using usdShade_AttributeVector_t = pxr::UsdShadeAttributeVector;
using usdShade_ConnectableAPI_t = pxr::UsdShadeConnectableAPI;
using usdShade_ConnectionSourceInfo_t = pxr::UsdShadeConnectionSourceInfo;
using usdShade_ConnectionSourceInfoVector_t = std::vector<pxr::UsdShadeConnectionSourceInfo>;
using usdShade_ConnectableAPIBehavior_t = pxr::UsdShadeConnectableAPIBehavior;
using usdShade_CoordSysAPI_t = pxr::UsdShadeCoordSysAPI;
using usdShade_CoordSysAPIVector_t = std::vector<pxr::UsdShadeCoordSysAPI>;
using usdShade_CoordSysAPIBinding_t = pxr::UsdShadeCoordSysAPI::Binding;
using usdShade_CoordSysAPIBindingVector_t = std::vector<pxr::UsdShadeCoordSysAPI::Binding>;
using usdShade_Input_t = pxr::UsdShadeInput;
using usdShade_InputVector_t = std::vector<pxr::UsdShadeInput>;
using usdShade_Material_t = pxr::UsdShadeMaterial;
using usdShade_MaterialVector_t = std::vector<pxr::UsdShadeMaterial>;
using usdShade_MaterialBindingAPI_t = pxr::UsdShadeMaterialBindingAPI;
using usdShade_MaterialBindingAPIDirectBinding_t = pxr::UsdShadeMaterialBindingAPI::DirectBinding;
using usdShade_MaterialBindingAPICollectionBinding_t = pxr::UsdShadeMaterialBindingAPI::CollectionBinding;
using usdShade_MaterialBindingAPICollectionBindinVector_t = pxr::UsdShadeMaterialBindingAPI::CollectionBindingVector;
using usdShade_MaterialBindingAPIBindingsAtPrim_t = pxr::UsdShadeMaterialBindingAPI::BindingsAtPrim;
using usdShade_NodeDefAPI_t = pxr::UsdShadeNodeDefAPI;
using usdShade_NodeGraph_t = pxr::UsdShadeNodeGraph;
using usdShade_NodeGraphInterfaceInputConsumersMap_t = pxr::UsdShadeNodeGraph::InterfaceInputConsumersMap;
using usdShade_Output_t = pxr::UsdShadeOutput;
using usdShade_OutputVector_t = std::vector<pxr::UsdShadeOutput>;
using usdShade_InputSourceInfoVector_t = pxr::UsdShadeOutput::SourceInfoVector;
using usdShade_Shader_t = pxr::UsdShadeShader;
using usdShade_ShaderDefParserPlugin_t = pxr::UsdShadeShaderDefParserPlugin;
using usdShade_ShaderDefUtils_t = pxr::UsdShadeShaderDefUtils;
using usdShade_TokensType_t = pxr::UsdShadeTokensType;
using usdShade_UdimUtils_t = pxr::UsdShadeUdimUtils;
using usdShade_Utils_t = pxr::UsdShadeUtils;
using usdShade_TokenAttributeTypePair_t = std::pair<pxr::TfToken, pxr::UsdShadeAttributeType>;
using usdImaging_GLEngine_t = pxr::UsdImagingGLEngine;
using usdImaging_GLRenderParams_t = pxr::UsdImagingGLRenderParams;
using vt_Value_t = pxr::VtValue;
using vt_ValueVector_t = std::vector<pxr::VtValue>;
using vt_TokenArray_t = pxr::VtTokenArray;
using vt_StringArray_t = pxr::VtStringArray;
using vt_BoolArray_t = pxr::VtBoolArray;
using vt_UCharArray_t = pxr::VtUCharArray;
using vt_IntArray_t = pxr::VtIntArray;
using vt_UIntArray_t = pxr::VtUIntArray;
using vt_Int64Array_t = pxr::VtInt64Array;
using vt_UInt64Array_t = pxr::VtUInt64Array;
using vt_FloatArray_t = pxr::VtFloatArray;
using vt_DoubleArray_t = pxr::VtDoubleArray;
using vt_Dictionary_t = pxr::VtDictionary;

class sdf_FileFormatBase_Subclass_t;
typedef int (*sdf_FileFormatBase_Subclass_t__InstantiateNewLayer)(sdf_FileFormatBase_t const*, sdf_FileFormatConstPtr_t const*, std_String_t const*, std_String_t const*, ar_AssetInfo_t const*, sdf_FileFormatFileFormatArguments_t const*, sdf_Layer_t**, void*);
typedef int (*sdf_FileFormatBase_Subclass_t__ShouldSkipAnonymousReload)(sdf_FileFormatBase_t const*, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t__ShouldReadAnonymousLayers)(sdf_FileFormatBase_t const*, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t__InitDetachedData)(sdf_FileFormatBase_t const*, sdf_FileFormatFileFormatArguments_t const*, sdf_AbstractDataRefPtr_t**, void*);
typedef int (*sdf_FileFormatBase_Subclass_t__ReadDetached)(sdf_FileFormatBase_t const*, sdf_Layer_t*, std_String_t const*, bool, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_IsPackage)(sdf_FileFormatBase_t const*, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_GetPackageRootLayerPath)(sdf_FileFormatBase_t const*, std_String_t const*, std_String_t**, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_GetDefaultFileFormatArguments)(sdf_FileFormatBase_t const*, sdf_FileFormatFileFormatArguments_t**, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_InitData)(sdf_FileFormatBase_t const*, sdf_FileFormatFileFormatArguments_t const*, sdf_AbstractDataRefPtr_t**, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_CanRead)(sdf_FileFormatBase_t const*, std_String_t const*, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_Read)(sdf_FileFormatBase_t const*, sdf_Layer_t*, std_String_t const*, bool, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_WriteToFile)(sdf_FileFormatBase_t const*, sdf_Layer_t const*, std_String_t const*, std_String_t const*, sdf_FileFormatFileFormatArguments_t const*, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_ReadFromString)(sdf_FileFormatBase_t const*, sdf_Layer_t*, std_String_t const*, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_WriteToString)(sdf_FileFormatBase_t const*, sdf_Layer_t const*, std_String_t*, std_String_t const*, bool*, void*);
typedef int (*sdf_FileFormatBase_Subclass_t_GetExternalAssetDependencies)(sdf_FileFormatBase_t const*, sdf_Layer_t const*, std_StringSet_t**, void*);
typedef int (*sdf_FileFormatBase_Subclass_dtor)(sdf_FileFormatBase_Subclass_t*, void*);

class sdf_FileFormatBase_Subclass_t : public bblext::FileFormatBase {
    sdf_FileFormatBase_Subclass_t__InstantiateNewLayer _fn__InstantiateNewLayer;
    void* _fn__InstantiateNewLayer_user_data;
    sdf_FileFormatBase_Subclass_t__ShouldSkipAnonymousReload _fn__ShouldSkipAnonymousReload;
    void* _fn__ShouldSkipAnonymousReload_user_data;
    sdf_FileFormatBase_Subclass_t__ShouldReadAnonymousLayers _fn__ShouldReadAnonymousLayers;
    void* _fn__ShouldReadAnonymousLayers_user_data;
    sdf_FileFormatBase_Subclass_t__InitDetachedData _fn__InitDetachedData;
    void* _fn__InitDetachedData_user_data;
    sdf_FileFormatBase_Subclass_t__ReadDetached _fn__ReadDetached;
    void* _fn__ReadDetached_user_data;
    sdf_FileFormatBase_Subclass_t_IsPackage _fn_IsPackage;
    void* _fn_IsPackage_user_data;
    sdf_FileFormatBase_Subclass_t_GetPackageRootLayerPath _fn_GetPackageRootLayerPath;
    void* _fn_GetPackageRootLayerPath_user_data;
    sdf_FileFormatBase_Subclass_t_GetDefaultFileFormatArguments _fn_GetDefaultFileFormatArguments;
    void* _fn_GetDefaultFileFormatArguments_user_data;
    sdf_FileFormatBase_Subclass_t_InitData _fn_InitData;
    void* _fn_InitData_user_data;
    sdf_FileFormatBase_Subclass_t_CanRead _fn_CanRead;
    void* _fn_CanRead_user_data;
    sdf_FileFormatBase_Subclass_t_Read _fn_Read;
    void* _fn_Read_user_data;
    sdf_FileFormatBase_Subclass_t_WriteToFile _fn_WriteToFile;
    void* _fn_WriteToFile_user_data;
    sdf_FileFormatBase_Subclass_t_ReadFromString _fn_ReadFromString;
    void* _fn_ReadFromString_user_data;
    sdf_FileFormatBase_Subclass_t_WriteToString _fn_WriteToString;
    void* _fn_WriteToString_user_data;
    sdf_FileFormatBase_Subclass_t_GetExternalAssetDependencies _fn_GetExternalAssetDependencies;
    void* _fn_GetExternalAssetDependencies_user_data;
    sdf_FileFormatBase_Subclass_dtor _fn_dtor;
    void* _fn_dtor_user_data;

public:
    sdf_FileFormatBase_Subclass_t(pxr::TfToken const& formatId, pxr::TfToken const& versionString, pxr::TfToken const& target, char const* extension, sdf_FileFormatBase_Subclass_t__InstantiateNewLayer fn__InstantiateNewLayer, void* fn__InstantiateNewLayer_user_data, sdf_FileFormatBase_Subclass_t__ShouldSkipAnonymousReload fn__ShouldSkipAnonymousReload, void* fn__ShouldSkipAnonymousReload_user_data, sdf_FileFormatBase_Subclass_t__ShouldReadAnonymousLayers fn__ShouldReadAnonymousLayers, void* fn__ShouldReadAnonymousLayers_user_data, sdf_FileFormatBase_Subclass_t__InitDetachedData fn__InitDetachedData, void* fn__InitDetachedData_user_data, sdf_FileFormatBase_Subclass_t__ReadDetached fn__ReadDetached, void* fn__ReadDetached_user_data, sdf_FileFormatBase_Subclass_t_IsPackage fn_IsPackage, void* fn_IsPackage_user_data, sdf_FileFormatBase_Subclass_t_GetPackageRootLayerPath fn_GetPackageRootLayerPath, void* fn_GetPackageRootLayerPath_user_data, sdf_FileFormatBase_Subclass_t_GetDefaultFileFormatArguments fn_GetDefaultFileFormatArguments, void* fn_GetDefaultFileFormatArguments_user_data, sdf_FileFormatBase_Subclass_t_InitData fn_InitData, void* fn_InitData_user_data, sdf_FileFormatBase_Subclass_t_CanRead fn_CanRead, void* fn_CanRead_user_data, sdf_FileFormatBase_Subclass_t_Read fn_Read, void* fn_Read_user_data, sdf_FileFormatBase_Subclass_t_WriteToFile fn_WriteToFile, void* fn_WriteToFile_user_data, sdf_FileFormatBase_Subclass_t_ReadFromString fn_ReadFromString, void* fn_ReadFromString_user_data, sdf_FileFormatBase_Subclass_t_WriteToString fn_WriteToString, void* fn_WriteToString_user_data, sdf_FileFormatBase_Subclass_t_GetExternalAssetDependencies fn_GetExternalAssetDependencies, void* fn_GetExternalAssetDependencies_user_data, sdf_FileFormatBase_Subclass_dtor fn_dtor, void* fn_dtor_user_data)
    : FileFormatBase(formatId, versionString, target, extension),
    _fn__InstantiateNewLayer(fn__InstantiateNewLayer),
    _fn__InstantiateNewLayer_user_data(fn__InstantiateNewLayer_user_data),
    _fn__ShouldSkipAnonymousReload(fn__ShouldSkipAnonymousReload),
    _fn__ShouldSkipAnonymousReload_user_data(fn__ShouldSkipAnonymousReload_user_data),
    _fn__ShouldReadAnonymousLayers(fn__ShouldReadAnonymousLayers),
    _fn__ShouldReadAnonymousLayers_user_data(fn__ShouldReadAnonymousLayers_user_data),
    _fn__InitDetachedData(fn__InitDetachedData),
    _fn__InitDetachedData_user_data(fn__InitDetachedData_user_data),
    _fn__ReadDetached(fn__ReadDetached),
    _fn__ReadDetached_user_data(fn__ReadDetached_user_data),
    _fn_IsPackage(fn_IsPackage),
    _fn_IsPackage_user_data(fn_IsPackage_user_data),
    _fn_GetPackageRootLayerPath(fn_GetPackageRootLayerPath),
    _fn_GetPackageRootLayerPath_user_data(fn_GetPackageRootLayerPath_user_data),
    _fn_GetDefaultFileFormatArguments(fn_GetDefaultFileFormatArguments),
    _fn_GetDefaultFileFormatArguments_user_data(fn_GetDefaultFileFormatArguments_user_data),
    _fn_InitData(fn_InitData),
    _fn_InitData_user_data(fn_InitData_user_data),
    _fn_CanRead(fn_CanRead),
    _fn_CanRead_user_data(fn_CanRead_user_data),
    _fn_Read(fn_Read),
    _fn_Read_user_data(fn_Read_user_data),
    _fn_WriteToFile(fn_WriteToFile),
    _fn_WriteToFile_user_data(fn_WriteToFile_user_data),
    _fn_ReadFromString(fn_ReadFromString),
    _fn_ReadFromString_user_data(fn_ReadFromString_user_data),
    _fn_WriteToString(fn_WriteToString),
    _fn_WriteToString_user_data(fn_WriteToString_user_data),
    _fn_GetExternalAssetDependencies(fn_GetExternalAssetDependencies),
    _fn_GetExternalAssetDependencies_user_data(fn_GetExternalAssetDependencies_user_data),
    _fn_dtor(fn_dtor),
    _fn_dtor_user_data(fn_dtor_user_data)
    {}


    virtual ~sdf_FileFormatBase_Subclass_t() {
        if (_fn_dtor) {
            _fn_dtor(this, _fn_dtor_user_data);
        }
    }
    virtual auto _InstantiateNewLayer(pxr::SdfFileFormatConstPtr const& fileFormat, std::string const& identifier, std::string const& realPath, pxr::ArAssetInfo const& assetInfo, pxr::SdfFileFormat::FileFormatArguments const& args) const -> pxr::SdfLayer* override {
        if (_fn__InstantiateNewLayer == nullptr) {
            return bblext::FileFormatBase::_InstantiateNewLayer(fileFormat, identifier, realPath, assetInfo, args);
        }

        pxr::SdfLayer* _result;
        _fn__InstantiateNewLayer(this, &fileFormat, &identifier, &realPath, &assetInfo, &args, &_result, _fn__InstantiateNewLayer_user_data);
        return _result;
    }

    virtual auto _ShouldSkipAnonymousReload() const -> bool override {
        if (_fn__ShouldSkipAnonymousReload == nullptr) {
            return bblext::FileFormatBase::_ShouldSkipAnonymousReload();
        }

        bool _result;
        _fn__ShouldSkipAnonymousReload(this, &_result, _fn__ShouldSkipAnonymousReload_user_data);
        return _result;
    }

    virtual auto _ShouldReadAnonymousLayers() const -> bool override {
        if (_fn__ShouldReadAnonymousLayers == nullptr) {
            return bblext::FileFormatBase::_ShouldReadAnonymousLayers();
        }

        bool _result;
        _fn__ShouldReadAnonymousLayers(this, &_result, _fn__ShouldReadAnonymousLayers_user_data);
        return _result;
    }

    virtual auto _InitDetachedData(pxr::SdfFileFormat::FileFormatArguments const& args) const -> pxr::SdfAbstractDataRefPtr override {
        if (_fn__InitDetachedData == nullptr) {
            return bblext::FileFormatBase::_InitDetachedData(args);
        }

        pxr::SdfAbstractDataRefPtr _result;
        pxr::SdfAbstractDataRefPtr* _result_ptr;
        _fn__InitDetachedData(this, &args, &_result_ptr, _fn__InitDetachedData_user_data);
        _result = std::move(*_result_ptr);
        delete _result_ptr;
        return _result;
    }

    virtual auto _ReadDetached(pxr::SdfLayer* layer, std::string const& resolvedPath, bool metadataOnly) const -> bool override {
        if (_fn__ReadDetached == nullptr) {
            return bblext::FileFormatBase::_ReadDetached(layer, resolvedPath, metadataOnly);
        }

        bool _result;
        _fn__ReadDetached(this, layer, &resolvedPath, metadataOnly, &_result, _fn__ReadDetached_user_data);
        return _result;
    }

    virtual auto IsPackage() const -> bool override {
        if (_fn_IsPackage == nullptr) {
            return bblext::FileFormatBase::IsPackage();
        }

        bool _result;
        _fn_IsPackage(this, &_result, _fn_IsPackage_user_data);
        return _result;
    }

    virtual auto GetPackageRootLayerPath(std::string const& resolvedPath) const -> std::string override {
        if (_fn_GetPackageRootLayerPath == nullptr) {
            return bblext::FileFormatBase::GetPackageRootLayerPath(resolvedPath);
        }

        std::string _result;
        std::string* _result_ptr;
        _fn_GetPackageRootLayerPath(this, &resolvedPath, &_result_ptr, _fn_GetPackageRootLayerPath_user_data);
        _result = std::move(*_result_ptr);
        delete _result_ptr;
        return _result;
    }

    virtual auto GetDefaultFileFormatArguments() const -> pxr::SdfFileFormat::FileFormatArguments override {
        if (_fn_GetDefaultFileFormatArguments == nullptr) {
            return bblext::FileFormatBase::GetDefaultFileFormatArguments();
        }

        pxr::SdfFileFormat::FileFormatArguments _result;
        pxr::SdfFileFormat::FileFormatArguments* _result_ptr;
        _fn_GetDefaultFileFormatArguments(this, &_result_ptr, _fn_GetDefaultFileFormatArguments_user_data);
        _result = std::move(*_result_ptr);
        delete _result_ptr;
        return _result;
    }

    virtual auto InitData(pxr::SdfFileFormat::FileFormatArguments const& args) const -> pxr::SdfAbstractDataRefPtr override {
        if (_fn_InitData == nullptr) {
            return bblext::FileFormatBase::InitData(args);
        }

        pxr::SdfAbstractDataRefPtr _result;
        pxr::SdfAbstractDataRefPtr* _result_ptr;
        _fn_InitData(this, &args, &_result_ptr, _fn_InitData_user_data);
        _result = std::move(*_result_ptr);
        delete _result_ptr;
        return _result;
    }

    virtual auto CanRead(std::string const& file) const -> bool override {
        if (_fn_CanRead == nullptr) {
            fprintf(stderr, "method pxrInternal_v0_23__pxrReserved__::SdfFileFormat::CanRead is pure virtual, but no implementation was provided in the subclass");
            std::terminate();
        }

        bool _result;
        _fn_CanRead(this, &file, &_result, _fn_CanRead_user_data);
        return _result;
    }

    virtual auto Read(pxr::SdfLayer* layer, std::string const& resolvedPath, bool metadataOnly) const -> bool override {
        if (_fn_Read == nullptr) {
            fprintf(stderr, "method pxrInternal_v0_23__pxrReserved__::SdfFileFormat::Read is pure virtual, but no implementation was provided in the subclass");
            std::terminate();
        }

        bool _result;
        _fn_Read(this, layer, &resolvedPath, metadataOnly, &_result, _fn_Read_user_data);
        return _result;
    }

    virtual auto WriteToFile(pxr::SdfLayer const& layer, std::string const& filePath, std::string const& comment, pxr::SdfFileFormat::FileFormatArguments const& args) const -> bool override {
        if (_fn_WriteToFile == nullptr) {
            return bblext::FileFormatBase::WriteToFile(layer, filePath, comment, args);
        }

        bool _result;
        _fn_WriteToFile(this, &layer, &filePath, &comment, &args, &_result, _fn_WriteToFile_user_data);
        return _result;
    }

    virtual auto ReadFromString(pxr::SdfLayer* layer, std::string const& str) const -> bool override {
        if (_fn_ReadFromString == nullptr) {
            return bblext::FileFormatBase::ReadFromString(layer, str);
        }

        bool _result;
        _fn_ReadFromString(this, layer, &str, &_result, _fn_ReadFromString_user_data);
        return _result;
    }

    virtual auto WriteToString(pxr::SdfLayer const& layer, std::string* str, std::string const& comment) const -> bool override {
        if (_fn_WriteToString == nullptr) {
            return bblext::FileFormatBase::WriteToString(layer, str, comment);
        }

        bool _result;
        _fn_WriteToString(this, &layer, str, &comment, &_result, _fn_WriteToString_user_data);
        return _result;
    }

    virtual auto GetExternalAssetDependencies(pxr::SdfLayer const& layer) const -> std::set<std::string> override {
        if (_fn_GetExternalAssetDependencies == nullptr) {
            return bblext::FileFormatBase::GetExternalAssetDependencies(layer);
        }

        std::set<std::string> _result;
        std::set<std::string>* _result_ptr;
        _fn_GetExternalAssetDependencies(this, &layer, &_result_ptr, _fn_GetExternalAssetDependencies_user_data);
        _result = std::move(*_result_ptr);
        delete _result_ptr;
        return _result;
    }

};

extern "C" int sdf_FileFormatBase_Subclass_ctor(tf_Token_t const* formatId, tf_Token_t const* versionString, tf_Token_t const* target, char const* extension, sdf_FileFormatBase_Subclass_t** _result, sdf_FileFormatBase_Subclass_t__InstantiateNewLayer fn__InstantiateNewLayer, void* fn__InstantiateNewLayer_user_data, sdf_FileFormatBase_Subclass_t__ShouldSkipAnonymousReload fn__ShouldSkipAnonymousReload, void* fn__ShouldSkipAnonymousReload_user_data, sdf_FileFormatBase_Subclass_t__ShouldReadAnonymousLayers fn__ShouldReadAnonymousLayers, void* fn__ShouldReadAnonymousLayers_user_data, sdf_FileFormatBase_Subclass_t__InitDetachedData fn__InitDetachedData, void* fn__InitDetachedData_user_data, sdf_FileFormatBase_Subclass_t__ReadDetached fn__ReadDetached, void* fn__ReadDetached_user_data, sdf_FileFormatBase_Subclass_t_IsPackage fn_IsPackage, void* fn_IsPackage_user_data, sdf_FileFormatBase_Subclass_t_GetPackageRootLayerPath fn_GetPackageRootLayerPath, void* fn_GetPackageRootLayerPath_user_data, sdf_FileFormatBase_Subclass_t_GetDefaultFileFormatArguments fn_GetDefaultFileFormatArguments, void* fn_GetDefaultFileFormatArguments_user_data, sdf_FileFormatBase_Subclass_t_InitData fn_InitData, void* fn_InitData_user_data, sdf_FileFormatBase_Subclass_t_CanRead fn_CanRead, void* fn_CanRead_user_data, sdf_FileFormatBase_Subclass_t_Read fn_Read, void* fn_Read_user_data, sdf_FileFormatBase_Subclass_t_WriteToFile fn_WriteToFile, void* fn_WriteToFile_user_data, sdf_FileFormatBase_Subclass_t_ReadFromString fn_ReadFromString, void* fn_ReadFromString_user_data, sdf_FileFormatBase_Subclass_t_WriteToString fn_WriteToString, void* fn_WriteToString_user_data, sdf_FileFormatBase_Subclass_t_GetExternalAssetDependencies fn_GetExternalAssetDependencies, void* fn_GetExternalAssetDependencies_user_data, sdf_FileFormatBase_Subclass_dtor fn_dtor, void* fn_dtor_user_data) {
    try {
        *_result = new sdf_FileFormatBase_Subclass_t(*formatId, *versionString, *target, extension, fn__InstantiateNewLayer, fn__InstantiateNewLayer_user_data, fn__ShouldSkipAnonymousReload, fn__ShouldSkipAnonymousReload_user_data, fn__ShouldReadAnonymousLayers, fn__ShouldReadAnonymousLayers_user_data, fn__InitDetachedData, fn__InitDetachedData_user_data, fn__ReadDetached, fn__ReadDetached_user_data, fn_IsPackage, fn_IsPackage_user_data, fn_GetPackageRootLayerPath, fn_GetPackageRootLayerPath_user_data, fn_GetDefaultFileFormatArguments, fn_GetDefaultFileFormatArguments_user_data, fn_InitData, fn_InitData_user_data, fn_CanRead, fn_CanRead_user_data, fn_Read, fn_Read_user_data, fn_WriteToFile, fn_WriteToFile_user_data, fn_ReadFromString, fn_ReadFromString_user_data, fn_WriteToString, fn_WriteToString_user_data, fn_GetExternalAssetDependencies, fn_GetExternalAssetDependencies_user_data, fn_dtor, fn_dtor_user_data);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

extern "C" {
int ar_ArAsset_GetSize(ar_ArAsset_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ArAsset_GetBuffer(ar_ArAsset_t const* _this, ar_ConstCharSharedPtr_t** _result) {
    try {
        *_result = new std::shared_ptr<const char>(_this->GetBuffer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ArAsset_Read(ar_ArAsset_t const* _this, void* buffer, size_t count, size_t offset, size_t* _result) {
    try {
        *_result = _this->Read(buffer, count, offset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ArAsset_GetFileUnsafe(ar_ArAsset_t const* _this, ar_FileSizePair_t** _result) {
    try {
        *_result = new std::pair<FILE *, size_t>(_this->GetFileUnsafe());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ArAsset_GetDetachedAsset(ar_ArAsset_t const* _this, ar_AssetSharedPtr_t** _result) {
    try {
        *_result = new std::shared_ptr<pxr::ArAsset>(_this->GetDetachedAsset());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ArAsset_dtor(ar_ArAsset_t* _this) {
    delete _this;
    return 0;
}

int ar_AssetSharedPtr_GetSize(ar_AssetSharedPtr_t const* _this, size_t* _result) {
    try {
        *_result = (*_this)->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_AssetSharedPtr_GetBuffer(ar_AssetSharedPtr_t const* _this, ar_ConstCharSharedPtr_t** _result) {
    try {
        *_result = new std::shared_ptr<const char>((*_this)->GetBuffer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_AssetSharedPtr_Read(ar_AssetSharedPtr_t const* _this, void* buffer, size_t count, size_t offset, size_t* _result) {
    try {
        *_result = (*_this)->Read(buffer, count, offset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_AssetSharedPtr_GetFileUnsafe(ar_AssetSharedPtr_t const* _this, ar_FileSizePair_t** _result) {
    try {
        *_result = new std::pair<FILE *, size_t>((*_this)->GetFileUnsafe());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_AssetSharedPtr_GetDetachedAsset(ar_AssetSharedPtr_t const* _this, ar_AssetSharedPtr_t** _result) {
    try {
        *_result = new std::shared_ptr<pxr::ArAsset>((*_this)->GetDetachedAsset());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_AssetSharedPtr_dtor(ar_AssetSharedPtr_t* _this) {
    delete _this;
    return 0;
}

int ar_ConstCharSharedPtr_get(ar_ConstCharSharedPtr_t const* _this, char const** _result) {
    *_result = _this->get();
    return 0;
}

int ar_ConstCharSharedPtr_dtor(ar_ConstCharSharedPtr_t* _this) {
    delete _this;
    return 0;
}

int ar_FileSizePair_dtor(ar_FileSizePair_t* _this) {
    delete _this;
    return 0;
}

int ar_AssetInfo_default(ar_AssetInfo_t** _result) {
    try {
        *_result = new pxr::ArAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_AssetInfo_dtor(ar_AssetInfo_t* _this) {
    delete _this;
    return 0;
}

int ar_ResolvedPath_GetPathString(ar_ResolvedPath_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetPathString();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolvedPath_GetHash(ar_ResolvedPath_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetHash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolvedPath_IsEmpty(ar_ResolvedPath_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolvedPath_ctor(std_String_t const* resolvedPath, ar_ResolvedPath_t** _result) {
    try {
        *_result = new pxr::ArResolvedPath(*resolvedPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolvedPath_dtor(ar_ResolvedPath_t* _this) {
    delete _this;
    return 0;
}

int ar_Resolver_CreateIdentifier(ar_Resolver_t const* _this, std_String_t const* assetPath, ar_ResolvedPath_t const* anchorAssetPath, std_String_t** _result) {
    try {
        *_result = new std::string(_this->CreateIdentifier(*assetPath, *anchorAssetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_CreateIdentifierForNewAsset(ar_Resolver_t const* _this, std_String_t const* assetPath, ar_ResolvedPath_t const* anchorAssetPath, std_String_t** _result) {
    try {
        *_result = new std::string(_this->CreateIdentifierForNewAsset(*assetPath, *anchorAssetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_Resolve(ar_Resolver_t const* _this, std_String_t const* assetPath, ar_ResolvedPath_t** _result) {
    try {
        *_result = new pxr::ArResolvedPath(_this->Resolve(*assetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_ResolveForNewAsset(ar_Resolver_t const* _this, std_String_t const* assetPath, ar_ResolvedPath_t** _result) {
    try {
        *_result = new pxr::ArResolvedPath(_this->ResolveForNewAsset(*assetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_BindContext(ar_Resolver_t* _this, ar_ResolverContext_t const* context, vt_Value_t* bindingData) {
    try {
        _this->BindContext(*context, bindingData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_UnbindContext(ar_Resolver_t* _this, ar_ResolverContext_t const* context, vt_Value_t* bindingData) {
    try {
        _this->UnbindContext(*context, bindingData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_CreateDefaultContext(ar_Resolver_t const* _this, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(_this->CreateDefaultContext());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_CreateDefaultContextForAsset(ar_Resolver_t const* _this, std_String_t const* assetPath, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(_this->CreateDefaultContextForAsset(*assetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_CreateContextFromString_00(ar_Resolver_t const* _this, std_String_t const* contextStr, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(_this->CreateContextFromString(*contextStr));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_CreateContextFromString_01(ar_Resolver_t const* _this, std_String_t const* uriScheme, std_String_t const* contextStr, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(_this->CreateContextFromString(*uriScheme, *contextStr));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_CreateContextFromStrings(ar_Resolver_t const* _this, std_StringPairVector_t const* contextStrs, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(_this->CreateContextFromStrings(*contextStrs));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_RefreshContext(ar_Resolver_t* _this, ar_ResolverContext_t const* context) {
    try {
        _this->RefreshContext(*context);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_GetCurrentContext(ar_Resolver_t const* _this, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(_this->GetCurrentContext());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_IsContextDependentPath(ar_Resolver_t const* _this, std_String_t const* assetPath, bool* _result) {
    try {
        *_result = _this->IsContextDependentPath(*assetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_GetExtension(ar_Resolver_t const* _this, std_String_t const* assetPath, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetExtension(*assetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_GetAssetInfo(ar_Resolver_t const* _this, std_String_t const* assetPath, ar_ResolvedPath_t const* resolvedPath, ar_AssetInfo_t** _result) {
    try {
        *_result = new pxr::ArAssetInfo(_this->GetAssetInfo(*assetPath, *resolvedPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_GetModificationTimestamp(ar_Resolver_t const* _this, std_String_t const* assetPath, ar_ResolvedPath_t const* resolvedPath, ar_Timestamp_t** _result) {
    try {
        *_result = new pxr::ArTimestamp(_this->GetModificationTimestamp(*assetPath, *resolvedPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_OpenAsset(ar_Resolver_t const* _this, ar_ResolvedPath_t const* resolvedPath, ar_AssetSharedPtr_t** _result) {
    try {
        *_result = new std::shared_ptr<pxr::ArAsset>(_this->OpenAsset(*resolvedPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_OpenAssetForWrite(ar_Resolver_t const* _this, ar_ResolvedPath_t const* resolvedPath, int writeMode, ar_WritableAssetSharedPtr_t** _result) {
    try {
        *_result = new std::shared_ptr<pxr::ArWritableAsset>(_this->OpenAssetForWrite(*resolvedPath, static_cast<pxr::ArResolver::WriteMode>(writeMode)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_CanWriteAssetToPath(ar_Resolver_t const* _this, ar_ResolvedPath_t const* resolvedPath, std_String_t* whyNot, bool* _result) {
    try {
        *_result = _this->CanWriteAssetToPath(*resolvedPath, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_BeginCacheScope(ar_Resolver_t* _this, vt_Value_t* cacheScopeData) {
    try {
        _this->BeginCacheScope(cacheScopeData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_EndCacheScope(ar_Resolver_t* _this, vt_Value_t* cacheScopeData) {
    try {
        _this->EndCacheScope(cacheScopeData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_IsRepositoryPath(ar_Resolver_t const* _this, std_String_t const* path, bool* _result) {
    try {
        *_result = _this->IsRepositoryPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Resolver_dtor(ar_Resolver_t* _this) {
    delete _this;
    return 0;
}

int ar_ResolverContext_IsEmpty(ar_ResolverContext_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolverContext_GetDebugString(ar_ResolverContext_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDebugString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolverContext_op_eq(ar_ResolverContext_t const* _this, ar_ResolverContext_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolverContext_op_neq(ar_ResolverContext_t const* _this, ar_ResolverContext_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolverContext_op_lt(ar_ResolverContext_t const* _this, ar_ResolverContext_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolverContext_default(ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolverContext_ctor(ar_ResolverContextVector_t const* ctxs, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(*ctxs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_ResolverContext_dtor(ar_ResolverContext_t* _this) {
    delete _this;
    return 0;
}

int ar_ResolverContextVector_data(ar_ResolverContextVector_t* _this, ar_ResolverContext_t** _result) {
    *_result = _this->data();
    return 0;
}

int ar_ResolverContextVector_data_const(ar_ResolverContextVector_t const* _this, ar_ResolverContext_t const** _result) {
    *_result = _this->data();
    return 0;
}

int ar_ResolverContextVector_empty(ar_ResolverContextVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int ar_ResolverContextVector_size(ar_ResolverContextVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int ar_ResolverContextVector_max_size(ar_ResolverContextVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int ar_ResolverContextVector_capacity(ar_ResolverContextVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int ar_ResolverContextVector_clear(ar_ResolverContextVector_t* _this) {
    _this->clear();
    return 0;
}

int ar_ResolverContextVector_pop_back(ar_ResolverContextVector_t* _this) {
    _this->pop_back();
    return 0;
}

int ar_ResolverContextVector_op_index(ar_ResolverContextVector_t const* _this, size_t __n, ar_ResolverContext_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int ar_ResolverContextVector_default(ar_ResolverContextVector_t** _result) {
    *_result = new std::vector<pxr::ArResolverContext>();
    return 0;
}

int ar_ResolverContextVector_dtor(ar_ResolverContextVector_t* _this) {
    delete _this;
    return 0;
}

int ar_Timestamp_IsValid(ar_Timestamp_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Timestamp_GetTime(ar_Timestamp_t const* _this, double* _result) {
    try {
        *_result = _this->GetTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Timestamp_default(ar_Timestamp_t** _result) {
    try {
        *_result = new pxr::ArTimestamp();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Timestamp_from_time(double time, ar_Timestamp_t** _result) {
    try {
        *_result = new pxr::ArTimestamp(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_Timestamp_dtor(ar_Timestamp_t* _this) {
    delete _this;
    return 0;
}

int ar_WritableAsset_Close(ar_WritableAsset_t* _this, bool* _result) {
    try {
        *_result = _this->Close();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_WritableAsset_Write(ar_WritableAsset_t* _this, void const* buffer, size_t count, size_t offset, size_t* _result) {
    try {
        *_result = _this->Write(buffer, count, offset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_WritableAsset_dtor(ar_WritableAsset_t* _this) {
    delete _this;
    return 0;
}

int ar_WritableAssetSharedPtr_Close(ar_WritableAssetSharedPtr_t* _this, bool* _result) {
    try {
        *_result = (*_this)->Close();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_WritableAssetSharedPtr_Write(ar_WritableAssetSharedPtr_t* _this, void const* buffer, size_t count, size_t offset, size_t* _result) {
    try {
        *_result = (*_this)->Write(buffer, count, offset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_WritableAssetSharedPtr_dtor(ar_WritableAssetSharedPtr_t* _this) {
    delete _this;
    return 0;
}

int ar_set_ar_resolver_factory(tf_Type_t const* type, void* create_identifier_for_new_asset, void* create_identifier, void* open_asset, void* resolve, void* resolve_for_new_asset, void* open_asset_for_write, void* get_extension, void* get_modification_timestamp, void* close_writeable_asset, void* open_writable_asset, void* write_writable_asset) {
    try {
        bblext::set_ar_resolver_factory(*type, create_identifier_for_new_asset, create_identifier, open_asset, resolve, resolve_for_new_asset, open_asset_for_write, get_extension, get_modification_timestamp, close_writeable_asset, open_writable_asset, write_writable_asset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ar_asset_from_bytes(char const* bytes, size_t len, ar_AssetSharedPtr_t** _result) {
    try {
        *_result = new std::shared_ptr<pxr::ArAsset>(bblext::asset_from_bytes(bytes, len));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2fArray_data(gf_Vec2fArray_t* _this, gf_Vec2f_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2fArray_data_const(gf_Vec2fArray_t const* _this, gf_Vec2f_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2fArray_size(gf_Vec2fArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2fArray_op_index(gf_Vec2fArray_t* _this, size_t index, gf_Vec2f_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2fArray_op_index_const(gf_Vec2fArray_t const* _this, size_t index, gf_Vec2f_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2fArray_new(gf_Vec2fArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec2f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2fArray_dtor(gf_Vec2fArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec3fArray_data(gf_Vec3fArray_t* _this, gf_Vec3f_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3fArray_data_const(gf_Vec3fArray_t const* _this, gf_Vec3f_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3fArray_size(gf_Vec3fArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3fArray_op_index(gf_Vec3fArray_t* _this, size_t index, gf_Vec3f_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3fArray_op_index_const(gf_Vec3fArray_t const* _this, size_t index, gf_Vec3f_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3fArray_new(gf_Vec3fArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec3f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3fArray_dtor(gf_Vec3fArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec3fArrayVector_data(gf_Vec3fArrayVector_t* _this, gf_Vec3fArray_t** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Vec3fArrayVector_data_const(gf_Vec3fArrayVector_t const* _this, gf_Vec3fArray_t const** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Vec3fArrayVector_empty(gf_Vec3fArrayVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int gf_Vec3fArrayVector_size(gf_Vec3fArrayVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int gf_Vec3fArrayVector_max_size(gf_Vec3fArrayVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int gf_Vec3fArrayVector_capacity(gf_Vec3fArrayVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int gf_Vec3fArrayVector_clear(gf_Vec3fArrayVector_t* _this) {
    _this->clear();
    return 0;
}

int gf_Vec3fArrayVector_pop_back(gf_Vec3fArrayVector_t* _this) {
    _this->pop_back();
    return 0;
}

int gf_Vec3fArrayVector_op_index(gf_Vec3fArrayVector_t const* _this, size_t __n, gf_Vec3fArray_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int gf_Vec3fArrayVector_default(gf_Vec3fArrayVector_t** _result) {
    *_result = new std::vector<pxr::VtVec3fArray>();
    return 0;
}

int gf_Vec3fArrayVector_dtor(gf_Vec3fArrayVector_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec4fArray_data(gf_Vec4fArray_t* _this, gf_Vec4f_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4fArray_data_const(gf_Vec4fArray_t const* _this, gf_Vec4f_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4fArray_size(gf_Vec4fArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4fArray_op_index(gf_Vec4fArray_t* _this, size_t index, gf_Vec4f_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4fArray_op_index_const(gf_Vec4fArray_t const* _this, size_t index, gf_Vec4f_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4fArray_new(gf_Vec4fArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec4f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4fArray_dtor(gf_Vec4fArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec4fVector_data(gf_Vec4fVector_t* _this, gf_Vec4f_t** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Vec4fVector_data_const(gf_Vec4fVector_t const* _this, gf_Vec4f_t const** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Vec4fVector_empty(gf_Vec4fVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int gf_Vec4fVector_size(gf_Vec4fVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int gf_Vec4fVector_max_size(gf_Vec4fVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int gf_Vec4fVector_capacity(gf_Vec4fVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int gf_Vec4fVector_clear(gf_Vec4fVector_t* _this) {
    _this->clear();
    return 0;
}

int gf_Vec4fVector_pop_back(gf_Vec4fVector_t* _this) {
    _this->pop_back();
    return 0;
}

int gf_Vec4fVector_op_index(gf_Vec4fVector_t const* _this, size_t __n, gf_Vec4f_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int gf_Vec4fVector_default(gf_Vec4fVector_t** _result) {
    *_result = new std::vector<pxr::GfVec4f>();
    return 0;
}

int gf_Vec4fVector_dtor(gf_Vec4fVector_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec2hArray_data(gf_Vec2hArray_t* _this, gf_Vec2h_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2hArray_data_const(gf_Vec2hArray_t const* _this, gf_Vec2h_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2hArray_size(gf_Vec2hArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2hArray_op_index(gf_Vec2hArray_t* _this, size_t index, gf_Vec2h_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2hArray_op_index_const(gf_Vec2hArray_t const* _this, size_t index, gf_Vec2h_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2hArray_new(gf_Vec2hArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec2h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2hArray_dtor(gf_Vec2hArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec3hArray_data(gf_Vec3hArray_t* _this, gf_Vec3h_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3hArray_data_const(gf_Vec3hArray_t const* _this, gf_Vec3h_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3hArray_size(gf_Vec3hArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3hArray_op_index(gf_Vec3hArray_t* _this, size_t index, gf_Vec3h_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3hArray_op_index_const(gf_Vec3hArray_t const* _this, size_t index, gf_Vec3h_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3hArray_new(gf_Vec3hArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec3h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3hArray_dtor(gf_Vec3hArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec4hArray_data(gf_Vec4hArray_t* _this, gf_Vec4h_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4hArray_data_const(gf_Vec4hArray_t const* _this, gf_Vec4h_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4hArray_size(gf_Vec4hArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4hArray_op_index(gf_Vec4hArray_t* _this, size_t index, gf_Vec4h_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4hArray_op_index_const(gf_Vec4hArray_t const* _this, size_t index, gf_Vec4h_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4hArray_new(gf_Vec4hArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec4h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4hArray_dtor(gf_Vec4hArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec2dArray_data(gf_Vec2dArray_t* _this, gf_Vec2d_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2dArray_data_const(gf_Vec2dArray_t const* _this, gf_Vec2d_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2dArray_size(gf_Vec2dArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2dArray_op_index(gf_Vec2dArray_t* _this, size_t index, gf_Vec2d_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2dArray_op_index_const(gf_Vec2dArray_t const* _this, size_t index, gf_Vec2d_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2dArray_new(gf_Vec2dArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec2d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2dArray_dtor(gf_Vec2dArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec3dVector_data(gf_Vec3dVector_t* _this, gf_Vec3d_t** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Vec3dVector_data_const(gf_Vec3dVector_t const* _this, gf_Vec3d_t const** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Vec3dVector_empty(gf_Vec3dVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int gf_Vec3dVector_size(gf_Vec3dVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int gf_Vec3dVector_max_size(gf_Vec3dVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int gf_Vec3dVector_capacity(gf_Vec3dVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int gf_Vec3dVector_clear(gf_Vec3dVector_t* _this) {
    _this->clear();
    return 0;
}

int gf_Vec3dVector_pop_back(gf_Vec3dVector_t* _this) {
    _this->pop_back();
    return 0;
}

int gf_Vec3dVector_op_index(gf_Vec3dVector_t const* _this, size_t __n, gf_Vec3d_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int gf_Vec3dVector_default(gf_Vec3dVector_t** _result) {
    *_result = new std::vector<pxr::GfVec3d>();
    return 0;
}

int gf_Vec3dVector_dtor(gf_Vec3dVector_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec3dArray_data(gf_Vec3dArray_t* _this, gf_Vec3d_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3dArray_data_const(gf_Vec3dArray_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3dArray_size(gf_Vec3dArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3dArray_op_index(gf_Vec3dArray_t* _this, size_t index, gf_Vec3d_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3dArray_op_index_const(gf_Vec3dArray_t const* _this, size_t index, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3dArray_new(gf_Vec3dArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec3d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3dArray_dtor(gf_Vec3dArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec4dArray_data(gf_Vec4dArray_t* _this, gf_Vec4d_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4dArray_data_const(gf_Vec4dArray_t const* _this, gf_Vec4d_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4dArray_size(gf_Vec4dArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4dArray_op_index(gf_Vec4dArray_t* _this, size_t index, gf_Vec4d_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4dArray_op_index_const(gf_Vec4dArray_t const* _this, size_t index, gf_Vec4d_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4dArray_new(gf_Vec4dArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec4d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4dArray_dtor(gf_Vec4dArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec2iArray_data(gf_Vec2iArray_t* _this, gf_Vec2i_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2iArray_data_const(gf_Vec2iArray_t const* _this, gf_Vec2i_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2iArray_size(gf_Vec2iArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2iArray_op_index(gf_Vec2iArray_t* _this, size_t index, gf_Vec2i_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2iArray_op_index_const(gf_Vec2iArray_t const* _this, size_t index, gf_Vec2i_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2iArray_new(gf_Vec2iArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec2i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec2iArray_dtor(gf_Vec2iArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec3iArray_data(gf_Vec3iArray_t* _this, gf_Vec3i_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3iArray_data_const(gf_Vec3iArray_t const* _this, gf_Vec3i_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3iArray_size(gf_Vec3iArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3iArray_op_index(gf_Vec3iArray_t* _this, size_t index, gf_Vec3i_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3iArray_op_index_const(gf_Vec3iArray_t const* _this, size_t index, gf_Vec3i_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3iArray_new(gf_Vec3iArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec3i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec3iArray_dtor(gf_Vec3iArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Vec4iArray_data(gf_Vec4iArray_t* _this, gf_Vec4i_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4iArray_data_const(gf_Vec4iArray_t const* _this, gf_Vec4i_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4iArray_size(gf_Vec4iArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4iArray_op_index(gf_Vec4iArray_t* _this, size_t index, gf_Vec4i_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4iArray_op_index_const(gf_Vec4iArray_t const* _this, size_t index, gf_Vec4i_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4iArray_new(gf_Vec4iArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec4i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Vec4iArray_dtor(gf_Vec4iArray_t* _this) {
    delete _this;
    return 0;
}

int gf_BBox3d_Set(gf_BBox3d_t* _this, gf_Range3d_t const* box, gf_Matrix4d_t const* matrix) {
    try {
        _this->Set(*box, *matrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_SetMatrix(gf_BBox3d_t* _this, gf_Matrix4d_t const* matrix) {
    try {
        _this->SetMatrix(*matrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_SetRange(gf_BBox3d_t* _this, gf_Range3d_t const* box) {
    try {
        _this->SetRange(*box);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_GetRange(gf_BBox3d_t const* _this, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->GetRange();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_GetBox(gf_BBox3d_t const* _this, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->GetBox();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_GetMatrix(gf_BBox3d_t const* _this, gf_Matrix4d_t const** _result) {
    try {
        *_result = &_this->GetMatrix();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_GetInverseMatrix(gf_BBox3d_t const* _this, gf_Matrix4d_t const** _result) {
    try {
        *_result = &_this->GetInverseMatrix();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_SetHasZeroAreaPrimitives(gf_BBox3d_t* _this, bool hasThem) {
    try {
        _this->SetHasZeroAreaPrimitives(hasThem);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_HasZeroAreaPrimitives(gf_BBox3d_t const* _this, bool* _result) {
    try {
        *_result = _this->HasZeroAreaPrimitives();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_GetVolume(gf_BBox3d_t const* _this, double* _result) {
    try {
        *_result = _this->GetVolume();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_Transform(gf_BBox3d_t* _this, gf_Matrix4d_t const* matrix) {
    try {
        _this->Transform(*matrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_ComputeAlignedRange(gf_BBox3d_t const* _this, gf_Range3d_t* _result) {
    try {
        *_result = _this->ComputeAlignedRange();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_ComputeAlignedBox(gf_BBox3d_t const* _this, gf_Range3d_t* _result) {
    try {
        *_result = _this->ComputeAlignedBox();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_Combine(gf_BBox3d_t const* b1, gf_BBox3d_t const* b2, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(pxr::GfBBox3d::Combine(*b1, *b2));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_ComputeCentroid(gf_BBox3d_t const* _this, gf_Vec3d_t* _result) {
    try {
        *_result = _this->ComputeCentroid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_op_eq(gf_BBox3d_t const* _this, gf_BBox3d_t const* b, bool* _result) {
    try {
        *_result = _this->operator==(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_new(gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_from_range(gf_Range3d_t const* box, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(*box);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_from_range_and_transform(gf_Range3d_t const* box, gf_Matrix4d_t* matrix, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(*box, *matrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_BBox3d_dtor(gf_BBox3d_t* _this) {
    delete _this;
    return 0;
}

int gf_Camera_SetTransform(gf_Camera_t* _this, gf_Matrix4d_t const* val) {
    try {
        _this->SetTransform(*val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetClippingRange(gf_Camera_t* _this, gf_Range1f_t const* val) {
    try {
        _this->SetClippingRange(*val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetClippingPlanes(gf_Camera_t* _this, gf_Vec4fVector_t const* val) {
    try {
        _this->SetClippingPlanes(*val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetFStop(gf_Camera_t* _this, float const val) {
    try {
        _this->SetFStop(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetFocusDistance(gf_Camera_t* _this, float const val) {
    try {
        _this->SetFocusDistance(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetFocalLength(gf_Camera_t* _this, float const val) {
    try {
        _this->SetFocalLength(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetHorizontalAperture(gf_Camera_t* _this, float const val) {
    try {
        _this->SetHorizontalAperture(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetHorizontalApertureOffset(gf_Camera_t* _this, float const val) {
    try {
        _this->SetHorizontalApertureOffset(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetVerticalAperture(gf_Camera_t* _this, float const val) {
    try {
        _this->SetVerticalAperture(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetVerticalApertureOffset(gf_Camera_t* _this, float const val) {
    try {
        _this->SetVerticalApertureOffset(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetTransform(gf_Camera_t const* _this, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetTransform();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetClippingRange(gf_Camera_t const* _this, gf_Range1f_t* _result) {
    try {
        *_result = _this->GetClippingRange();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetClippingPlanes(gf_Camera_t const* _this, gf_Vec4fVector_t const** _result) {
    try {
        *_result = &_this->GetClippingPlanes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetFStop(gf_Camera_t const* _this, float* _result) {
    try {
        *_result = _this->GetFStop();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetFocusDistance(gf_Camera_t const* _this, float* _result) {
    try {
        *_result = _this->GetFocusDistance();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetFocalLength(gf_Camera_t const* _this, float* _result) {
    try {
        *_result = _this->GetFocalLength();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetHorizontalAperture(gf_Camera_t const* _this, float* _result) {
    try {
        *_result = _this->GetHorizontalAperture();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetHorizontalApertureOffset(gf_Camera_t const* _this, float* _result) {
    try {
        *_result = _this->GetHorizontalApertureOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetVerticalAperture(gf_Camera_t const* _this, float* _result) {
    try {
        *_result = _this->GetVerticalAperture();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetVerticalApertureOffset(gf_Camera_t const* _this, float* _result) {
    try {
        *_result = _this->GetVerticalApertureOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetFieldOfView(gf_Camera_t const* _this, unsigned int direction, float* _result) {
    try {
        *_result = _this->GetFieldOfView(static_cast<pxr::GfCamera::FOVDirection>(direction));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_GetFrustum(gf_Camera_t const* _this, gf_Frustum_t** _result) {
    try {
        *_result = new pxr::GfFrustum(_this->GetFrustum());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetPerspectiveFromAspectRatioAndFieldOfView(gf_Camera_t* _this, float aspectRatio, float fieldOfView, unsigned int direction, float horizontalAperture) {
    try {
        _this->SetPerspectiveFromAspectRatioAndFieldOfView(aspectRatio, fieldOfView, static_cast<pxr::GfCamera::FOVDirection>(direction), horizontalAperture);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetOrthographicFromAspectRatioAndSize(gf_Camera_t* _this, float aspectRatio, float orthographicSize, unsigned int direction) {
    try {
        _this->SetOrthographicFromAspectRatioAndSize(aspectRatio, orthographicSize, static_cast<pxr::GfCamera::FOVDirection>(direction));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_SetFromViewAndProjectionMatrix(gf_Camera_t* _this, gf_Matrix4d_t const* viewMatrix, gf_Matrix4d_t const* projMatix, float const focalLength) {
    try {
        _this->SetFromViewAndProjectionMatrix(*viewMatrix, *projMatix, focalLength);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_new(gf_Matrix4d_t const* transform, unsigned int projection, float horizontalAperture, float verticalAperture, float horizontalApertureOffset, float verticalApertureOffset, float focalLength, gf_Range1f_t clippingRange, gf_Vec4fVector_t const* clippingPlanes, float fStop, float focusDistance, gf_Camera_t** _result) {
    try {
        *_result = new pxr::GfCamera(*transform, static_cast<pxr::GfCamera::Projection>(projection), horizontalAperture, verticalAperture, horizontalApertureOffset, verticalApertureOffset, focalLength, clippingRange, *clippingPlanes, fStop, focusDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Camera_dtor(gf_Camera_t* _this) {
    delete _this;
    return 0;
}

int gf_DualQuatd_SetReal(gf_DualQuatd_t* _this, gf_Quatd_t const* real) {
    try {
        _this->SetReal(*real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_SetDual(gf_DualQuatd_t* _this, gf_Quatd_t const* dual) {
    try {
        _this->SetDual(*dual);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetReal(gf_DualQuatd_t const* _this, gf_Quatd_t const** _result) {
    try {
        *_result = &_this->GetReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetDual(gf_DualQuatd_t const* _this, gf_Quatd_t const** _result) {
    try {
        *_result = &_this->GetDual();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetZero(gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(pxr::GfDualQuatd::GetZero());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetIdentity(gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(pxr::GfDualQuatd::GetIdentity());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetLength(gf_DualQuatd_t const* _this, std_DoublePair_t** _result) {
    try {
        *_result = new std::pair<double, double>(_this->GetLength());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetNormalized(gf_DualQuatd_t const* _this, double eps, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(_this->GetNormalized(eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_Normalize(gf_DualQuatd_t* _this, double eps, std_DoublePair_t** _result) {
    try {
        *_result = new std::pair<double, double>(_this->Normalize(eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetConjugate(gf_DualQuatd_t const* _this, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(_this->GetConjugate());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetInverse(gf_DualQuatd_t const* _this, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(_this->GetInverse());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_SetTranslation(gf_DualQuatd_t* _this, gf_Vec3d_t const* translation) {
    try {
        _this->SetTranslation(*translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_GetTranslation(gf_DualQuatd_t const* _this, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetTranslation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_op_eq(gf_DualQuatd_t const* _this, gf_DualQuatd_t const* dq, bool* _result) {
    try {
        *_result = _this->operator==(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_op_neq(gf_DualQuatd_t const* _this, gf_DualQuatd_t const* dq, bool* _result) {
    try {
        *_result = _this->operator!=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_op_add_assign(gf_DualQuatd_t* _this, gf_DualQuatd_t const* dq, gf_DualQuatd_t** _result) {
    try {
        *_result = &_this->operator+=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_op_sub_assign(gf_DualQuatd_t* _this, gf_DualQuatd_t const* dq, gf_DualQuatd_t** _result) {
    try {
        *_result = &_this->operator-=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_op_div_assign(gf_DualQuatd_t* _this, double s, gf_DualQuatd_t** _result) {
    try {
        *_result = &_this->operator/=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_op_mul_assign_quatd(gf_DualQuatd_t* _this, gf_DualQuatd_t const* dq, gf_DualQuatd_t** _result) {
    try {
        *_result = &_this->operator*=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_op_mul_assign_double(gf_DualQuatd_t* _this, double s, gf_DualQuatd_t** _result) {
    try {
        *_result = &_this->operator*=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_Transform(gf_DualQuatd_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->Transform(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_default(gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_from_double(double realVal, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(realVal);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_from_real(gf_Quatd_t const* real, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(*real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_ctor(gf_Quatd_t const* real, gf_Quatd_t const* dual, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(*real, *dual);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_from_rotation_translation(gf_Quatd_t const* rotation, gf_Vec3d_t const* translation, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(*rotation, *translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_from_dualquatf(gf_DualQuatf_t const* other, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_from_dualquath(gf_DualQuath_t const* other, gf_DualQuatd_t** _result) {
    try {
        *_result = new pxr::GfDualQuatd(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatd_dtor(gf_DualQuatd_t* _this) {
    delete _this;
    return 0;
}

int gf_DualQuatf_SetReal(gf_DualQuatf_t* _this, gf_Quatf_t const* real) {
    try {
        _this->SetReal(*real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_SetDual(gf_DualQuatf_t* _this, gf_Quatf_t const* dual) {
    try {
        _this->SetDual(*dual);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetReal(gf_DualQuatf_t const* _this, gf_Quatf_t const** _result) {
    try {
        *_result = &_this->GetReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetDual(gf_DualQuatf_t const* _this, gf_Quatf_t const** _result) {
    try {
        *_result = &_this->GetDual();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetZero(gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(pxr::GfDualQuatf::GetZero());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetIdentity(gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(pxr::GfDualQuatf::GetIdentity());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetLength(gf_DualQuatf_t const* _this, std_FloatPair_t** _result) {
    try {
        *_result = new std::pair<float, float>(_this->GetLength());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetNormalized(gf_DualQuatf_t const* _this, float eps, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(_this->GetNormalized(eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_Normalize(gf_DualQuatf_t* _this, float eps, std_FloatPair_t** _result) {
    try {
        *_result = new std::pair<float, float>(_this->Normalize(eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetConjugate(gf_DualQuatf_t const* _this, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(_this->GetConjugate());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetInverse(gf_DualQuatf_t const* _this, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(_this->GetInverse());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_SetTranslation(gf_DualQuatf_t* _this, gf_Vec3f_t const* translation) {
    try {
        _this->SetTranslation(*translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_GetTranslation(gf_DualQuatf_t const* _this, gf_Vec3f_t* _result) {
    try {
        *_result = _this->GetTranslation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_op_eq(gf_DualQuatf_t const* _this, gf_DualQuatf_t const* dq, bool* _result) {
    try {
        *_result = _this->operator==(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_op_neq(gf_DualQuatf_t const* _this, gf_DualQuatf_t const* dq, bool* _result) {
    try {
        *_result = _this->operator!=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_op_add_assign(gf_DualQuatf_t* _this, gf_DualQuatf_t const* dq, gf_DualQuatf_t** _result) {
    try {
        *_result = &_this->operator+=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_op_sub_assign(gf_DualQuatf_t* _this, gf_DualQuatf_t const* dq, gf_DualQuatf_t** _result) {
    try {
        *_result = &_this->operator-=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_op_mul_assign_dualquatf(gf_DualQuatf_t* _this, gf_DualQuatf_t const* dq, gf_DualQuatf_t** _result) {
    try {
        *_result = &_this->operator*=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_op_mul_assign_float(gf_DualQuatf_t* _this, float s, gf_DualQuatf_t** _result) {
    try {
        *_result = &_this->operator*=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_op_div_assign(gf_DualQuatf_t* _this, float s, gf_DualQuatf_t** _result) {
    try {
        *_result = &_this->operator/=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_Transform(gf_DualQuatf_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->Transform(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_default(gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_from_float(float realVal, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(realVal);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_from_real(gf_Quatf_t const* real, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(*real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_ctor(gf_Quatf_t const* real, gf_Quatf_t const* dual, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(*real, *dual);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_from_rotation_translation(gf_Quatf_t const* rotation, gf_Vec3f_t const* translation, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(*rotation, *translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_from_dualquatd(gf_DualQuatd_t const* other, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_from_dualquath(gf_DualQuath_t const* other, gf_DualQuatf_t** _result) {
    try {
        *_result = new pxr::GfDualQuatf(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuatf_dtor(gf_DualQuatf_t* _this) {
    delete _this;
    return 0;
}

int gf_DualQuath_SetReal(gf_DualQuath_t* _this, gf_Quath_t const* real) {
    try {
        _this->SetReal(*real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_SetDual(gf_DualQuath_t* _this, gf_Quath_t const* dual) {
    try {
        _this->SetDual(*dual);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetReal(gf_DualQuath_t const* _this, gf_Quath_t const** _result) {
    try {
        *_result = &_this->GetReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetDual(gf_DualQuath_t const* _this, gf_Quath_t const** _result) {
    try {
        *_result = &_this->GetDual();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetZero(gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(pxr::GfDualQuath::GetZero());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetIdentity(gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(pxr::GfDualQuath::GetIdentity());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetLength(gf_DualQuath_t const* _this, gf_HalfPair_t** _result) {
    try {
        *_result = new std::pair<pxr::GfHalf, pxr::GfHalf>(_this->GetLength());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetNormalized(gf_DualQuath_t const* _this, gf_Half_t* eps, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(_this->GetNormalized(*eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_Normalize(gf_DualQuath_t* _this, gf_Half_t* eps, gf_HalfPair_t** _result) {
    try {
        *_result = new std::pair<pxr::GfHalf, pxr::GfHalf>(_this->Normalize(*eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetConjugate(gf_DualQuath_t const* _this, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(_this->GetConjugate());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetInverse(gf_DualQuath_t const* _this, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(_this->GetInverse());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_SetTranslation(gf_DualQuath_t* _this, gf_Vec3h_t const* translation) {
    try {
        _this->SetTranslation(*translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_GetTranslation(gf_DualQuath_t const* _this, gf_Vec3h_t* _result) {
    try {
        *_result = _this->GetTranslation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_op_eq(gf_DualQuath_t const* _this, gf_DualQuath_t const* dq, bool* _result) {
    try {
        *_result = _this->operator==(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_op_neq(gf_DualQuath_t const* _this, gf_DualQuath_t const* dq, bool* _result) {
    try {
        *_result = _this->operator!=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_op_add_assign(gf_DualQuath_t* _this, gf_DualQuath_t const* dq, gf_DualQuath_t** _result) {
    try {
        *_result = &_this->operator+=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_op_sub_assign(gf_DualQuath_t* _this, gf_DualQuath_t const* dq, gf_DualQuath_t** _result) {
    try {
        *_result = &_this->operator-=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_op_mul_assign_dualquath(gf_DualQuath_t* _this, gf_DualQuath_t const* dq, gf_DualQuath_t** _result) {
    try {
        *_result = &_this->operator*=(*dq);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_op_mul_assign_half(gf_DualQuath_t* _this, gf_Half_t* s, gf_DualQuath_t** _result) {
    try {
        *_result = &_this->operator*=(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_op_div_assign(gf_DualQuath_t* _this, gf_Half_t* s, gf_DualQuath_t** _result) {
    try {
        *_result = &_this->operator/=(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_Transform(gf_DualQuath_t const* _this, gf_Vec3h_t const* vec, gf_Vec3h_t* _result) {
    try {
        *_result = _this->Transform(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_default(gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_from_half(gf_Half_t* realVal, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(*realVal);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_from_real(gf_Quath_t const* real, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(*real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_ctor(gf_Quath_t const* real, gf_Quath_t const* dual, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(*real, *dual);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_from_rotation_translation(gf_Quath_t const* rotation, gf_Vec3h_t const* translation, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(*rotation, *translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_from_dualquatd(gf_DualQuatd_t const* other, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_from_dualquatf(gf_DualQuatf_t const* other, gf_DualQuath_t** _result) {
    try {
        *_result = new pxr::GfDualQuath(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_DualQuath_dtor(gf_DualQuath_t* _this) {
    delete _this;
    return 0;
}

int gf_Frustum_SetPerspective(gf_Frustum_t* _this, double fieldOfView, bool isFovVertical, double aspectRatio, double nearDistance, double farDistance) {
    try {
        _this->SetPerspective(fieldOfView, isFovVertical, aspectRatio, nearDistance, farDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetPerspective(gf_Frustum_t const* _this, bool isFovVertical, double* fieldOfView, double* aspectRatio, double* nearDistance, double* farDistance, bool* _result) {
    try {
        *_result = _this->GetPerspective(isFovVertical, fieldOfView, aspectRatio, nearDistance, farDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetFOV(gf_Frustum_t* _this, bool isFovVertical, double* _result) {
    try {
        *_result = _this->GetFOV(isFovVertical);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetOrthographic(gf_Frustum_t const* _this, double* left, double* right, double* bottom, double* top, double* nearPlane, double* farPlane, bool* _result) {
    try {
        *_result = _this->GetOrthographic(left, right, bottom, top, nearPlane, farPlane);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetOrthographic(gf_Frustum_t* _this, double left, double right, double bottom, double top, double nearPlane, double farPlane) {
    try {
        _this->SetOrthographic(left, right, bottom, top, nearPlane, farPlane);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_FitToSphere(gf_Frustum_t* _this, gf_Vec3d_t const* center, double radius, double slack) {
    try {
        _this->FitToSphere(*center, radius, slack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_Transform(gf_Frustum_t* _this, gf_Matrix4d_t const* matrix, gf_Frustum_t** _result) {
    try {
        *_result = &_this->Transform(*matrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeViewDirection(gf_Frustum_t const* _this, gf_Vec3d_t* _result) {
    try {
        *_result = _this->ComputeViewDirection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeViewFrame(gf_Frustum_t const* _this, gf_Vec3d_t* side, gf_Vec3d_t* up, gf_Vec3d_t* view) {
    try {
        _this->ComputeViewFrame(side, up, view);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeLookAtPoint(gf_Frustum_t const* _this, gf_Vec3d_t* _result) {
    try {
        *_result = _this->ComputeLookAtPoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeViewMatrix(gf_Frustum_t const* _this, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeViewMatrix();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeViewInverse(gf_Frustum_t const* _this, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeViewInverse();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeProjectionMatrix(gf_Frustum_t const* _this, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeProjectionMatrix();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeAspectRatio(gf_Frustum_t const* _this, double* _result) {
    try {
        *_result = _this->ComputeAspectRatio();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeCorners(gf_Frustum_t const* _this, gf_Vec3dVector_t** _result) {
    try {
        *_result = new std::vector<pxr::GfVec3d>(_this->ComputeCorners());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeCornersAtDistance(gf_Frustum_t const* _this, double d, gf_Vec3dVector_t** _result) {
    try {
        *_result = new std::vector<pxr::GfVec3d>(_this->ComputeCornersAtDistance(d));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeNarrowedFrustum(gf_Frustum_t const* _this, gf_Vec2d_t const* windowPos, gf_Vec2d_t const* size, gf_Frustum_t** _result) {
    try {
        *_result = new pxr::GfFrustum(_this->ComputeNarrowedFrustum(*windowPos, *size));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeRay_to_point(gf_Frustum_t const* _this, gf_Vec3d_t const* worldSpacePos, gf_Ray_t* _result) {
    try {
        *_result = _this->ComputeRay(*worldSpacePos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputeRay_from_screen(gf_Frustum_t const* _this, gf_Vec2d_t const* windowPos, gf_Ray_t* _result) {
    try {
        *_result = _this->ComputeRay(*windowPos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputePickRay_to_point(gf_Frustum_t const* _this, gf_Vec3d_t const* worldSpacePos, gf_Ray_t* _result) {
    try {
        *_result = _this->ComputePickRay(*worldSpacePos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_ComputePickRay_from_screen(gf_Frustum_t const* _this, gf_Vec2d_t const* windowPos, gf_Ray_t* _result) {
    try {
        *_result = _this->ComputePickRay(*windowPos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetPosition(gf_Frustum_t* _this, gf_Vec3d_t const* position) {
    try {
        _this->SetPosition(*position);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetPosition(gf_Frustum_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetPosition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetRotation(gf_Frustum_t const* _this, gf_Rotation_t const** _result) {
    try {
        *_result = &_this->GetRotation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetRotation(gf_Frustum_t* _this, gf_Rotation_t const* rotation) {
    try {
        _this->SetRotation(*rotation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetPositionAndRotationFromMatrix(gf_Frustum_t* _this, gf_Matrix4d_t const* camToWorldXf) {
    try {
        _this->SetPositionAndRotationFromMatrix(*camToWorldXf);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetWindow(gf_Frustum_t* _this, gf_Range2d_t const* window) {
    try {
        _this->SetWindow(*window);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetWindow(gf_Frustum_t const* _this, gf_Range2d_t const** _result) {
    try {
        *_result = &_this->GetWindow();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetNearFar(gf_Frustum_t* _this, gf_Range1d_t const* nearFar) {
    try {
        _this->SetNearFar(*nearFar);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetNearFar(gf_Frustum_t const* _this, gf_Range1d_t const** _result) {
    try {
        *_result = &_this->GetNearFar();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetViewDistance(gf_Frustum_t* _this, double viewDistance) {
    try {
        _this->SetViewDistance(viewDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetViewDistance(gf_Frustum_t const* _this, double* _result) {
    try {
        *_result = _this->GetViewDistance();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_SetProjectionType(gf_Frustum_t* _this, unsigned int projectionType) {
    try {
        _this->SetProjectionType(static_cast<pxr::GfFrustum::ProjectionType>(projectionType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetProjectionType(gf_Frustum_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetProjectionType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_GetReferencePlaneDepth(double* _result) {
    try {
        *_result = pxr::GfFrustum::GetReferencePlaneDepth();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_Intersects_box(gf_Frustum_t const* _this, gf_BBox3d_t const* bbox, bool* _result) {
    try {
        *_result = _this->Intersects(*bbox);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_Intersects_point(gf_Frustum_t const* _this, gf_Vec3d_t const* point, bool* _result) {
    try {
        *_result = _this->Intersects(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_Intersects_line(gf_Frustum_t const* _this, gf_Vec3d_t const* p0, gf_Vec3d_t const* p1, bool* _result) {
    try {
        *_result = _this->Intersects(*p0, *p1);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_Intersects_triangle(gf_Frustum_t const* _this, gf_Vec3d_t const* p0, gf_Vec3d_t const* p1, gf_Vec3d_t const* p2, bool* _result) {
    try {
        *_result = _this->Intersects(*p0, *p1, *p2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_IntersectsViewVolume(gf_BBox3d_t const* bbox, gf_Matrix4d_t const* vpMat, bool* _result) {
    try {
        *_result = pxr::GfFrustum::IntersectsViewVolume(*bbox, *vpMat);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_new(gf_Frustum_t** _result) {
    try {
        *_result = new pxr::GfFrustum();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_from_position_and_rotation(gf_Vec3f_t const* position, gf_Rotation_t const* rotation, gf_Range2d_t const* window, gf_Range1d_t const* nearFar, unsigned int projectionType, double viewDistance, gf_Frustum_t** _result) {
    try {
        *_result = new pxr::GfFrustum(*position, *rotation, *window, *nearFar, static_cast<pxr::GfFrustum::ProjectionType>(projectionType), viewDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_from_transform(gf_Matrix4d_t const* camToWorldXF, gf_Range2d_t const* window, gf_Range1d_t const* nearFar, unsigned int projectionType, double viewDistance, gf_Frustum_t** _result) {
    try {
        *_result = new pxr::GfFrustum(*camToWorldXF, *window, *nearFar, static_cast<pxr::GfFrustum::ProjectionType>(projectionType), viewDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Frustum_dtor(gf_Frustum_t* _this) {
    delete _this;
    return 0;
}

int gf_Half_dtor(gf_Half_t* _this) {
    delete _this;
    return 0;
}

int gf_HalfPair_dtor(gf_HalfPair_t* _this) {
    delete _this;
    return 0;
}

int gf_Interval_op_eq(gf_Interval_t const* _this, gf_Interval_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_neq(gf_Interval_t const* _this, gf_Interval_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_lt(gf_Interval_t const* _this, gf_Interval_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_Hash(gf_Interval_t const* _this, size_t* _result) {
    try {
        *_result = _this->Hash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_GetMin(gf_Interval_t const* _this, double* _result) {
    try {
        *_result = _this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_GetMax(gf_Interval_t const* _this, double* _result) {
    try {
        *_result = _this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_SetMin_00(gf_Interval_t* _this, double v) {
    try {
        _this->SetMin(v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_SetMin_01(gf_Interval_t* _this, double v, bool minClosed) {
    try {
        _this->SetMin(v, minClosed);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_SetMax_00(gf_Interval_t* _this, double v) {
    try {
        _this->SetMax(v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_SetMax_01(gf_Interval_t* _this, double v, bool maxClosed) {
    try {
        _this->SetMax(v, maxClosed);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsMinClosed(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMinClosed();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsMaxClosed(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMaxClosed();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsMinOpen(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMinOpen();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsMaxOpen(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMaxOpen();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsMaxFinite(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMaxFinite();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsMinFinite(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMinFinite();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsFinite(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsFinite();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_IsEmpty(gf_Interval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_GetSize(gf_Interval_t const* _this, double* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_Size(gf_Interval_t const* _this, double* _result) {
    try {
        *_result = _this->Size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_Contains_00(gf_Interval_t const* _this, double d, bool* _result) {
    try {
        *_result = _this->Contains(d);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_Contains_01(gf_Interval_t const* _this, gf_Interval_t const* i, bool* _result) {
    try {
        *_result = _this->Contains(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_In(gf_Interval_t const* _this, double d, bool* _result) {
    try {
        *_result = _this->In(d);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_Intersects(gf_Interval_t const* _this, gf_Interval_t const* i, bool* _result) {
    try {
        *_result = _this->Intersects(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_bit_assign(gf_Interval_t* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = &_this->operator&=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_bitor_assign(gf_Interval_t* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = &_this->operator|=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_add_assign(gf_Interval_t* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = &_this->operator+=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_sub_assign(gf_Interval_t* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = &_this->operator-=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_neg(gf_Interval_t const* _this, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(_this->operator-());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_sub(gf_Interval_t const* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(_this->operator-(*rhs));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_mul_assign(gf_Interval_t* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = &_this->operator*=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_gt(gf_Interval_t* _this, gf_Interval_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_lte(gf_Interval_t* _this, gf_Interval_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_gte(gf_Interval_t* _this, gf_Interval_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_bitor(gf_Interval_t const* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(_this->operator|(*rhs));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_bitand(gf_Interval_t const* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(_this->operator&(*rhs));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_add(gf_Interval_t const* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(_this->operator+(*rhs));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_op_mul(gf_Interval_t const* _this, gf_Interval_t const* rhs, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(_this->operator*(*rhs));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_GetFullInterval(gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(pxr::GfInterval::GetFullInterval());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_default(gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_ctor_01(double val, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(val);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_ctor_02(double min, double max, bool minClosed, bool maxClosed, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(min, max, minClosed, maxClosed);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Interval_dtor(gf_Interval_t* _this) {
    delete _this;
    return 0;
}

int gf_IntervalVector_data(gf_IntervalVector_t* _this, gf_Interval_t** _result) {
    *_result = _this->data();
    return 0;
}

int gf_IntervalVector_data_const(gf_IntervalVector_t const* _this, gf_Interval_t const** _result) {
    *_result = _this->data();
    return 0;
}

int gf_IntervalVector_empty(gf_IntervalVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int gf_IntervalVector_size(gf_IntervalVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int gf_IntervalVector_max_size(gf_IntervalVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int gf_IntervalVector_capacity(gf_IntervalVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int gf_IntervalVector_clear(gf_IntervalVector_t* _this) {
    _this->clear();
    return 0;
}

int gf_IntervalVector_pop_back(gf_IntervalVector_t* _this) {
    _this->pop_back();
    return 0;
}

int gf_IntervalVector_op_index(gf_IntervalVector_t const* _this, size_t __n, gf_Interval_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int gf_IntervalVector_default(gf_IntervalVector_t** _result) {
    *_result = new std::vector<pxr::GfInterval>();
    return 0;
}

int gf_IntervalVector_dtor(gf_IntervalVector_t* _this) {
    delete _this;
    return 0;
}

int gf_Line_Set(gf_Line_t* _this, gf_Vec3d_t const* p0, gf_Vec3d_t const* dir, double* _result) {
    try {
        *_result = _this->Set(*p0, *dir);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line_GetPoint(gf_Line_t const* _this, double t, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetPoint(t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line_GetDirection(gf_Line_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetDirection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line_FindClosestPoint(gf_Line_t const* _this, gf_Vec3d_t const* point, double* t, gf_Vec3d_t* _result) {
    try {
        *_result = _this->FindClosestPoint(*point, t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line_op_eq(gf_Line_t const* _this, gf_Line_t const* l, bool* _result) {
    try {
        *_result = _this->operator==(*l);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line_default(gf_Line_t** _result) {
    try {
        *_result = new pxr::GfLine();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line_ctor_01(gf_Vec3d_t const* p0, gf_Vec3d_t const* dir, gf_Line_t** _result) {
    try {
        *_result = new pxr::GfLine(*p0, *dir);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line_dtor(gf_Line_t* _this) {
    delete _this;
    return 0;
}

int gf_Line2d_Set(gf_Line2d_t* _this, gf_Vec2d_t const* p0, gf_Vec2d_t const* dir, double* _result) {
    try {
        *_result = _this->Set(*p0, *dir);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line2d_GetPoint(gf_Line2d_t const* _this, double t, gf_Vec2d_t* _result) {
    try {
        *_result = _this->GetPoint(t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line2d_GetDirection(gf_Line2d_t const* _this, gf_Vec2d_t const** _result) {
    try {
        *_result = &_this->GetDirection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line2d_FindClosestPoint(gf_Line2d_t const* _this, gf_Vec2d_t const* point, double* t, gf_Vec2d_t* _result) {
    try {
        *_result = _this->FindClosestPoint(*point, t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line2d_op_eq(gf_Line2d_t const* _this, gf_Line2d_t const* l, bool* _result) {
    try {
        *_result = _this->operator==(*l);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line2d_default(gf_Line2d_t** _result) {
    try {
        *_result = new pxr::GfLine2d();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line2d_ctor_01(gf_Vec2d_t const* p0, gf_Vec2d_t const* dir, gf_Line2d_t** _result) {
    try {
        *_result = new pxr::GfLine2d(*p0, *dir);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Line2d_dtor(gf_Line2d_t* _this) {
    delete _this;
    return 0;
}

int gf_LineSeg_GetPoint(gf_LineSeg_t const* _this, double t, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetPoint(t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg_GetDirection(gf_LineSeg_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetDirection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg_GetLength(gf_LineSeg_t const* _this, double* _result) {
    try {
        *_result = _this->GetLength();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg_FindClosestPoint(gf_LineSeg_t const* _this, gf_Vec3d_t const* point, double* t, gf_Vec3d_t* _result) {
    try {
        *_result = _this->FindClosestPoint(*point, t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg_op_eq(gf_LineSeg_t const* _this, gf_LineSeg_t const* l, bool* _result) {
    try {
        *_result = _this->operator==(*l);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg_default(gf_LineSeg_t** _result) {
    try {
        *_result = new pxr::GfLineSeg();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg_ctor_01(gf_Vec3d_t const* p0, gf_Vec3d_t const* p1, gf_LineSeg_t** _result) {
    try {
        *_result = new pxr::GfLineSeg(*p0, *p1);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg_dtor(gf_LineSeg_t* _this) {
    delete _this;
    return 0;
}

int gf_LineSeg2d_GetPoint(gf_LineSeg2d_t const* _this, double t, gf_Vec2d_t* _result) {
    try {
        *_result = _this->GetPoint(t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_GetDirection(gf_LineSeg2d_t const* _this, gf_Vec2d_t const** _result) {
    try {
        *_result = &_this->GetDirection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_GetLength(gf_LineSeg2d_t const* _this, double* _result) {
    try {
        *_result = _this->GetLength();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_FindClosestPoint(gf_LineSeg2d_t const* _this, gf_Vec2d_t const* point, double* t, gf_Vec2d_t* _result) {
    try {
        *_result = _this->FindClosestPoint(*point, t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_op_eq(gf_LineSeg2d_t const* _this, gf_LineSeg2d_t const* l, bool* _result) {
    try {
        *_result = _this->operator==(*l);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_op_neq(gf_LineSeg2d_t const* _this, gf_LineSeg2d_t const* r, bool* _result) {
    try {
        *_result = _this->operator!=(*r);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_default(gf_LineSeg2d_t** _result) {
    try {
        *_result = new pxr::GfLineSeg2d();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_ctor_01(gf_Vec2d_t const* p0, gf_Vec2d_t const* p1, gf_LineSeg2d_t** _result) {
    try {
        *_result = new pxr::GfLineSeg2d(*p0, *p1);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_LineSeg2d_dtor(gf_LineSeg2d_t* _this) {
    delete _this;
    return 0;
}

int gf_Matrix2d_SetRow(gf_Matrix2d_t* _this, int i, gf_Vec2d_t const* v) {
    try {
        _this->SetRow(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_SetColumn(gf_Matrix2d_t* _this, int i, gf_Vec2d_t const* v) {
    try {
        _this->SetColumn(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_GetRow(gf_Matrix2d_t const* _this, int i, gf_Vec2d_t* _result) {
    try {
        *_result = _this->GetRow(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_GetColumn(gf_Matrix2d_t const* _this, int i, gf_Vec2d_t* _result) {
    try {
        *_result = _this->GetColumn(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_Set_00(gf_Matrix2d_t* _this, double m00, double m01, double m10, double m11, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->Set(m00, m01, m10, m11);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_Set_01(gf_Matrix2d_t* _this, double const (*m)[2], gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->Set(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_SetIdentity(gf_Matrix2d_t* _this, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_SetZero(gf_Matrix2d_t* _this, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->SetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_SetDiagonal_00(gf_Matrix2d_t* _this, double s, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->SetDiagonal(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_SetDiagonal_01(gf_Matrix2d_t* _this, gf_Vec2d_t const* param00, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->SetDiagonal(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_Get(gf_Matrix2d_t const* _this, double (*m)[2], double** _result) {
    try {
        *_result = _this->Get(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_data_00(gf_Matrix2d_t* _this, double** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_data_01(gf_Matrix2d_t const* _this, double const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_GetArray_00(gf_Matrix2d_t* _this, double** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_GetArray_01(gf_Matrix2d_t const* _this, double const** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_index_00(gf_Matrix2d_t* _this, int i, double** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_index_01(gf_Matrix2d_t const* _this, int i, double const** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_eq_00(gf_Matrix2d_t const* _this, gf_Matrix2d_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_eq_01(gf_Matrix2d_t const* _this, gf_Matrix2f_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_neq_00(gf_Matrix2d_t const* _this, gf_Matrix2d_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_neq_01(gf_Matrix2d_t const* _this, gf_Matrix2f_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_GetTranspose(gf_Matrix2d_t const* _this, gf_Matrix2d_t* _result) {
    try {
        *_result = _this->GetTranspose();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_GetInverse(gf_Matrix2d_t const* _this, double* det, double eps, gf_Matrix2d_t* _result) {
    try {
        *_result = _this->GetInverse(det, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_GetDeterminant(gf_Matrix2d_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_mul_assign_00(gf_Matrix2d_t* _this, gf_Matrix2d_t const* m, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->operator*=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_mul_assign_01(gf_Matrix2d_t* _this, double param00, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->operator*=(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_add_assign(gf_Matrix2d_t* _this, gf_Matrix2d_t const* m, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->operator+=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_op_sub_assign(gf_Matrix2d_t* _this, gf_Matrix2d_t const* m, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->operator-=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_default(gf_Matrix2d_t* _result) {
    new (_result) pxr::GfMatrix2d();
    return 0;
}

int gf_Matrix2d_ctor_01(double m00, double m01, double m10, double m11, gf_Matrix2d_t* _result) {
    try {
        new (_result) pxr::GfMatrix2d(m00, m01, m10, m11);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_ctor_02(double (*m)[2], gf_Matrix2d_t* _result) {
    try {
        new (_result) pxr::GfMatrix2d(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_ctor_03(double s, gf_Matrix2d_t* _result) {
    try {
        new (_result) pxr::GfMatrix2d(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_ctor_04(int s, gf_Matrix2d_t* _result) {
    try {
        new (_result) pxr::GfMatrix2d(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2d_ctor_05(gf_Vec2d_t const* v, gf_Matrix2d_t* _result) {
    try {
        new (_result) pxr::GfMatrix2d(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2dArray_data(gf_Matrix2dArray_t* _this, gf_Matrix2d_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2dArray_data_const(gf_Matrix2dArray_t const* _this, gf_Matrix2d_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2dArray_size(gf_Matrix2dArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2dArray_op_index(gf_Matrix2dArray_t* _this, size_t index, gf_Matrix2d_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2dArray_op_index_const(gf_Matrix2dArray_t const* _this, size_t index, gf_Matrix2d_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2dArray_new(gf_Matrix2dArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfMatrix2d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2dArray_dtor(gf_Matrix2dArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Matrix3d_SetRow(gf_Matrix3d_t* _this, int i, gf_Vec3d_t const* v) {
    try {
        _this->SetRow(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetColumn(gf_Matrix3d_t* _this, int i, gf_Vec3d_t const* v) {
    try {
        _this->SetColumn(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetRow(gf_Matrix3d_t const* _this, int i, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetRow(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetColumn(gf_Matrix3d_t const* _this, int i, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetColumn(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_Set_00(gf_Matrix3d_t* _this, double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->Set(m00, m01, m02, m10, m11, m12, m20, m21, m22);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_Set_01(gf_Matrix3d_t* _this, double const (*m)[3], gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->Set(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetIdentity(gf_Matrix3d_t* _this, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetZero(gf_Matrix3d_t* _this, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetDiagonal_00(gf_Matrix3d_t* _this, double s, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetDiagonal(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetDiagonal_01(gf_Matrix3d_t* _this, gf_Vec3d_t const* param00, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetDiagonal(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_Get(gf_Matrix3d_t const* _this, double (*m)[3], double** _result) {
    try {
        *_result = _this->Get(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_data_00(gf_Matrix3d_t* _this, double** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_data_01(gf_Matrix3d_t const* _this, double const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetArray_00(gf_Matrix3d_t* _this, double** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetArray_01(gf_Matrix3d_t const* _this, double const** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_index_00(gf_Matrix3d_t* _this, int i, double** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_index_01(gf_Matrix3d_t const* _this, int i, double const** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_eq_00(gf_Matrix3d_t const* _this, gf_Matrix3d_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_eq_01(gf_Matrix3d_t const* _this, gf_Matrix3f_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_neq_00(gf_Matrix3d_t const* _this, gf_Matrix3d_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_neq_01(gf_Matrix3d_t const* _this, gf_Matrix3f_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetTranspose(gf_Matrix3d_t const* _this, gf_Matrix3d_t* _result) {
    try {
        *_result = _this->GetTranspose();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetInverse(gf_Matrix3d_t const* _this, double* det, double eps, gf_Matrix3d_t* _result) {
    try {
        *_result = _this->GetInverse(det, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetDeterminant(gf_Matrix3d_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_Orthonormalize(gf_Matrix3d_t* _this, bool issueWarning, bool* _result) {
    try {
        *_result = _this->Orthonormalize(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetOrthonormalized(gf_Matrix3d_t const* _this, bool issueWarning, gf_Matrix3d_t* _result) {
    try {
        *_result = _this->GetOrthonormalized(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_GetHandedness(gf_Matrix3d_t const* _this, double* _result) {
    try {
        *_result = _this->GetHandedness();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_IsRightHanded(gf_Matrix3d_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRightHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_IsLeftHanded(gf_Matrix3d_t const* _this, bool* _result) {
    try {
        *_result = _this->IsLeftHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_mul_assign_00(gf_Matrix3d_t* _this, gf_Matrix3d_t const* m, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->operator*=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_mul_assign_01(gf_Matrix3d_t* _this, double param00, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->operator*=(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_add_assign(gf_Matrix3d_t* _this, gf_Matrix3d_t const* m, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->operator+=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_op_sub_assign(gf_Matrix3d_t* _this, gf_Matrix3d_t const* m, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->operator-=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetScale_00(gf_Matrix3d_t* _this, double scaleFactor, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetScale(scaleFactor);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetScale_01(gf_Matrix3d_t* _this, gf_Vec3d_t const* scaleFactors, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetScale(*scaleFactors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetRotate_00(gf_Matrix3d_t* _this, gf_Quatd_t const* rot, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_SetRotate_01(gf_Matrix3d_t* _this, gf_Rotation_t const* rot, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ExtractRotation(gf_Matrix3d_t const* _this, gf_Rotation_t* _result) {
    try {
        *_result = _this->ExtractRotation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_DecomposeRotation(gf_Matrix3d_t const* _this, gf_Vec3d_t const* axis0, gf_Vec3d_t const* axis1, gf_Vec3d_t const* axis2, gf_Vec3d_t* _result) {
    try {
        *_result = _this->DecomposeRotation(*axis0, *axis1, *axis2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ExtractRotationQuaternion(gf_Matrix3d_t const* _this, gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(_this->ExtractRotationQuaternion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_default(gf_Matrix3d_t* _result) {
    new (_result) pxr::GfMatrix3d();
    return 0;
}

int gf_Matrix3d_ctor_01(double m00, double m01, double m02, double m10, double m11, double m12, double m20, double m21, double m22, gf_Matrix3d_t* _result) {
    try {
        new (_result) pxr::GfMatrix3d(m00, m01, m02, m10, m11, m12, m20, m21, m22);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ctor_02(double (*m)[3], gf_Matrix3d_t* _result) {
    try {
        new (_result) pxr::GfMatrix3d(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ctor_03(double s, gf_Matrix3d_t* _result) {
    try {
        new (_result) pxr::GfMatrix3d(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ctor_04(int s, gf_Matrix3d_t* _result) {
    try {
        new (_result) pxr::GfMatrix3d(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ctor_05(gf_Vec3d_t const* v, gf_Matrix3d_t* _result) {
    try {
        new (_result) pxr::GfMatrix3d(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ctor_08(gf_Rotation_t const* rot, gf_Matrix3d_t* _result) {
    try {
        new (_result) pxr::GfMatrix3d(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3d_ctor_09(gf_Quatd_t const* rot, gf_Matrix3d_t* _result) {
    try {
        new (_result) pxr::GfMatrix3d(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3dArray_data(gf_Matrix3dArray_t* _this, gf_Matrix3d_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3dArray_data_const(gf_Matrix3dArray_t const* _this, gf_Matrix3d_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3dArray_size(gf_Matrix3dArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3dArray_op_index(gf_Matrix3dArray_t* _this, size_t index, gf_Matrix3d_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3dArray_op_index_const(gf_Matrix3dArray_t const* _this, size_t index, gf_Matrix3d_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3dArray_new(gf_Matrix3dArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfMatrix3d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3dArray_dtor(gf_Matrix3dArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Matrix4d_SetRow(gf_Matrix4d_t* _this, int i, gf_Vec4d_t const* v) {
    try {
        _this->SetRow(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetColumn(gf_Matrix4d_t* _this, int i, gf_Vec4d_t const* v) {
    try {
        _this->SetColumn(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetRow(gf_Matrix4d_t const* _this, int i, gf_Vec4d_t* _result) {
    try {
        *_result = _this->GetRow(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetColumn(gf_Matrix4d_t const* _this, int i, gf_Vec4d_t* _result) {
    try {
        *_result = _this->GetColumn(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_Set_00(gf_Matrix4d_t* _this, double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13, double m20, double m21, double m22, double m23, double m30, double m31, double m32, double m33, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->Set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_Set_01(gf_Matrix4d_t* _this, double const (*m)[4], gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->Set(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetIdentity(gf_Matrix4d_t* _this, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetZero(gf_Matrix4d_t* _this, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetDiagonal_00(gf_Matrix4d_t* _this, double s, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetDiagonal(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetDiagonal_01(gf_Matrix4d_t* _this, gf_Vec4d_t const* param00, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetDiagonal(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_Get(gf_Matrix4d_t const* _this, double (*m)[4], double** _result) {
    try {
        *_result = _this->Get(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_data_00(gf_Matrix4d_t* _this, double** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_data_01(gf_Matrix4d_t const* _this, double const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetArray_00(gf_Matrix4d_t* _this, double** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetArray_01(gf_Matrix4d_t const* _this, double const** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_index_00(gf_Matrix4d_t* _this, int i, double** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_index_01(gf_Matrix4d_t const* _this, int i, double const** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_eq_00(gf_Matrix4d_t const* _this, gf_Matrix4d_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_eq_01(gf_Matrix4d_t const* _this, gf_Matrix4f_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_neq_00(gf_Matrix4d_t const* _this, gf_Matrix4d_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_neq_01(gf_Matrix4d_t const* _this, gf_Matrix4f_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetTranspose(gf_Matrix4d_t const* _this, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetTranspose();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetInverse(gf_Matrix4d_t const* _this, double* det, double eps, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetInverse(det, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetDeterminant(gf_Matrix4d_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetRow3(gf_Matrix4d_t* _this, int i, gf_Vec3d_t const* v) {
    try {
        _this->SetRow3(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetRow3(gf_Matrix4d_t const* _this, int i, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetRow3(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetDeterminant3(gf_Matrix4d_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant3();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_HasOrthogonalRows3(gf_Matrix4d_t const* _this, bool* _result) {
    try {
        *_result = _this->HasOrthogonalRows3();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_Orthonormalize(gf_Matrix4d_t* _this, bool issueWarning, bool* _result) {
    try {
        *_result = _this->Orthonormalize(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetOrthonormalized(gf_Matrix4d_t const* _this, bool issueWarning, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetOrthonormalized(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_GetHandedness(gf_Matrix4d_t const* _this, double* _result) {
    try {
        *_result = _this->GetHandedness();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_IsRightHanded(gf_Matrix4d_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRightHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_IsLeftHanded(gf_Matrix4d_t const* _this, bool* _result) {
    try {
        *_result = _this->IsLeftHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_mul_assign_00(gf_Matrix4d_t* _this, gf_Matrix4d_t const* m, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->operator*=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_mul_assign_01(gf_Matrix4d_t* _this, double param00, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->operator*=(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_add_assign(gf_Matrix4d_t* _this, gf_Matrix4d_t const* m, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->operator+=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_op_sub_assign(gf_Matrix4d_t* _this, gf_Matrix4d_t const* m, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->operator-=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetScale_00(gf_Matrix4d_t* _this, double scaleFactor, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetScale(scaleFactor);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetScale_01(gf_Matrix4d_t* _this, gf_Vec3d_t const* scaleFactors, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetScale(*scaleFactors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_RemoveScaleShear(gf_Matrix4d_t const* _this, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->RemoveScaleShear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetRotate_00(gf_Matrix4d_t* _this, gf_Quatd_t const* rot, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetRotate_01(gf_Matrix4d_t* _this, gf_Rotation_t const* rot, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetRotate_02(gf_Matrix4d_t* _this, gf_Matrix3d_t const* mx, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetRotate(*mx);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetRotateOnly_00(gf_Matrix4d_t* _this, gf_Quatd_t const* rot, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetRotateOnly(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetRotateOnly_01(gf_Matrix4d_t* _this, gf_Rotation_t const* rot, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetRotateOnly(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetRotateOnly_02(gf_Matrix4d_t* _this, gf_Matrix3d_t const* mx, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetRotateOnly(*mx);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetTranslate(gf_Matrix4d_t* _this, gf_Vec3d_t const* trans, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetTranslate(*trans);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetTranslateOnly(gf_Matrix4d_t* _this, gf_Vec3d_t const* t, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetTranslateOnly(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetTransform_00(gf_Matrix4d_t* _this, gf_Rotation_t const* rotate, gf_Vec3d_t const* translate, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetTransform(*rotate, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetTransform_01(gf_Matrix4d_t* _this, gf_Matrix3d_t const* rotmx, gf_Vec3d_t const* translate, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetTransform(*rotmx, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetLookAt_00(gf_Matrix4d_t* _this, gf_Vec3d_t const* eyePoint, gf_Vec3d_t const* centerPoint, gf_Vec3d_t const* upDirection, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetLookAt(*eyePoint, *centerPoint, *upDirection);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_SetLookAt_01(gf_Matrix4d_t* _this, gf_Vec3d_t const* eyePoint, gf_Rotation_t const* orientation, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->SetLookAt(*eyePoint, *orientation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_Factor(gf_Matrix4d_t const* _this, gf_Matrix4d_t* r, gf_Vec3d_t* s, gf_Matrix4d_t* u, gf_Vec3d_t* t, gf_Matrix4d_t* p, double eps, bool* _result) {
    try {
        *_result = _this->Factor(r, s, u, t, p, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ExtractTranslation(gf_Matrix4d_t const* _this, gf_Vec3d_t* _result) {
    try {
        *_result = _this->ExtractTranslation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ExtractRotation(gf_Matrix4d_t const* _this, gf_Rotation_t* _result) {
    try {
        *_result = _this->ExtractRotation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ExtractRotationQuat(gf_Matrix4d_t const* _this, gf_Quatd_t* _result) {
    try {
        *_result = _this->ExtractRotationQuat();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_DecomposeRotation(gf_Matrix4d_t const* _this, gf_Vec3d_t const* axis0, gf_Vec3d_t const* axis1, gf_Vec3d_t const* axis2, gf_Vec3d_t* _result) {
    try {
        *_result = _this->DecomposeRotation(*axis0, *axis1, *axis2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ExtractRotationMatrix(gf_Matrix4d_t const* _this, gf_Matrix3d_t* _result) {
    try {
        *_result = _this->ExtractRotationMatrix();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_Transform_00(gf_Matrix4d_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->Transform(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_Transform_01(gf_Matrix4d_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->Transform(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_TransformDir_00(gf_Matrix4d_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->TransformDir(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_TransformDir_01(gf_Matrix4d_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->TransformDir(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_TransformAffine_00(gf_Matrix4d_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->TransformAffine(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_TransformAffine_01(gf_Matrix4d_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->TransformAffine(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_default(gf_Matrix4d_t* _result) {
    new (_result) pxr::GfMatrix4d();
    return 0;
}

int gf_Matrix4d_ctor_01(double m00, double m01, double m02, double m03, double m10, double m11, double m12, double m13, double m20, double m21, double m22, double m23, double m30, double m31, double m32, double m33, gf_Matrix4d_t* _result) {
    try {
        new (_result) pxr::GfMatrix4d(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ctor_02(double (*m)[4], gf_Matrix4d_t* _result) {
    try {
        new (_result) pxr::GfMatrix4d(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ctor_03(double s, gf_Matrix4d_t* _result) {
    try {
        new (_result) pxr::GfMatrix4d(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ctor_04(gf_Vec4d_t const* v, gf_Matrix4d_t* _result) {
    try {
        new (_result) pxr::GfMatrix4d(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ctor_09(gf_Rotation_t const* rotate, gf_Vec3d_t const* translate, gf_Matrix4d_t* _result) {
    try {
        new (_result) pxr::GfMatrix4d(*rotate, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4d_ctor_10(gf_Matrix3d_t const* rotmx, gf_Vec3d_t const* translate, gf_Matrix4d_t* _result) {
    try {
        new (_result) pxr::GfMatrix4d(*rotmx, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4dArray_data(gf_Matrix4dArray_t* _this, gf_Matrix4d_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4dArray_data_const(gf_Matrix4dArray_t const* _this, gf_Matrix4d_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4dArray_size(gf_Matrix4dArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4dArray_op_index(gf_Matrix4dArray_t* _this, size_t index, gf_Matrix4d_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4dArray_op_index_const(gf_Matrix4dArray_t const* _this, size_t index, gf_Matrix4d_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4dArray_new(gf_Matrix4dArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfMatrix4d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4dArray_dtor(gf_Matrix4dArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Matrix4dArrayVector_data(gf_Matrix4dArrayVector_t* _this, gf_Matrix4dArray_t** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Matrix4dArrayVector_data_const(gf_Matrix4dArrayVector_t const* _this, gf_Matrix4dArray_t const** _result) {
    *_result = _this->data();
    return 0;
}

int gf_Matrix4dArrayVector_empty(gf_Matrix4dArrayVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int gf_Matrix4dArrayVector_size(gf_Matrix4dArrayVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int gf_Matrix4dArrayVector_max_size(gf_Matrix4dArrayVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int gf_Matrix4dArrayVector_capacity(gf_Matrix4dArrayVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int gf_Matrix4dArrayVector_clear(gf_Matrix4dArrayVector_t* _this) {
    _this->clear();
    return 0;
}

int gf_Matrix4dArrayVector_pop_back(gf_Matrix4dArrayVector_t* _this) {
    _this->pop_back();
    return 0;
}

int gf_Matrix4dArrayVector_op_index(gf_Matrix4dArrayVector_t const* _this, size_t __n, gf_Matrix4dArray_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int gf_Matrix4dArrayVector_default(gf_Matrix4dArrayVector_t** _result) {
    *_result = new std::vector<pxr::VtMatrix4dArray>();
    return 0;
}

int gf_Matrix4dArrayVector_dtor(gf_Matrix4dArrayVector_t* _this) {
    delete _this;
    return 0;
}

int gf_Matrix2f_SetRow(gf_Matrix2f_t* _this, int i, gf_Vec2f_t const* v) {
    try {
        _this->SetRow(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_SetColumn(gf_Matrix2f_t* _this, int i, gf_Vec2f_t const* v) {
    try {
        _this->SetColumn(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_GetRow(gf_Matrix2f_t const* _this, int i, gf_Vec2f_t* _result) {
    try {
        *_result = _this->GetRow(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_GetColumn(gf_Matrix2f_t const* _this, int i, gf_Vec2f_t* _result) {
    try {
        *_result = _this->GetColumn(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_Set_00(gf_Matrix2f_t* _this, float m00, float m01, float m10, float m11, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->Set(m00, m01, m10, m11);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_Set_01(gf_Matrix2f_t* _this, float const (*m)[2], gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->Set(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_SetIdentity(gf_Matrix2f_t* _this, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_SetZero(gf_Matrix2f_t* _this, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->SetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_SetDiagonal_00(gf_Matrix2f_t* _this, float s, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->SetDiagonal(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_SetDiagonal_01(gf_Matrix2f_t* _this, gf_Vec2f_t const* param00, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->SetDiagonal(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_Get(gf_Matrix2f_t const* _this, float (*m)[2], float** _result) {
    try {
        *_result = _this->Get(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_data_00(gf_Matrix2f_t* _this, float** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_data_01(gf_Matrix2f_t const* _this, float const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_GetArray_00(gf_Matrix2f_t* _this, float** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_GetArray_01(gf_Matrix2f_t const* _this, float const** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_index_00(gf_Matrix2f_t* _this, int i, float** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_index_01(gf_Matrix2f_t const* _this, int i, float const** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_eq_00(gf_Matrix2f_t const* _this, gf_Matrix2d_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_eq_01(gf_Matrix2f_t const* _this, gf_Matrix2f_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_neq_00(gf_Matrix2f_t const* _this, gf_Matrix2d_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_neq_01(gf_Matrix2f_t const* _this, gf_Matrix2f_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_GetTranspose(gf_Matrix2f_t const* _this, gf_Matrix2f_t* _result) {
    try {
        *_result = _this->GetTranspose();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_GetInverse(gf_Matrix2f_t const* _this, double* det, double eps, gf_Matrix2f_t* _result) {
    try {
        *_result = _this->GetInverse(det, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_GetDeterminant(gf_Matrix2f_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_mul_assign_00(gf_Matrix2f_t* _this, gf_Matrix2f_t const* m, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->operator*=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_mul_assign_01(gf_Matrix2f_t* _this, double param00, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->operator*=(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_add_assign(gf_Matrix2f_t* _this, gf_Matrix2f_t const* m, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->operator+=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_op_sub_assign(gf_Matrix2f_t* _this, gf_Matrix2f_t const* m, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->operator-=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_default(gf_Matrix2f_t* _result) {
    new (_result) pxr::GfMatrix2f();
    return 0;
}

int gf_Matrix2f_ctor_01(float m00, float m01, float m10, float m11, gf_Matrix2f_t* _result) {
    try {
        new (_result) pxr::GfMatrix2f(m00, m01, m10, m11);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_ctor_02(float (*m)[2], gf_Matrix2f_t* _result) {
    try {
        new (_result) pxr::GfMatrix2f(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_ctor_03(float s, gf_Matrix2f_t* _result) {
    try {
        new (_result) pxr::GfMatrix2f(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_ctor_04(int s, gf_Matrix2f_t* _result) {
    try {
        new (_result) pxr::GfMatrix2f(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_ctor_05(gf_Vec2f_t const* v, gf_Matrix2f_t* _result) {
    try {
        new (_result) pxr::GfMatrix2f(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2f_ctor_08(gf_Matrix2d_t const* m, gf_Matrix2f_t* _result) {
    try {
        new (_result) pxr::GfMatrix2f(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2fArray_data(gf_Matrix2fArray_t* _this, gf_Matrix2f_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2fArray_data_const(gf_Matrix2fArray_t const* _this, gf_Matrix2f_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2fArray_size(gf_Matrix2fArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2fArray_op_index(gf_Matrix2fArray_t* _this, size_t index, gf_Matrix2f_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2fArray_op_index_const(gf_Matrix2fArray_t const* _this, size_t index, gf_Matrix2f_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2fArray_new(gf_Matrix2fArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfMatrix2f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix2fArray_dtor(gf_Matrix2fArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Matrix3f_SetRow(gf_Matrix3f_t* _this, int i, gf_Vec3f_t const* v) {
    try {
        _this->SetRow(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetColumn(gf_Matrix3f_t* _this, int i, gf_Vec3f_t const* v) {
    try {
        _this->SetColumn(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetRow(gf_Matrix3f_t const* _this, int i, gf_Vec3f_t* _result) {
    try {
        *_result = _this->GetRow(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetColumn(gf_Matrix3f_t const* _this, int i, gf_Vec3f_t* _result) {
    try {
        *_result = _this->GetColumn(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_Set_00(gf_Matrix3f_t* _this, float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->Set(m00, m01, m02, m10, m11, m12, m20, m21, m22);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_Set_01(gf_Matrix3f_t* _this, float const (*m)[3], gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->Set(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetIdentity(gf_Matrix3f_t* _this, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetZero(gf_Matrix3f_t* _this, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetDiagonal_00(gf_Matrix3f_t* _this, float s, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetDiagonal(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetDiagonal_01(gf_Matrix3f_t* _this, gf_Vec3f_t const* param00, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetDiagonal(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_Get(gf_Matrix3f_t const* _this, float (*m)[3], float** _result) {
    try {
        *_result = _this->Get(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_data_00(gf_Matrix3f_t* _this, float** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_data_01(gf_Matrix3f_t const* _this, float const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetArray_00(gf_Matrix3f_t* _this, float** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetArray_01(gf_Matrix3f_t const* _this, float const** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_index_00(gf_Matrix3f_t* _this, int i, float** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_index_01(gf_Matrix3f_t const* _this, int i, float const** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_eq_00(gf_Matrix3f_t const* _this, gf_Matrix3d_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_eq_01(gf_Matrix3f_t const* _this, gf_Matrix3f_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_neq_00(gf_Matrix3f_t const* _this, gf_Matrix3d_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_neq_01(gf_Matrix3f_t const* _this, gf_Matrix3f_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetTranspose(gf_Matrix3f_t const* _this, gf_Matrix3f_t* _result) {
    try {
        *_result = _this->GetTranspose();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetInverse(gf_Matrix3f_t const* _this, double* det, double eps, gf_Matrix3f_t* _result) {
    try {
        *_result = _this->GetInverse(det, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetDeterminant(gf_Matrix3f_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_Orthonormalize(gf_Matrix3f_t* _this, bool issueWarning, bool* _result) {
    try {
        *_result = _this->Orthonormalize(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetOrthonormalized(gf_Matrix3f_t const* _this, bool issueWarning, gf_Matrix3f_t* _result) {
    try {
        *_result = _this->GetOrthonormalized(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_GetHandedness(gf_Matrix3f_t const* _this, double* _result) {
    try {
        *_result = _this->GetHandedness();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_IsRightHanded(gf_Matrix3f_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRightHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_IsLeftHanded(gf_Matrix3f_t const* _this, bool* _result) {
    try {
        *_result = _this->IsLeftHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_mul_assign_00(gf_Matrix3f_t* _this, gf_Matrix3f_t const* m, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->operator*=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_mul_assign_01(gf_Matrix3f_t* _this, double param00, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->operator*=(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_add_assign(gf_Matrix3f_t* _this, gf_Matrix3f_t const* m, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->operator+=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_op_sub_assign(gf_Matrix3f_t* _this, gf_Matrix3f_t const* m, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->operator-=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetScale_00(gf_Matrix3f_t* _this, float scaleFactor, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetScale(scaleFactor);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetScale_01(gf_Matrix3f_t* _this, gf_Vec3f_t const* scaleFactors, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetScale(*scaleFactors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetRotate_00(gf_Matrix3f_t* _this, gf_Quatf_t const* rot, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_SetRotate_01(gf_Matrix3f_t* _this, gf_Rotation_t const* rot, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ExtractRotation(gf_Matrix3f_t const* _this, gf_Rotation_t* _result) {
    try {
        *_result = _this->ExtractRotation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_DecomposeRotation(gf_Matrix3f_t const* _this, gf_Vec3f_t const* axis0, gf_Vec3f_t const* axis1, gf_Vec3f_t const* axis2, gf_Vec3f_t* _result) {
    try {
        *_result = _this->DecomposeRotation(*axis0, *axis1, *axis2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ExtractRotationQuaternion(gf_Matrix3f_t const* _this, gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(_this->ExtractRotationQuaternion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_default(gf_Matrix3f_t* _result) {
    new (_result) pxr::GfMatrix3f();
    return 0;
}

int gf_Matrix3f_ctor_01(float m00, float m01, float m02, float m10, float m11, float m12, float m20, float m21, float m22, gf_Matrix3f_t* _result) {
    try {
        new (_result) pxr::GfMatrix3f(m00, m01, m02, m10, m11, m12, m20, m21, m22);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ctor_02(float (*m)[3], gf_Matrix3f_t* _result) {
    try {
        new (_result) pxr::GfMatrix3f(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ctor_03(float s, gf_Matrix3f_t* _result) {
    try {
        new (_result) pxr::GfMatrix3f(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ctor_04(int s, gf_Matrix3f_t* _result) {
    try {
        new (_result) pxr::GfMatrix3f(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ctor_05(gf_Vec3f_t const* v, gf_Matrix3f_t* _result) {
    try {
        new (_result) pxr::GfMatrix3f(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ctor_08(gf_Rotation_t const* rot, gf_Matrix3f_t* _result) {
    try {
        new (_result) pxr::GfMatrix3f(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3f_ctor_09(gf_Quatf_t const* rot, gf_Matrix3f_t* _result) {
    try {
        new (_result) pxr::GfMatrix3f(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3fArray_data(gf_Matrix3fArray_t* _this, gf_Matrix3f_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3fArray_data_const(gf_Matrix3fArray_t const* _this, gf_Matrix3f_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3fArray_size(gf_Matrix3fArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3fArray_op_index(gf_Matrix3fArray_t* _this, size_t index, gf_Matrix3f_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3fArray_op_index_const(gf_Matrix3fArray_t const* _this, size_t index, gf_Matrix3f_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3fArray_new(gf_Matrix3fArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfMatrix3f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix3fArray_dtor(gf_Matrix3fArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Matrix4f_SetRow(gf_Matrix4f_t* _this, int i, gf_Vec4f_t const* v) {
    try {
        _this->SetRow(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetColumn(gf_Matrix4f_t* _this, int i, gf_Vec4f_t const* v) {
    try {
        _this->SetColumn(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetRow(gf_Matrix4f_t const* _this, int i, gf_Vec4f_t* _result) {
    try {
        *_result = _this->GetRow(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetColumn(gf_Matrix4f_t const* _this, int i, gf_Vec4f_t* _result) {
    try {
        *_result = _this->GetColumn(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_Set_00(gf_Matrix4f_t* _this, float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->Set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_Set_01(gf_Matrix4f_t* _this, float const (*m)[4], gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->Set(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetIdentity(gf_Matrix4f_t* _this, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetZero(gf_Matrix4f_t* _this, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetDiagonal_00(gf_Matrix4f_t* _this, float s, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetDiagonal(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetDiagonal_01(gf_Matrix4f_t* _this, gf_Vec4f_t const* param00, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetDiagonal(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_Get(gf_Matrix4f_t const* _this, float (*m)[4], float** _result) {
    try {
        *_result = _this->Get(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_data_00(gf_Matrix4f_t* _this, float** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_data_01(gf_Matrix4f_t const* _this, float const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetArray_00(gf_Matrix4f_t* _this, float** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetArray_01(gf_Matrix4f_t const* _this, float const** _result) {
    try {
        *_result = _this->GetArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_index_00(gf_Matrix4f_t* _this, int i, float** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_index_01(gf_Matrix4f_t const* _this, int i, float const** _result) {
    try {
        *_result = _this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_eq_00(gf_Matrix4f_t const* _this, gf_Matrix4d_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_eq_01(gf_Matrix4f_t const* _this, gf_Matrix4f_t const* m, bool* _result) {
    try {
        *_result = _this->operator==(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_neq_00(gf_Matrix4f_t const* _this, gf_Matrix4d_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_neq_01(gf_Matrix4f_t const* _this, gf_Matrix4f_t const* m, bool* _result) {
    try {
        *_result = _this->operator!=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetTranspose(gf_Matrix4f_t const* _this, gf_Matrix4f_t* _result) {
    try {
        *_result = _this->GetTranspose();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetInverse(gf_Matrix4f_t const* _this, double* det, double eps, gf_Matrix4f_t* _result) {
    try {
        *_result = _this->GetInverse(det, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetDeterminant(gf_Matrix4f_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetRow3(gf_Matrix4f_t* _this, int i, gf_Vec3f_t const* v) {
    try {
        _this->SetRow3(i, *v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetRow3(gf_Matrix4f_t const* _this, int i, gf_Vec3f_t* _result) {
    try {
        *_result = _this->GetRow3(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetDeterminant3(gf_Matrix4f_t const* _this, double* _result) {
    try {
        *_result = _this->GetDeterminant3();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_HasOrthogonalRows3(gf_Matrix4f_t const* _this, bool* _result) {
    try {
        *_result = _this->HasOrthogonalRows3();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_Orthonormalize(gf_Matrix4f_t* _this, bool issueWarning, bool* _result) {
    try {
        *_result = _this->Orthonormalize(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetOrthonormalized(gf_Matrix4f_t const* _this, bool issueWarning, gf_Matrix4f_t* _result) {
    try {
        *_result = _this->GetOrthonormalized(issueWarning);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_GetHandedness(gf_Matrix4f_t const* _this, double* _result) {
    try {
        *_result = _this->GetHandedness();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_IsRightHanded(gf_Matrix4f_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRightHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_IsLeftHanded(gf_Matrix4f_t const* _this, bool* _result) {
    try {
        *_result = _this->IsLeftHanded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_mul_assign_00(gf_Matrix4f_t* _this, gf_Matrix4f_t const* m, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->operator*=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_mul_assign_01(gf_Matrix4f_t* _this, double param00, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->operator*=(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_add_assign(gf_Matrix4f_t* _this, gf_Matrix4f_t const* m, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->operator+=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_sub_assign(gf_Matrix4f_t* _this, gf_Matrix4f_t const* m, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->operator-=(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetScale_00(gf_Matrix4f_t* _this, float scaleFactor, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetScale(scaleFactor);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetScale_01(gf_Matrix4f_t* _this, gf_Vec3f_t const* scaleFactors, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetScale(*scaleFactors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_RemoveScaleShear(gf_Matrix4f_t const* _this, gf_Matrix4f_t* _result) {
    try {
        *_result = _this->RemoveScaleShear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetRotate_00(gf_Matrix4f_t* _this, gf_Quatf_t const* rot, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetRotate_01(gf_Matrix4f_t* _this, gf_Rotation_t const* rot, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetRotate(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetRotate_02(gf_Matrix4f_t* _this, gf_Matrix3f_t const* mx, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetRotate(*mx);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetRotateOnly_00(gf_Matrix4f_t* _this, gf_Quatf_t const* rot, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetRotateOnly(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetRotateOnly_01(gf_Matrix4f_t* _this, gf_Rotation_t const* rot, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetRotateOnly(*rot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetRotateOnly_02(gf_Matrix4f_t* _this, gf_Matrix3f_t const* mx, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetRotateOnly(*mx);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetTranslate(gf_Matrix4f_t* _this, gf_Vec3f_t const* trans, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetTranslate(*trans);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetTranslateOnly(gf_Matrix4f_t* _this, gf_Vec3f_t const* t, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetTranslateOnly(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetTransform_00(gf_Matrix4f_t* _this, gf_Rotation_t const* rotate, gf_Vec3f_t const* translate, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetTransform(*rotate, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetTransform_01(gf_Matrix4f_t* _this, gf_Matrix3f_t const* rotmx, gf_Vec3f_t const* translate, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetTransform(*rotmx, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetLookAt_00(gf_Matrix4f_t* _this, gf_Vec3f_t const* eyePoint, gf_Vec3f_t const* centerPoint, gf_Vec3f_t const* upDirection, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetLookAt(*eyePoint, *centerPoint, *upDirection);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_SetLookAt_01(gf_Matrix4f_t* _this, gf_Vec3f_t const* eyePoint, gf_Rotation_t const* orientation, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->SetLookAt(*eyePoint, *orientation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_Factor(gf_Matrix4f_t const* _this, gf_Matrix4f_t* r, gf_Vec3f_t* s, gf_Matrix4f_t* u, gf_Vec3f_t* t, gf_Matrix4f_t* p, float eps, bool* _result) {
    try {
        *_result = _this->Factor(r, s, u, t, p, eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ExtractTranslation(gf_Matrix4f_t const* _this, gf_Vec3f_t* _result) {
    try {
        *_result = _this->ExtractTranslation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ExtractRotation(gf_Matrix4f_t const* _this, gf_Rotation_t* _result) {
    try {
        *_result = _this->ExtractRotation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ExtractRotationQuat(gf_Matrix4f_t const* _this, gf_Quatf_t* _result) {
    try {
        *_result = _this->ExtractRotationQuat();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_DecomposeRotation(gf_Matrix4f_t const* _this, gf_Vec3f_t const* axis0, gf_Vec3f_t const* axis1, gf_Vec3f_t const* axis2, gf_Vec3f_t* _result) {
    try {
        *_result = _this->DecomposeRotation(*axis0, *axis1, *axis2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ExtractRotationMatrix(gf_Matrix4f_t const* _this, gf_Matrix3f_t* _result) {
    try {
        *_result = _this->ExtractRotationMatrix();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_Transform_00(gf_Matrix4f_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->Transform(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_Transform_01(gf_Matrix4f_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->Transform(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_TransformDir_00(gf_Matrix4f_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->TransformDir(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_TransformDir_01(gf_Matrix4f_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->TransformDir(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_TransformAffine_00(gf_Matrix4f_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->TransformAffine(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_TransformAffine_01(gf_Matrix4f_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->TransformAffine(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_op_assign_00(gf_Matrix4f_t* _this, gf_Matrix4f_t const* param00, gf_Matrix4f_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Matrix4f_op_assign_01(gf_Matrix4f_t* _this, gf_Matrix4f_t* param00, gf_Matrix4f_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Matrix4f_default(gf_Matrix4f_t* _result) {
    new (_result) pxr::GfMatrix4f();
    return 0;
}

int gf_Matrix4f_ctor_01(float m00, float m01, float m02, float m03, float m10, float m11, float m12, float m13, float m20, float m21, float m22, float m23, float m30, float m31, float m32, float m33, gf_Matrix4f_t* _result) {
    try {
        new (_result) pxr::GfMatrix4f(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ctor_02(float (*m)[4], gf_Matrix4f_t* _result) {
    try {
        new (_result) pxr::GfMatrix4f(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ctor_03(float s, gf_Matrix4f_t* _result) {
    try {
        new (_result) pxr::GfMatrix4f(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ctor_04(gf_Vec4f_t const* v, gf_Matrix4f_t* _result) {
    try {
        new (_result) pxr::GfMatrix4f(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ctor_09(gf_Rotation_t const* rotate, gf_Vec3f_t const* translate, gf_Matrix4f_t* _result) {
    try {
        new (_result) pxr::GfMatrix4f(*rotate, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ctor_10(gf_Matrix3f_t const* rotmx, gf_Vec3f_t const* translate, gf_Matrix4f_t* _result) {
    try {
        new (_result) pxr::GfMatrix4f(*rotmx, *translate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4f_ctor_11(gf_Matrix4d_t const* m, gf_Matrix4f_t* _result) {
    try {
        new (_result) pxr::GfMatrix4f(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4fArray_data(gf_Matrix4fArray_t* _this, gf_Matrix4f_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4fArray_data_const(gf_Matrix4fArray_t const* _this, gf_Matrix4f_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4fArray_size(gf_Matrix4fArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4fArray_op_index(gf_Matrix4fArray_t* _this, size_t index, gf_Matrix4f_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4fArray_op_index_const(gf_Matrix4fArray_t const* _this, size_t index, gf_Matrix4f_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4fArray_new(gf_Matrix4fArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfMatrix4f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Matrix4fArray_dtor(gf_Matrix4fArray_t* _this) {
    delete _this;
    return 0;
}

int gf_MultiInterval_op_eq(gf_MultiInterval_t const* _this, gf_MultiInterval_t const* that, bool* _result) {
    try {
        *_result = _this->operator==(*that);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_op_neq(gf_MultiInterval_t const* _this, gf_MultiInterval_t const* that, bool* _result) {
    try {
        *_result = _this->operator!=(*that);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_op_lt(gf_MultiInterval_t const* _this, gf_MultiInterval_t const* that, bool* _result) {
    try {
        *_result = _this->operator<(*that);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_op_gte(gf_MultiInterval_t const* _this, gf_MultiInterval_t const* that, bool* _result) {
    try {
        *_result = _this->operator>=(*that);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_op_gt(gf_MultiInterval_t const* _this, gf_MultiInterval_t const* that, bool* _result) {
    try {
        *_result = _this->operator>(*that);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_op_lte(gf_MultiInterval_t const* _this, gf_MultiInterval_t const* that, bool* _result) {
    try {
        *_result = _this->operator<=(*that);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Hash(gf_MultiInterval_t const* _this, size_t* _result) {
    try {
        *_result = _this->Hash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_IsEmpty(gf_MultiInterval_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_GetSize(gf_MultiInterval_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_GetBounds(gf_MultiInterval_t const* _this, gf_Interval_t** _result) {
    try {
        *_result = new pxr::GfInterval(_this->GetBounds());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Contains_00(gf_MultiInterval_t const* _this, double d, bool* _result) {
    try {
        *_result = _this->Contains(d);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Contains_01(gf_MultiInterval_t const* _this, gf_Interval_t const* i, bool* _result) {
    try {
        *_result = _this->Contains(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Contains_02(gf_MultiInterval_t const* _this, gf_MultiInterval_t const* s, bool* _result) {
    try {
        *_result = _this->Contains(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Clear(gf_MultiInterval_t* _this) {
    try {
        _this->Clear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Add_00(gf_MultiInterval_t* _this, gf_Interval_t const* i) {
    try {
        _this->Add(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Add_01(gf_MultiInterval_t* _this, gf_MultiInterval_t const* s) {
    try {
        _this->Add(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_ArithmeticAdd(gf_MultiInterval_t* _this, gf_Interval_t const* i) {
    try {
        _this->ArithmeticAdd(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Remove_00(gf_MultiInterval_t* _this, gf_Interval_t const* i) {
    try {
        _this->Remove(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Remove_01(gf_MultiInterval_t* _this, gf_MultiInterval_t const* s) {
    try {
        _this->Remove(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Intersect_00(gf_MultiInterval_t* _this, gf_Interval_t const* i) {
    try {
        _this->Intersect(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_Intersect_01(gf_MultiInterval_t* _this, gf_MultiInterval_t const* s) {
    try {
        _this->Intersect(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_GetComplement(gf_MultiInterval_t const* _this, gf_MultiInterval_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval(_this->GetComplement());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_begin(gf_MultiInterval_t const* _this, gf_MultiIntervalIterator_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval::iterator(_this->begin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_end(gf_MultiInterval_t const* _this, gf_MultiIntervalIterator_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval::iterator(_this->end());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_lower_bound(gf_MultiInterval_t const* _this, double x, gf_MultiIntervalIterator_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval::iterator(_this->lower_bound(x));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_upper_bound(gf_MultiInterval_t const* _this, double x, gf_MultiIntervalIterator_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval::iterator(_this->upper_bound(x));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_GetNextNonContainingInterval(gf_MultiInterval_t const* _this, double x, gf_MultiIntervalIterator_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval::iterator(_this->GetNextNonContainingInterval(x));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_GetPriorNonContainingInterval(gf_MultiInterval_t const* _this, double x, gf_MultiIntervalIterator_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval::iterator(_this->GetPriorNonContainingInterval(x));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_GetContainingInterval(gf_MultiInterval_t const* _this, double x, gf_MultiIntervalIterator_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval::iterator(_this->GetContainingInterval(x));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_GetFullInterval(gf_MultiInterval_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval(pxr::GfMultiInterval::GetFullInterval());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_swap(gf_MultiInterval_t* _this, gf_MultiInterval_t* other) {
    try {
        _this->swap(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_op_assign_00(gf_MultiInterval_t* _this, gf_MultiInterval_t const* param00, gf_MultiInterval_t** _result) {
    try {
        *_result = &_this->operator=(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_op_assign_01(gf_MultiInterval_t* _this, gf_MultiInterval_t* param00, gf_MultiInterval_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_MultiInterval_default(gf_MultiInterval_t** _result) {
    *_result = new pxr::GfMultiInterval();
    return 0;
}

int gf_MultiInterval_ctor_01(gf_Interval_t const* i, gf_MultiInterval_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval(*i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_ctor_02(gf_IntervalVector_t const* intervals, gf_MultiInterval_t** _result) {
    try {
        *_result = new pxr::GfMultiInterval(*intervals);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_MultiInterval_dtor(gf_MultiInterval_t* _this) {
    delete _this;
    return 0;
}

int gf_MultiIntervalSet_dtor(gf_MultiIntervalSet_t* _this) {
    delete _this;
    return 0;
}

int gf_MultiIntervalIterator_dtor(gf_MultiIntervalIterator_t* _this) {
    delete _this;
    return 0;
}

int gf_Plane_Set_00(gf_Plane_t* _this, gf_Vec3d_t const* normal, double distanceToOrigin) {
    try {
        _this->Set(*normal, distanceToOrigin);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_Set_01(gf_Plane_t* _this, gf_Vec3d_t const* normal, gf_Vec3d_t const* point) {
    try {
        _this->Set(*normal, *point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_Set_02(gf_Plane_t* _this, gf_Vec3d_t const* p0, gf_Vec3d_t const* p1, gf_Vec3d_t const* p2) {
    try {
        _this->Set(*p0, *p1, *p2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_Set_03(gf_Plane_t* _this, gf_Vec4d_t const* eqn) {
    try {
        _this->Set(*eqn);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_GetNormal(gf_Plane_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetNormal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_GetDistanceFromOrigin(gf_Plane_t const* _this, double* _result) {
    try {
        *_result = _this->GetDistanceFromOrigin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_GetEquation(gf_Plane_t const* _this, gf_Vec4d_t* _result) {
    try {
        *_result = _this->GetEquation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_op_eq(gf_Plane_t const* _this, gf_Plane_t const* p, bool* _result) {
    try {
        *_result = _this->operator==(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_op_neq(gf_Plane_t const* _this, gf_Plane_t const* p, bool* _result) {
    try {
        *_result = _this->operator!=(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_GetDistance(gf_Plane_t const* _this, gf_Vec3d_t const* p, double* _result) {
    try {
        *_result = _this->GetDistance(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_Project(gf_Plane_t const* _this, gf_Vec3d_t const* p, gf_Vec3d_t* _result) {
    try {
        *_result = _this->Project(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_Transform(gf_Plane_t* _this, gf_Matrix4d_t const* matrix, gf_Plane_t** _result) {
    try {
        *_result = &_this->Transform(*matrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_Reorient(gf_Plane_t* _this, gf_Vec3d_t const* p) {
    try {
        _this->Reorient(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_IntersectsPositiveHalfSpace_00(gf_Plane_t const* _this, gf_Range3d_t const* box, bool* _result) {
    try {
        *_result = _this->IntersectsPositiveHalfSpace(*box);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_IntersectsPositiveHalfSpace_01(gf_Plane_t const* _this, gf_Vec3d_t const* pt, bool* _result) {
    try {
        *_result = _this->IntersectsPositiveHalfSpace(*pt);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_default(gf_Plane_t** _result) {
    try {
        *_result = new pxr::GfPlane();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_ctor_01(gf_Vec3d_t const* normal, double distanceToOrigin, gf_Plane_t** _result) {
    try {
        *_result = new pxr::GfPlane(*normal, distanceToOrigin);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_ctor_02(gf_Vec3d_t const* normal, gf_Vec3d_t const* point, gf_Plane_t** _result) {
    try {
        *_result = new pxr::GfPlane(*normal, *point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_ctor_03(gf_Vec3d_t const* p0, gf_Vec3d_t const* p1, gf_Vec3d_t const* p2, gf_Plane_t** _result) {
    try {
        *_result = new pxr::GfPlane(*p0, *p1, *p2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_ctor_04(gf_Vec4d_t const* eqn, gf_Plane_t** _result) {
    try {
        *_result = new pxr::GfPlane(*eqn);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Plane_dtor(gf_Plane_t* _this) {
    delete _this;
    return 0;
}

int gf_Quaternion_SetReal(gf_Quaternion_t* _this, double real) {
    try {
        _this->SetReal(real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_SetImaginary(gf_Quaternion_t* _this, gf_Vec3d_t const* imaginary) {
    try {
        _this->SetImaginary(*imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_GetReal(gf_Quaternion_t const* _this, double* _result) {
    try {
        *_result = _this->GetReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_GetImaginary(gf_Quaternion_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetImaginary();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_GetZero(gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(pxr::GfQuaternion::GetZero());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_GetIdentity(gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(pxr::GfQuaternion::GetIdentity());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_GetLength(gf_Quaternion_t const* _this, double* _result) {
    try {
        *_result = _this->GetLength();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_GetNormalized(gf_Quaternion_t const* _this, double eps, gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(_this->GetNormalized(eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_Normalize(gf_Quaternion_t* _this, double eps, double* _result) {
    try {
        *_result = _this->Normalize(eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_GetInverse(gf_Quaternion_t const* _this, gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(_this->GetInverse());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_op_eq(gf_Quaternion_t const* _this, gf_Quaternion_t const* q, bool* _result) {
    try {
        *_result = _this->operator==(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_op_neq(gf_Quaternion_t const* _this, gf_Quaternion_t const* q, bool* _result) {
    try {
        *_result = _this->operator!=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_op_mul_assign_00(gf_Quaternion_t* _this, gf_Quaternion_t const* q, gf_Quaternion_t** _result) {
    try {
        *_result = &_this->operator*=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_op_mul_assign_01(gf_Quaternion_t* _this, double s, gf_Quaternion_t** _result) {
    try {
        *_result = &_this->operator*=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_op_div_assign(gf_Quaternion_t* _this, double s, gf_Quaternion_t** _result) {
    try {
        *_result = &_this->operator/=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_op_add_assign(gf_Quaternion_t* _this, gf_Quaternion_t const* q, gf_Quaternion_t** _result) {
    try {
        *_result = &_this->operator+=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_op_sub_assign(gf_Quaternion_t* _this, gf_Quaternion_t const* q, gf_Quaternion_t** _result) {
    try {
        *_result = &_this->operator-=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_default(gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_ctor_01(int realVal, gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(realVal);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_ctor_02(double real, gf_Vec3d_t const* imaginary, gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(real, *imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quaternion_dtor(gf_Quaternion_t* _this) {
    delete _this;
    return 0;
}

int gf_Quatd_GetZero(gf_Quatd_t* _result) {
    try {
        *_result = pxr::GfQuatd::GetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_GetIdentity(gf_Quatd_t* _result) {
    try {
        *_result = pxr::GfQuatd::GetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_GetReal(gf_Quatd_t const* _this, double* _result) {
    try {
        *_result = _this->GetReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_SetReal(gf_Quatd_t* _this, double real) {
    try {
        _this->SetReal(real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_GetImaginary(gf_Quatd_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetImaginary();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_SetImaginary_00(gf_Quatd_t* _this, gf_Vec3d_t const* imaginary) {
    try {
        _this->SetImaginary(*imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_SetImaginary_01(gf_Quatd_t* _this, double i, double j, double k) {
    try {
        _this->SetImaginary(i, j, k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_GetLength(gf_Quatd_t const* _this, double* _result) {
    try {
        *_result = _this->GetLength();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_GetNormalized(gf_Quatd_t const* _this, double eps, gf_Quatd_t* _result) {
    try {
        *_result = _this->GetNormalized(eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_Normalize(gf_Quatd_t* _this, double eps, double* _result) {
    try {
        *_result = _this->Normalize(eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_GetConjugate(gf_Quatd_t const* _this, gf_Quatd_t* _result) {
    try {
        *_result = _this->GetConjugate();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_GetInverse(gf_Quatd_t const* _this, gf_Quatd_t* _result) {
    try {
        *_result = _this->GetInverse();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_Transform(gf_Quatd_t const* _this, gf_Vec3d_t const* point, gf_Vec3d_t* _result) {
    try {
        *_result = _this->Transform(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_sub(gf_Quatd_t const* _this, gf_Quatd_t* _result) {
    try {
        *_result = _this->operator-();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_eq(gf_Quatd_t const* _this, gf_Quatd_t const* q, bool* _result) {
    try {
        *_result = _this->operator==(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_neq(gf_Quatd_t const* _this, gf_Quatd_t const* q, bool* _result) {
    try {
        *_result = _this->operator!=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_mul_assign_00(gf_Quatd_t* _this, gf_Quatd_t const* q, gf_Quatd_t** _result) {
    try {
        *_result = &_this->operator*=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_mul_assign_01(gf_Quatd_t* _this, double s, gf_Quatd_t** _result) {
    try {
        *_result = &_this->operator*=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_div_assign(gf_Quatd_t* _this, double s, gf_Quatd_t** _result) {
    try {
        *_result = &_this->operator/=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_add_assign(gf_Quatd_t* _this, gf_Quatd_t const* q, gf_Quatd_t** _result) {
    try {
        *_result = &_this->operator+=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_sub_assign(gf_Quatd_t* _this, gf_Quatd_t const* q, gf_Quatd_t** _result) {
    try {
        *_result = &_this->operator-=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_op_assign_00(gf_Quatd_t* _this, gf_Quatd_t const* param00, gf_Quatd_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Quatd_op_assign_01(gf_Quatd_t* _this, gf_Quatd_t* param00, gf_Quatd_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Quatd_default(gf_Quatd_t* _result) {
    try {
        new (_result) pxr::GfQuatd();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_ctor_01(double realVal, gf_Quatd_t* _result) {
    try {
        new (_result) pxr::GfQuatd(realVal);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_ctor_02(double real, double i, double j, double k, gf_Quatd_t* _result) {
    try {
        new (_result) pxr::GfQuatd(real, i, j, k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_ctor_03(double real, gf_Vec3d_t const* imaginary, gf_Quatd_t* _result) {
    try {
        new (_result) pxr::GfQuatd(real, *imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_ctor_04(gf_Quatf_t const* other, gf_Quatd_t* _result) {
    try {
        new (_result) pxr::GfQuatd(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatd_ctor_05(gf_Quath_t const* other, gf_Quatd_t* _result) {
    try {
        new (_result) pxr::GfQuatd(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatdArray_data(gf_QuatdArray_t* _this, gf_Quatd_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatdArray_data_const(gf_QuatdArray_t const* _this, gf_Quatd_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatdArray_size(gf_QuatdArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatdArray_op_index(gf_QuatdArray_t* _this, size_t index, gf_Quatd_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatdArray_op_index_const(gf_QuatdArray_t const* _this, size_t index, gf_Quatd_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatdArray_new(gf_QuatdArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfQuatd>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatdArray_dtor(gf_QuatdArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Quatf_GetZero(gf_Quatf_t* _result) {
    try {
        *_result = pxr::GfQuatf::GetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_GetIdentity(gf_Quatf_t* _result) {
    try {
        *_result = pxr::GfQuatf::GetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_GetReal(gf_Quatf_t const* _this, float* _result) {
    try {
        *_result = _this->GetReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_SetReal(gf_Quatf_t* _this, float real) {
    try {
        _this->SetReal(real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_GetImaginary(gf_Quatf_t const* _this, gf_Vec3f_t const** _result) {
    try {
        *_result = &_this->GetImaginary();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_SetImaginary_00(gf_Quatf_t* _this, gf_Vec3f_t const* imaginary) {
    try {
        _this->SetImaginary(*imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_SetImaginary_01(gf_Quatf_t* _this, float i, float j, float k) {
    try {
        _this->SetImaginary(i, j, k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_GetLength(gf_Quatf_t const* _this, float* _result) {
    try {
        *_result = _this->GetLength();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_GetNormalized(gf_Quatf_t const* _this, float eps, gf_Quatf_t* _result) {
    try {
        *_result = _this->GetNormalized(eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_Normalize(gf_Quatf_t* _this, float eps, float* _result) {
    try {
        *_result = _this->Normalize(eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_GetConjugate(gf_Quatf_t const* _this, gf_Quatf_t* _result) {
    try {
        *_result = _this->GetConjugate();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_GetInverse(gf_Quatf_t const* _this, gf_Quatf_t* _result) {
    try {
        *_result = _this->GetInverse();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_Transform(gf_Quatf_t const* _this, gf_Vec3f_t const* point, gf_Vec3f_t* _result) {
    try {
        *_result = _this->Transform(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_sub(gf_Quatf_t const* _this, gf_Quatf_t* _result) {
    try {
        *_result = _this->operator-();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_eq(gf_Quatf_t const* _this, gf_Quatf_t const* q, bool* _result) {
    try {
        *_result = _this->operator==(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_neq(gf_Quatf_t const* _this, gf_Quatf_t const* q, bool* _result) {
    try {
        *_result = _this->operator!=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_mul_assign_00(gf_Quatf_t* _this, gf_Quatf_t const* q, gf_Quatf_t** _result) {
    try {
        *_result = &_this->operator*=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_mul_assign_01(gf_Quatf_t* _this, float s, gf_Quatf_t** _result) {
    try {
        *_result = &_this->operator*=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_div_assign(gf_Quatf_t* _this, float s, gf_Quatf_t** _result) {
    try {
        *_result = &_this->operator/=(s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_add_assign(gf_Quatf_t* _this, gf_Quatf_t const* q, gf_Quatf_t** _result) {
    try {
        *_result = &_this->operator+=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_sub_assign(gf_Quatf_t* _this, gf_Quatf_t const* q, gf_Quatf_t** _result) {
    try {
        *_result = &_this->operator-=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_op_assign_00(gf_Quatf_t* _this, gf_Quatf_t const* param00, gf_Quatf_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Quatf_op_assign_01(gf_Quatf_t* _this, gf_Quatf_t* param00, gf_Quatf_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Quatf_default(gf_Quatf_t* _result) {
    try {
        new (_result) pxr::GfQuatf();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_ctor_01(float realVal, gf_Quatf_t* _result) {
    try {
        new (_result) pxr::GfQuatf(realVal);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_ctor_02(float real, float i, float j, float k, gf_Quatf_t* _result) {
    try {
        new (_result) pxr::GfQuatf(real, i, j, k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_ctor_03(float real, gf_Vec3f_t const* imaginary, gf_Quatf_t* _result) {
    try {
        new (_result) pxr::GfQuatf(real, *imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_ctor_04(gf_Quatd_t const* other, gf_Quatf_t* _result) {
    try {
        new (_result) pxr::GfQuatf(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quatf_ctor_05(gf_Quath_t const* other, gf_Quatf_t* _result) {
    try {
        new (_result) pxr::GfQuatf(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatfArray_data(gf_QuatfArray_t* _this, gf_Quatf_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatfArray_data_const(gf_QuatfArray_t const* _this, gf_Quatf_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatfArray_size(gf_QuatfArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatfArray_op_index(gf_QuatfArray_t* _this, size_t index, gf_Quatf_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatfArray_op_index_const(gf_QuatfArray_t const* _this, size_t index, gf_Quatf_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatfArray_new(gf_QuatfArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfQuatf>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuatfArray_dtor(gf_QuatfArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Quath_GetZero(gf_Quath_t* _result) {
    try {
        *_result = pxr::GfQuath::GetZero();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_GetIdentity(gf_Quath_t* _result) {
    try {
        *_result = pxr::GfQuath::GetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_GetReal(gf_Quath_t const* _this, gf_Half_t** _result) {
    try {
        *_result = new pxr::GfHalf(_this->GetReal());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_SetReal(gf_Quath_t* _this, gf_Half_t* real) {
    try {
        _this->SetReal(*real);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_GetImaginary(gf_Quath_t const* _this, gf_Vec3h_t const** _result) {
    try {
        *_result = &_this->GetImaginary();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_SetImaginary_00(gf_Quath_t* _this, gf_Vec3h_t const* imaginary) {
    try {
        _this->SetImaginary(*imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_SetImaginary_01(gf_Quath_t* _this, gf_Half_t* i, gf_Half_t* j, gf_Half_t* k) {
    try {
        _this->SetImaginary(*i, *j, *k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_GetLength(gf_Quath_t const* _this, gf_Half_t** _result) {
    try {
        *_result = new pxr::GfHalf(_this->GetLength());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_GetNormalized(gf_Quath_t const* _this, gf_Half_t* eps, gf_Quath_t* _result) {
    try {
        *_result = _this->GetNormalized(*eps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_Normalize(gf_Quath_t* _this, gf_Half_t* eps, gf_Half_t** _result) {
    try {
        *_result = new pxr::GfHalf(_this->Normalize(*eps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_GetConjugate(gf_Quath_t const* _this, gf_Quath_t* _result) {
    try {
        *_result = _this->GetConjugate();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_GetInverse(gf_Quath_t const* _this, gf_Quath_t* _result) {
    try {
        *_result = _this->GetInverse();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_Transform(gf_Quath_t const* _this, gf_Vec3h_t const* point, gf_Vec3h_t* _result) {
    try {
        *_result = _this->Transform(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_sub(gf_Quath_t const* _this, gf_Quath_t* _result) {
    try {
        *_result = _this->operator-();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_eq(gf_Quath_t const* _this, gf_Quath_t const* q, bool* _result) {
    try {
        *_result = _this->operator==(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_neq(gf_Quath_t const* _this, gf_Quath_t const* q, bool* _result) {
    try {
        *_result = _this->operator!=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_mul_assign_00(gf_Quath_t* _this, gf_Quath_t const* q, gf_Quath_t** _result) {
    try {
        *_result = &_this->operator*=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_mul_assign_01(gf_Quath_t* _this, gf_Half_t* s, gf_Quath_t** _result) {
    try {
        *_result = &_this->operator*=(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_div_assign(gf_Quath_t* _this, gf_Half_t* s, gf_Quath_t** _result) {
    try {
        *_result = &_this->operator/=(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_add_assign(gf_Quath_t* _this, gf_Quath_t const* q, gf_Quath_t** _result) {
    try {
        *_result = &_this->operator+=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_sub_assign(gf_Quath_t* _this, gf_Quath_t const* q, gf_Quath_t** _result) {
    try {
        *_result = &_this->operator-=(*q);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_op_assign_00(gf_Quath_t* _this, gf_Quath_t const* param00, gf_Quath_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Quath_op_assign_01(gf_Quath_t* _this, gf_Quath_t* param00, gf_Quath_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Quath_default(gf_Quath_t* _result) {
    try {
        new (_result) pxr::GfQuath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_ctor_01(gf_Half_t* realVal, gf_Quath_t* _result) {
    try {
        new (_result) pxr::GfQuath(*realVal);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_ctor_02(gf_Half_t* real, gf_Half_t* i, gf_Half_t* j, gf_Half_t* k, gf_Quath_t* _result) {
    try {
        new (_result) pxr::GfQuath(*real, *i, *j, *k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_ctor_03(gf_Half_t* real, gf_Vec3h_t const* imaginary, gf_Quath_t* _result) {
    try {
        new (_result) pxr::GfQuath(*real, *imaginary);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_ctor_04(gf_Quatd_t const* other, gf_Quath_t* _result) {
    try {
        new (_result) pxr::GfQuath(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Quath_ctor_05(gf_Quatf_t const* other, gf_Quath_t* _result) {
    try {
        new (_result) pxr::GfQuath(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuathArray_data(gf_QuathArray_t* _this, gf_Quath_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuathArray_data_const(gf_QuathArray_t const* _this, gf_Quath_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuathArray_size(gf_QuathArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuathArray_op_index(gf_QuathArray_t* _this, size_t index, gf_Quath_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuathArray_op_index_const(gf_QuathArray_t const* _this, size_t index, gf_Quath_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuathArray_new(gf_QuathArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfQuath>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_QuathArray_dtor(gf_QuathArray_t* _this) {
    delete _this;
    return 0;
}

int gf_Range1d_SetEmpty(gf_Range1d_t* _this) {
    try {
        _this->SetEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_GetMin(gf_Range1d_t const* _this, double* _result) {
    try {
        *_result = _this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_GetMax(gf_Range1d_t const* _this, double* _result) {
    try {
        *_result = _this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_GetSize(gf_Range1d_t const* _this, double* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_GetMidpoint(gf_Range1d_t const* _this, double* _result) {
    try {
        *_result = _this->GetMidpoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_SetMin(gf_Range1d_t* _this, double min) {
    try {
        _this->SetMin(min);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_SetMax(gf_Range1d_t* _this, double max) {
    try {
        _this->SetMax(max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_IsEmpty(gf_Range1d_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_ExtendBy_00(gf_Range1d_t* _this, double point) {
    try {
        _this->ExtendBy(point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_ExtendBy_01(gf_Range1d_t* _this, gf_Range1d_t const* range) {
    try {
        _this->ExtendBy(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_Contains_00(gf_Range1d_t const* _this, double point, bool* _result) {
    try {
        *_result = _this->Contains(point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_Contains_01(gf_Range1d_t const* _this, gf_Range1d_t const* range, bool* _result) {
    try {
        *_result = _this->Contains(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_IsInside_00(gf_Range1d_t const* _this, double point, bool* _result) {
    try {
        *_result = _this->IsInside(point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_IsInside_01(gf_Range1d_t const* _this, gf_Range1d_t const* range, bool* _result) {
    try {
        *_result = _this->IsInside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_IsOutside(gf_Range1d_t const* _this, gf_Range1d_t const* range, bool* _result) {
    try {
        *_result = _this->IsOutside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_GetUnion(gf_Range1d_t const* a, gf_Range1d_t const* b, gf_Range1d_t* _result) {
    try {
        *_result = pxr::GfRange1d::GetUnion(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_UnionWith_00(gf_Range1d_t* _this, gf_Range1d_t const* b, gf_Range1d_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_UnionWith_01(gf_Range1d_t* _this, double b, gf_Range1d_t const** _result) {
    try {
        *_result = &_this->UnionWith(b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_Union_00(gf_Range1d_t const* a, gf_Range1d_t const* b, gf_Range1d_t* _result) {
    try {
        *_result = pxr::GfRange1d::Union(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_Union_01(gf_Range1d_t* _this, gf_Range1d_t const* b, gf_Range1d_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_Union_02(gf_Range1d_t* _this, double b, gf_Range1d_t const** _result) {
    try {
        *_result = &_this->Union(b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_GetIntersection(gf_Range1d_t const* a, gf_Range1d_t const* b, gf_Range1d_t* _result) {
    try {
        *_result = pxr::GfRange1d::GetIntersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_Intersection_00(gf_Range1d_t const* a, gf_Range1d_t const* b, gf_Range1d_t* _result) {
    try {
        *_result = pxr::GfRange1d::Intersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_Intersection_01(gf_Range1d_t* _this, gf_Range1d_t const* b, gf_Range1d_t const** _result) {
    try {
        *_result = &_this->Intersection(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_IntersectWith(gf_Range1d_t* _this, gf_Range1d_t const* b, gf_Range1d_t const** _result) {
    try {
        *_result = &_this->IntersectWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_add_assign(gf_Range1d_t* _this, gf_Range1d_t const* b, gf_Range1d_t** _result) {
    try {
        *_result = &_this->operator+=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_sub_assign(gf_Range1d_t* _this, gf_Range1d_t const* b, gf_Range1d_t** _result) {
    try {
        *_result = &_this->operator-=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_mul_assign(gf_Range1d_t* _this, double m, gf_Range1d_t** _result) {
    try {
        *_result = &_this->operator*=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_div_assign(gf_Range1d_t* _this, double m, gf_Range1d_t** _result) {
    try {
        *_result = &_this->operator/=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_add(gf_Range1d_t const* _this, gf_Range1d_t const* b, gf_Range1d_t* _result) {
    try {
        *_result = _this->operator+(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_sub(gf_Range1d_t const* _this, gf_Range1d_t const* b, gf_Range1d_t* _result) {
    try {
        *_result = _this->operator-(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_eq_00(gf_Range1d_t const* _this, gf_Range1d_t const* b, bool* _result) {
    try {
        *_result = _this->operator==(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_eq_01(gf_Range1d_t const* _this, gf_Range1f_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_neq_00(gf_Range1d_t const* _this, gf_Range1d_t const* b, bool* _result) {
    try {
        *_result = _this->operator!=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_neq_01(gf_Range1d_t const* _this, gf_Range1f_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_GetDistanceSquared(gf_Range1d_t const* _this, double p, double* _result) {
    try {
        *_result = _this->GetDistanceSquared(p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_op_assign_00(gf_Range1d_t* _this, gf_Range1d_t const* param00, gf_Range1d_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range1d_op_assign_01(gf_Range1d_t* _this, gf_Range1d_t* param00, gf_Range1d_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range1d_default(gf_Range1d_t* _result) {
    try {
        new (_result) pxr::GfRange1d();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_ctor_01(double min, double max, gf_Range1d_t* _result) {
    try {
        new (_result) pxr::GfRange1d(min, max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1d_ctor_02(gf_Range1f_t const* other, gf_Range1d_t* _result) {
    try {
        new (_result) pxr::GfRange1d(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_SetEmpty(gf_Range1f_t* _this) {
    try {
        _this->SetEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_GetMin(gf_Range1f_t const* _this, float* _result) {
    try {
        *_result = _this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_GetMax(gf_Range1f_t const* _this, float* _result) {
    try {
        *_result = _this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_GetSize(gf_Range1f_t const* _this, float* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_GetMidpoint(gf_Range1f_t const* _this, float* _result) {
    try {
        *_result = _this->GetMidpoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_SetMin(gf_Range1f_t* _this, float min) {
    try {
        _this->SetMin(min);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_SetMax(gf_Range1f_t* _this, float max) {
    try {
        _this->SetMax(max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_IsEmpty(gf_Range1f_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_ExtendBy_00(gf_Range1f_t* _this, float point) {
    try {
        _this->ExtendBy(point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_ExtendBy_01(gf_Range1f_t* _this, gf_Range1f_t const* range) {
    try {
        _this->ExtendBy(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_Contains_00(gf_Range1f_t const* _this, float point, bool* _result) {
    try {
        *_result = _this->Contains(point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_Contains_01(gf_Range1f_t const* _this, gf_Range1f_t const* range, bool* _result) {
    try {
        *_result = _this->Contains(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_IsInside_00(gf_Range1f_t const* _this, float point, bool* _result) {
    try {
        *_result = _this->IsInside(point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_IsInside_01(gf_Range1f_t const* _this, gf_Range1f_t const* range, bool* _result) {
    try {
        *_result = _this->IsInside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_IsOutside(gf_Range1f_t const* _this, gf_Range1f_t const* range, bool* _result) {
    try {
        *_result = _this->IsOutside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_GetUnion(gf_Range1f_t const* a, gf_Range1f_t const* b, gf_Range1f_t* _result) {
    try {
        *_result = pxr::GfRange1f::GetUnion(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_UnionWith_00(gf_Range1f_t* _this, gf_Range1f_t const* b, gf_Range1f_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_UnionWith_01(gf_Range1f_t* _this, float b, gf_Range1f_t const** _result) {
    try {
        *_result = &_this->UnionWith(b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_Union_00(gf_Range1f_t const* a, gf_Range1f_t const* b, gf_Range1f_t* _result) {
    try {
        *_result = pxr::GfRange1f::Union(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_Union_01(gf_Range1f_t* _this, gf_Range1f_t const* b, gf_Range1f_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_Union_02(gf_Range1f_t* _this, float b, gf_Range1f_t const** _result) {
    try {
        *_result = &_this->Union(b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_GetIntersection(gf_Range1f_t const* a, gf_Range1f_t const* b, gf_Range1f_t* _result) {
    try {
        *_result = pxr::GfRange1f::GetIntersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_Intersection_00(gf_Range1f_t const* a, gf_Range1f_t const* b, gf_Range1f_t* _result) {
    try {
        *_result = pxr::GfRange1f::Intersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_Intersection_01(gf_Range1f_t* _this, gf_Range1f_t const* b, gf_Range1f_t const** _result) {
    try {
        *_result = &_this->Intersection(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_IntersectWith(gf_Range1f_t* _this, gf_Range1f_t const* b, gf_Range1f_t const** _result) {
    try {
        *_result = &_this->IntersectWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_add_assign(gf_Range1f_t* _this, gf_Range1f_t const* b, gf_Range1f_t** _result) {
    try {
        *_result = &_this->operator+=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_sub_assign(gf_Range1f_t* _this, gf_Range1f_t const* b, gf_Range1f_t** _result) {
    try {
        *_result = &_this->operator-=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_mul_assign(gf_Range1f_t* _this, double m, gf_Range1f_t** _result) {
    try {
        *_result = &_this->operator*=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_div_assign(gf_Range1f_t* _this, double m, gf_Range1f_t** _result) {
    try {
        *_result = &_this->operator/=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_add(gf_Range1f_t const* _this, gf_Range1f_t const* b, gf_Range1f_t* _result) {
    try {
        *_result = _this->operator+(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_sub(gf_Range1f_t const* _this, gf_Range1f_t const* b, gf_Range1f_t* _result) {
    try {
        *_result = _this->operator-(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_eq_00(gf_Range1f_t const* _this, gf_Range1f_t const* b, bool* _result) {
    try {
        *_result = _this->operator==(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_eq_01(gf_Range1f_t const* _this, gf_Range1d_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_neq_00(gf_Range1f_t const* _this, gf_Range1f_t const* b, bool* _result) {
    try {
        *_result = _this->operator!=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_neq_01(gf_Range1f_t const* _this, gf_Range1d_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_GetDistanceSquared(gf_Range1f_t const* _this, float p, double* _result) {
    try {
        *_result = _this->GetDistanceSquared(p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_op_assign_00(gf_Range1f_t* _this, gf_Range1f_t const* param00, gf_Range1f_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range1f_op_assign_01(gf_Range1f_t* _this, gf_Range1f_t* param00, gf_Range1f_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range1f_default(gf_Range1f_t* _result) {
    try {
        new (_result) pxr::GfRange1f();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_ctor_01(float min, float max, gf_Range1f_t* _result) {
    try {
        new (_result) pxr::GfRange1f(min, max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range1f_ctor_02(gf_Range1d_t const* other, gf_Range1f_t* _result) {
    try {
        new (_result) pxr::GfRange1f(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_SetEmpty(gf_Range2d_t* _this) {
    try {
        _this->SetEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetMin(gf_Range2d_t const* _this, gf_Vec2d_t const** _result) {
    try {
        *_result = &_this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetMax(gf_Range2d_t const* _this, gf_Vec2d_t const** _result) {
    try {
        *_result = &_this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetSize(gf_Range2d_t const* _this, gf_Vec2d_t* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetMidpoint(gf_Range2d_t const* _this, gf_Vec2d_t* _result) {
    try {
        *_result = _this->GetMidpoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_SetMin(gf_Range2d_t* _this, gf_Vec2d_t const* min) {
    try {
        _this->SetMin(*min);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_SetMax(gf_Range2d_t* _this, gf_Vec2d_t const* max) {
    try {
        _this->SetMax(*max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_IsEmpty(gf_Range2d_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_ExtendBy_00(gf_Range2d_t* _this, gf_Vec2d_t const* point) {
    try {
        _this->ExtendBy(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_ExtendBy_01(gf_Range2d_t* _this, gf_Range2d_t const* range) {
    try {
        _this->ExtendBy(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_Contains_00(gf_Range2d_t const* _this, gf_Vec2d_t const* point, bool* _result) {
    try {
        *_result = _this->Contains(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_Contains_01(gf_Range2d_t const* _this, gf_Range2d_t const* range, bool* _result) {
    try {
        *_result = _this->Contains(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_IsInside_00(gf_Range2d_t const* _this, gf_Vec2d_t const* point, bool* _result) {
    try {
        *_result = _this->IsInside(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_IsInside_01(gf_Range2d_t const* _this, gf_Range2d_t const* range, bool* _result) {
    try {
        *_result = _this->IsInside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_IsOutside(gf_Range2d_t const* _this, gf_Range2d_t const* range, bool* _result) {
    try {
        *_result = _this->IsOutside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetUnion(gf_Range2d_t const* a, gf_Range2d_t const* b, gf_Range2d_t* _result) {
    try {
        *_result = pxr::GfRange2d::GetUnion(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_UnionWith_00(gf_Range2d_t* _this, gf_Range2d_t const* b, gf_Range2d_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_UnionWith_01(gf_Range2d_t* _this, gf_Vec2d_t const* b, gf_Range2d_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_Union_00(gf_Range2d_t const* a, gf_Range2d_t const* b, gf_Range2d_t* _result) {
    try {
        *_result = pxr::GfRange2d::Union(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_Union_01(gf_Range2d_t* _this, gf_Range2d_t const* b, gf_Range2d_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_Union_02(gf_Range2d_t* _this, gf_Vec2d_t const* b, gf_Range2d_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetIntersection(gf_Range2d_t const* a, gf_Range2d_t const* b, gf_Range2d_t* _result) {
    try {
        *_result = pxr::GfRange2d::GetIntersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_Intersection_00(gf_Range2d_t const* a, gf_Range2d_t const* b, gf_Range2d_t* _result) {
    try {
        *_result = pxr::GfRange2d::Intersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_Intersection_01(gf_Range2d_t* _this, gf_Range2d_t const* b, gf_Range2d_t const** _result) {
    try {
        *_result = &_this->Intersection(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_IntersectWith(gf_Range2d_t* _this, gf_Range2d_t const* b, gf_Range2d_t const** _result) {
    try {
        *_result = &_this->IntersectWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_add_assign(gf_Range2d_t* _this, gf_Range2d_t const* b, gf_Range2d_t** _result) {
    try {
        *_result = &_this->operator+=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_sub_assign(gf_Range2d_t* _this, gf_Range2d_t const* b, gf_Range2d_t** _result) {
    try {
        *_result = &_this->operator-=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_mul_assign(gf_Range2d_t* _this, double m, gf_Range2d_t** _result) {
    try {
        *_result = &_this->operator*=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_div_assign(gf_Range2d_t* _this, double m, gf_Range2d_t** _result) {
    try {
        *_result = &_this->operator/=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_add(gf_Range2d_t const* _this, gf_Range2d_t const* b, gf_Range2d_t* _result) {
    try {
        *_result = _this->operator+(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_sub(gf_Range2d_t const* _this, gf_Range2d_t const* b, gf_Range2d_t* _result) {
    try {
        *_result = _this->operator-(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_eq_00(gf_Range2d_t const* _this, gf_Range2d_t const* b, bool* _result) {
    try {
        *_result = _this->operator==(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_eq_01(gf_Range2d_t const* _this, gf_Range2f_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_neq_00(gf_Range2d_t const* _this, gf_Range2d_t const* b, bool* _result) {
    try {
        *_result = _this->operator!=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_neq_01(gf_Range2d_t const* _this, gf_Range2f_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetDistanceSquared(gf_Range2d_t const* _this, gf_Vec2d_t const* p, double* _result) {
    try {
        *_result = _this->GetDistanceSquared(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetCorner(gf_Range2d_t const* _this, size_t i, gf_Vec2d_t* _result) {
    try {
        *_result = _this->GetCorner(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_GetQuadrant(gf_Range2d_t const* _this, size_t i, gf_Range2d_t* _result) {
    try {
        *_result = _this->GetQuadrant(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_op_assign_00(gf_Range2d_t* _this, gf_Range2d_t const* param00, gf_Range2d_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range2d_op_assign_01(gf_Range2d_t* _this, gf_Range2d_t* param00, gf_Range2d_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range2d_default(gf_Range2d_t* _result) {
    try {
        new (_result) pxr::GfRange2d();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_ctor_01(gf_Vec2d_t const* min, gf_Vec2d_t const* max, gf_Range2d_t* _result) {
    try {
        new (_result) pxr::GfRange2d(*min, *max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2d_ctor_02(gf_Range2f_t const* other, gf_Range2d_t* _result) {
    try {
        new (_result) pxr::GfRange2d(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_SetEmpty(gf_Range2f_t* _this) {
    try {
        _this->SetEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetMin(gf_Range2f_t const* _this, gf_Vec2f_t const** _result) {
    try {
        *_result = &_this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetMax(gf_Range2f_t const* _this, gf_Vec2f_t const** _result) {
    try {
        *_result = &_this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetSize(gf_Range2f_t const* _this, gf_Vec2f_t* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetMidpoint(gf_Range2f_t const* _this, gf_Vec2f_t* _result) {
    try {
        *_result = _this->GetMidpoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_SetMin(gf_Range2f_t* _this, gf_Vec2f_t const* min) {
    try {
        _this->SetMin(*min);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_SetMax(gf_Range2f_t* _this, gf_Vec2f_t const* max) {
    try {
        _this->SetMax(*max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_IsEmpty(gf_Range2f_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_ExtendBy_00(gf_Range2f_t* _this, gf_Vec2f_t const* point) {
    try {
        _this->ExtendBy(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_ExtendBy_01(gf_Range2f_t* _this, gf_Range2f_t const* range) {
    try {
        _this->ExtendBy(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_Contains_00(gf_Range2f_t const* _this, gf_Vec2f_t const* point, bool* _result) {
    try {
        *_result = _this->Contains(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_Contains_01(gf_Range2f_t const* _this, gf_Range2f_t const* range, bool* _result) {
    try {
        *_result = _this->Contains(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_IsInside_00(gf_Range2f_t const* _this, gf_Vec2f_t const* point, bool* _result) {
    try {
        *_result = _this->IsInside(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_IsInside_01(gf_Range2f_t const* _this, gf_Range2f_t const* range, bool* _result) {
    try {
        *_result = _this->IsInside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_IsOutside(gf_Range2f_t const* _this, gf_Range2f_t const* range, bool* _result) {
    try {
        *_result = _this->IsOutside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetUnion(gf_Range2f_t const* a, gf_Range2f_t const* b, gf_Range2f_t* _result) {
    try {
        *_result = pxr::GfRange2f::GetUnion(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_UnionWith_00(gf_Range2f_t* _this, gf_Range2f_t const* b, gf_Range2f_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_UnionWith_01(gf_Range2f_t* _this, gf_Vec2f_t const* b, gf_Range2f_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_Union_00(gf_Range2f_t const* a, gf_Range2f_t const* b, gf_Range2f_t* _result) {
    try {
        *_result = pxr::GfRange2f::Union(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_Union_01(gf_Range2f_t* _this, gf_Range2f_t const* b, gf_Range2f_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_Union_02(gf_Range2f_t* _this, gf_Vec2f_t const* b, gf_Range2f_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetIntersection(gf_Range2f_t const* a, gf_Range2f_t const* b, gf_Range2f_t* _result) {
    try {
        *_result = pxr::GfRange2f::GetIntersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_Intersection_00(gf_Range2f_t const* a, gf_Range2f_t const* b, gf_Range2f_t* _result) {
    try {
        *_result = pxr::GfRange2f::Intersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_Intersection_01(gf_Range2f_t* _this, gf_Range2f_t const* b, gf_Range2f_t const** _result) {
    try {
        *_result = &_this->Intersection(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_IntersectWith(gf_Range2f_t* _this, gf_Range2f_t const* b, gf_Range2f_t const** _result) {
    try {
        *_result = &_this->IntersectWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_add_assign(gf_Range2f_t* _this, gf_Range2f_t const* b, gf_Range2f_t** _result) {
    try {
        *_result = &_this->operator+=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_sub_assign(gf_Range2f_t* _this, gf_Range2f_t const* b, gf_Range2f_t** _result) {
    try {
        *_result = &_this->operator-=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_mul_assign(gf_Range2f_t* _this, double m, gf_Range2f_t** _result) {
    try {
        *_result = &_this->operator*=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_div_assign(gf_Range2f_t* _this, double m, gf_Range2f_t** _result) {
    try {
        *_result = &_this->operator/=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_add(gf_Range2f_t const* _this, gf_Range2f_t const* b, gf_Range2f_t* _result) {
    try {
        *_result = _this->operator+(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_sub(gf_Range2f_t const* _this, gf_Range2f_t const* b, gf_Range2f_t* _result) {
    try {
        *_result = _this->operator-(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_eq_00(gf_Range2f_t const* _this, gf_Range2f_t const* b, bool* _result) {
    try {
        *_result = _this->operator==(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_eq_01(gf_Range2f_t const* _this, gf_Range2d_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_neq_00(gf_Range2f_t const* _this, gf_Range2f_t const* b, bool* _result) {
    try {
        *_result = _this->operator!=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_neq_01(gf_Range2f_t const* _this, gf_Range2d_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetDistanceSquared(gf_Range2f_t const* _this, gf_Vec2f_t const* p, double* _result) {
    try {
        *_result = _this->GetDistanceSquared(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetCorner(gf_Range2f_t const* _this, size_t i, gf_Vec2f_t* _result) {
    try {
        *_result = _this->GetCorner(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_GetQuadrant(gf_Range2f_t const* _this, size_t i, gf_Range2f_t* _result) {
    try {
        *_result = _this->GetQuadrant(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_op_assign_00(gf_Range2f_t* _this, gf_Range2f_t const* param00, gf_Range2f_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range2f_op_assign_01(gf_Range2f_t* _this, gf_Range2f_t* param00, gf_Range2f_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range2f_default(gf_Range2f_t* _result) {
    try {
        new (_result) pxr::GfRange2f();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_ctor_01(gf_Vec2f_t const* min, gf_Vec2f_t const* max, gf_Range2f_t* _result) {
    try {
        new (_result) pxr::GfRange2f(*min, *max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range2f_ctor_02(gf_Range2d_t const* other, gf_Range2f_t* _result) {
    try {
        new (_result) pxr::GfRange2f(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_SetEmpty(gf_Range3d_t* _this) {
    try {
        _this->SetEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetMin(gf_Range3d_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetMax(gf_Range3d_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetSize(gf_Range3d_t const* _this, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetMidpoint(gf_Range3d_t const* _this, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetMidpoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_SetMin(gf_Range3d_t* _this, gf_Vec3d_t const* min) {
    try {
        _this->SetMin(*min);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_SetMax(gf_Range3d_t* _this, gf_Vec3d_t const* max) {
    try {
        _this->SetMax(*max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_IsEmpty(gf_Range3d_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_ExtendBy_00(gf_Range3d_t* _this, gf_Vec3d_t const* point) {
    try {
        _this->ExtendBy(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_ExtendBy_01(gf_Range3d_t* _this, gf_Range3d_t const* range) {
    try {
        _this->ExtendBy(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_Contains_00(gf_Range3d_t const* _this, gf_Vec3d_t const* point, bool* _result) {
    try {
        *_result = _this->Contains(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_Contains_01(gf_Range3d_t const* _this, gf_Range3d_t const* range, bool* _result) {
    try {
        *_result = _this->Contains(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_IsInside_00(gf_Range3d_t const* _this, gf_Vec3d_t const* point, bool* _result) {
    try {
        *_result = _this->IsInside(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_IsInside_01(gf_Range3d_t const* _this, gf_Range3d_t const* range, bool* _result) {
    try {
        *_result = _this->IsInside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_IsOutside(gf_Range3d_t const* _this, gf_Range3d_t const* range, bool* _result) {
    try {
        *_result = _this->IsOutside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetUnion(gf_Range3d_t const* a, gf_Range3d_t const* b, gf_Range3d_t* _result) {
    try {
        *_result = pxr::GfRange3d::GetUnion(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_UnionWith_00(gf_Range3d_t* _this, gf_Range3d_t const* b, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_UnionWith_01(gf_Range3d_t* _this, gf_Vec3d_t const* b, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_Union_00(gf_Range3d_t const* a, gf_Range3d_t const* b, gf_Range3d_t* _result) {
    try {
        *_result = pxr::GfRange3d::Union(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_Union_01(gf_Range3d_t* _this, gf_Range3d_t const* b, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_Union_02(gf_Range3d_t* _this, gf_Vec3d_t const* b, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetIntersection(gf_Range3d_t const* a, gf_Range3d_t const* b, gf_Range3d_t* _result) {
    try {
        *_result = pxr::GfRange3d::GetIntersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_Intersection_00(gf_Range3d_t const* a, gf_Range3d_t const* b, gf_Range3d_t* _result) {
    try {
        *_result = pxr::GfRange3d::Intersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_Intersection_01(gf_Range3d_t* _this, gf_Range3d_t const* b, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->Intersection(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_IntersectWith(gf_Range3d_t* _this, gf_Range3d_t const* b, gf_Range3d_t const** _result) {
    try {
        *_result = &_this->IntersectWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_add_assign(gf_Range3d_t* _this, gf_Range3d_t const* b, gf_Range3d_t** _result) {
    try {
        *_result = &_this->operator+=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_sub_assign(gf_Range3d_t* _this, gf_Range3d_t const* b, gf_Range3d_t** _result) {
    try {
        *_result = &_this->operator-=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_mul_assign(gf_Range3d_t* _this, double m, gf_Range3d_t** _result) {
    try {
        *_result = &_this->operator*=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_div_assign(gf_Range3d_t* _this, double m, gf_Range3d_t** _result) {
    try {
        *_result = &_this->operator/=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_add(gf_Range3d_t const* _this, gf_Range3d_t const* b, gf_Range3d_t* _result) {
    try {
        *_result = _this->operator+(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_sub(gf_Range3d_t const* _this, gf_Range3d_t const* b, gf_Range3d_t* _result) {
    try {
        *_result = _this->operator-(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_eq_00(gf_Range3d_t const* _this, gf_Range3d_t const* b, bool* _result) {
    try {
        *_result = _this->operator==(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_eq_01(gf_Range3d_t const* _this, gf_Range3f_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_neq_00(gf_Range3d_t const* _this, gf_Range3d_t const* b, bool* _result) {
    try {
        *_result = _this->operator!=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_neq_01(gf_Range3d_t const* _this, gf_Range3f_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetDistanceSquared(gf_Range3d_t const* _this, gf_Vec3d_t const* p, double* _result) {
    try {
        *_result = _this->GetDistanceSquared(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetCorner(gf_Range3d_t const* _this, size_t i, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetCorner(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_GetOctant(gf_Range3d_t const* _this, size_t i, gf_Range3d_t* _result) {
    try {
        *_result = _this->GetOctant(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_op_assign_00(gf_Range3d_t* _this, gf_Range3d_t const* param00, gf_Range3d_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range3d_op_assign_01(gf_Range3d_t* _this, gf_Range3d_t* param00, gf_Range3d_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Range3d_default(gf_Range3d_t* _result) {
    try {
        new (_result) pxr::GfRange3d();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_ctor_01(gf_Vec3d_t const* min, gf_Vec3d_t const* max, gf_Range3d_t* _result) {
    try {
        new (_result) pxr::GfRange3d(*min, *max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3d_ctor_02(gf_Range3f_t const* other, gf_Range3d_t* _result) {
    try {
        new (_result) pxr::GfRange3d(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_SetEmpty(gf_Range3f_t* _this) {
    try {
        _this->SetEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetMin(gf_Range3f_t const* _this, gf_Vec3f_t const** _result) {
    try {
        *_result = &_this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetMax(gf_Range3f_t const* _this, gf_Vec3f_t const** _result) {
    try {
        *_result = &_this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetSize(gf_Range3f_t const* _this, gf_Vec3f_t* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetMidpoint(gf_Range3f_t const* _this, gf_Vec3f_t* _result) {
    try {
        *_result = _this->GetMidpoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_SetMin(gf_Range3f_t* _this, gf_Vec3f_t const* min) {
    try {
        _this->SetMin(*min);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_SetMax(gf_Range3f_t* _this, gf_Vec3f_t const* max) {
    try {
        _this->SetMax(*max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_IsEmpty(gf_Range3f_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_ExtendBy_00(gf_Range3f_t* _this, gf_Vec3f_t const* point) {
    try {
        _this->ExtendBy(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_ExtendBy_01(gf_Range3f_t* _this, gf_Range3f_t const* range) {
    try {
        _this->ExtendBy(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_Contains_00(gf_Range3f_t const* _this, gf_Vec3f_t const* point, bool* _result) {
    try {
        *_result = _this->Contains(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_Contains_01(gf_Range3f_t const* _this, gf_Range3f_t const* range, bool* _result) {
    try {
        *_result = _this->Contains(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_IsInside_00(gf_Range3f_t const* _this, gf_Vec3f_t const* point, bool* _result) {
    try {
        *_result = _this->IsInside(*point);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_IsInside_01(gf_Range3f_t const* _this, gf_Range3f_t const* range, bool* _result) {
    try {
        *_result = _this->IsInside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_IsOutside(gf_Range3f_t const* _this, gf_Range3f_t const* range, bool* _result) {
    try {
        *_result = _this->IsOutside(*range);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetUnion(gf_Range3f_t const* a, gf_Range3f_t const* b, gf_Range3f_t* _result) {
    try {
        *_result = pxr::GfRange3f::GetUnion(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_UnionWith_00(gf_Range3f_t* _this, gf_Range3f_t const* b, gf_Range3f_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_UnionWith_01(gf_Range3f_t* _this, gf_Vec3f_t const* b, gf_Range3f_t const** _result) {
    try {
        *_result = &_this->UnionWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_Union_00(gf_Range3f_t const* a, gf_Range3f_t const* b, gf_Range3f_t* _result) {
    try {
        *_result = pxr::GfRange3f::Union(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_Union_01(gf_Range3f_t* _this, gf_Range3f_t const* b, gf_Range3f_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_Union_02(gf_Range3f_t* _this, gf_Vec3f_t const* b, gf_Range3f_t const** _result) {
    try {
        *_result = &_this->Union(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetIntersection(gf_Range3f_t const* a, gf_Range3f_t const* b, gf_Range3f_t* _result) {
    try {
        *_result = pxr::GfRange3f::GetIntersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_Intersection_00(gf_Range3f_t const* a, gf_Range3f_t const* b, gf_Range3f_t* _result) {
    try {
        *_result = pxr::GfRange3f::Intersection(*a, *b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_Intersection_01(gf_Range3f_t* _this, gf_Range3f_t const* b, gf_Range3f_t const** _result) {
    try {
        *_result = &_this->Intersection(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_IntersectWith(gf_Range3f_t* _this, gf_Range3f_t const* b, gf_Range3f_t const** _result) {
    try {
        *_result = &_this->IntersectWith(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_add_assign(gf_Range3f_t* _this, gf_Range3f_t const* b, gf_Range3f_t** _result) {
    try {
        *_result = &_this->operator+=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_sub_assign(gf_Range3f_t* _this, gf_Range3f_t const* b, gf_Range3f_t** _result) {
    try {
        *_result = &_this->operator-=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_mul_assign(gf_Range3f_t* _this, double m, gf_Range3f_t** _result) {
    try {
        *_result = &_this->operator*=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_div_assign(gf_Range3f_t* _this, double m, gf_Range3f_t** _result) {
    try {
        *_result = &_this->operator/=(m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_add(gf_Range3f_t const* _this, gf_Range3f_t const* b, gf_Range3f_t* _result) {
    try {
        *_result = _this->operator+(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_sub(gf_Range3f_t const* _this, gf_Range3f_t const* b, gf_Range3f_t* _result) {
    try {
        *_result = _this->operator-(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_eq_00(gf_Range3f_t const* _this, gf_Range3f_t const* b, bool* _result) {
    try {
        *_result = _this->operator==(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_eq_01(gf_Range3f_t const* _this, gf_Range3d_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_neq_00(gf_Range3f_t const* _this, gf_Range3f_t const* b, bool* _result) {
    try {
        *_result = _this->operator!=(*b);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_op_neq_01(gf_Range3f_t const* _this, gf_Range3d_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetDistanceSquared(gf_Range3f_t const* _this, gf_Vec3f_t const* p, double* _result) {
    try {
        *_result = _this->GetDistanceSquared(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetCorner(gf_Range3f_t const* _this, size_t i, gf_Vec3f_t* _result) {
    try {
        *_result = _this->GetCorner(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_GetOctant(gf_Range3f_t const* _this, size_t i, gf_Range3f_t* _result) {
    try {
        *_result = _this->GetOctant(i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_default(gf_Range3f_t* _result) {
    try {
        new (_result) pxr::GfRange3f();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_ctor_01(gf_Vec3f_t const* min, gf_Vec3f_t const* max, gf_Range3f_t* _result) {
    try {
        new (_result) pxr::GfRange3f(*min, *max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Range3f_ctor_02(gf_Range3d_t const* other, gf_Range3f_t* _result) {
    try {
        new (_result) pxr::GfRange3f(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_SetPointAndDirection(gf_Ray_t* _this, gf_Vec3d_t const* startPoint, gf_Vec3d_t const* direction) {
    try {
        _this->SetPointAndDirection(*startPoint, *direction);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_SetEnds(gf_Ray_t* _this, gf_Vec3d_t const* startPoint, gf_Vec3d_t const* endPoint) {
    try {
        _this->SetEnds(*startPoint, *endPoint);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_GetStartPoint(gf_Ray_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetStartPoint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_GetDirection(gf_Ray_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetDirection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_GetPoint(gf_Ray_t const* _this, double distance, gf_Vec3d_t* _result) {
    try {
        *_result = _this->GetPoint(distance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Transform(gf_Ray_t* _this, gf_Matrix4d_t const* matrix, gf_Ray_t** _result) {
    try {
        *_result = &_this->Transform(*matrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_FindClosestPoint(gf_Ray_t const* _this, gf_Vec3d_t const* point, double* rayDistance, gf_Vec3d_t* _result) {
    try {
        *_result = _this->FindClosestPoint(*point, rayDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_op_eq(gf_Ray_t const* _this, gf_Ray_t const* r, bool* _result) {
    try {
        *_result = _this->operator==(*r);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_op_neq(gf_Ray_t const* _this, gf_Ray_t const* r, bool* _result) {
    try {
        *_result = _this->operator!=(*r);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Intersect_00(gf_Ray_t const* _this, gf_Vec3d_t const* p0, gf_Vec3d_t const* p1, gf_Vec3d_t const* p2, double* distance, gf_Vec3d_t* barycentricCoords, bool* frontFacing, double maxDist, bool* _result) {
    try {
        *_result = _this->Intersect(*p0, *p1, *p2, distance, barycentricCoords, frontFacing, maxDist);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Intersect_plane(gf_Ray_t const* _this, gf_Plane_t const* plane, double* distance, bool* frontFacing, bool* _result) {
    try {
        *_result = _this->Intersect(*plane, distance, frontFacing);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Intersect_range3d(gf_Ray_t const* _this, gf_Range3d_t const* box, double* enterDistance, double* exitDistance, bool* _result) {
    try {
        *_result = _this->Intersect(*box, enterDistance, exitDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Intersect_bbox3d(gf_Ray_t const* _this, gf_BBox3d_t const* box, double* enterDistance, double* exitDistance, bool* _result) {
    try {
        *_result = _this->Intersect(*box, enterDistance, exitDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Intersect_04(gf_Ray_t const* _this, gf_Vec3d_t const* center, double radius, double* enterDistance, double* exitDistance, bool* _result) {
    try {
        *_result = _this->Intersect(*center, radius, enterDistance, exitDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Intersect_05(gf_Ray_t const* _this, gf_Vec3d_t const* origin, gf_Vec3d_t const* axis, double const radius, double* enterDistance, double* exitDistance, bool* _result) {
    try {
        *_result = _this->Intersect(*origin, *axis, radius, enterDistance, exitDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_Intersect_06(gf_Ray_t const* _this, gf_Vec3d_t const* origin, gf_Vec3d_t const* axis, double const radius, double const height, double* enterDistance, double* exitDistance, bool* _result) {
    try {
        *_result = _this->Intersect(*origin, *axis, radius, height, enterDistance, exitDistance);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_default(gf_Ray_t* _result) {
    try {
        new (_result) pxr::GfRay();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Ray_ctor_01(gf_Vec3d_t const* startPoint, gf_Vec3d_t const* direction, gf_Ray_t* _result) {
    try {
        new (_result) pxr::GfRay(*startPoint, *direction);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_IsNull(gf_Rect2i_t const* _this, bool* _result) {
    try {
        *_result = _this->IsNull();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_IsEmpty(gf_Rect2i_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_IsValid(gf_Rect2i_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetNormalized(gf_Rect2i_t const* _this, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(_this->GetNormalized());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetMin(gf_Rect2i_t const* _this, gf_Vec2i_t const** _result) {
    try {
        *_result = &_this->GetMin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetMax(gf_Rect2i_t const* _this, gf_Vec2i_t const** _result) {
    try {
        *_result = &_this->GetMax();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetMinX(gf_Rect2i_t const* _this, int* _result) {
    try {
        *_result = _this->GetMinX();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_SetMinX(gf_Rect2i_t* _this, int x) {
    try {
        _this->SetMinX(x);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetMaxX(gf_Rect2i_t const* _this, int* _result) {
    try {
        *_result = _this->GetMaxX();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_SetMaxX(gf_Rect2i_t* _this, int x) {
    try {
        _this->SetMaxX(x);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetMinY(gf_Rect2i_t const* _this, int* _result) {
    try {
        *_result = _this->GetMinY();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_SetMinY(gf_Rect2i_t* _this, int y) {
    try {
        _this->SetMinY(y);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetMaxY(gf_Rect2i_t const* _this, int* _result) {
    try {
        *_result = _this->GetMaxY();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_SetMaxY(gf_Rect2i_t* _this, int y) {
    try {
        _this->SetMaxY(y);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_SetMin(gf_Rect2i_t* _this, gf_Vec2i_t const* min) {
    try {
        _this->SetMin(*min);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_SetMax(gf_Rect2i_t* _this, gf_Vec2i_t const* max) {
    try {
        _this->SetMax(*max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetCenter(gf_Rect2i_t const* _this, gf_Vec2i_t* _result) {
    try {
        *_result = _this->GetCenter();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_Translate(gf_Rect2i_t* _this, gf_Vec2i_t const* displacement) {
    try {
        _this->Translate(*displacement);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetArea(gf_Rect2i_t const* _this, unsigned long* _result) {
    try {
        *_result = _this->GetArea();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetSize(gf_Rect2i_t const* _this, gf_Vec2i_t* _result) {
    try {
        *_result = _this->GetSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetWidth(gf_Rect2i_t const* _this, int* _result) {
    try {
        *_result = _this->GetWidth();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetHeight(gf_Rect2i_t const* _this, int* _result) {
    try {
        *_result = _this->GetHeight();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetIntersection(gf_Rect2i_t const* _this, gf_Rect2i_t const* that, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(_this->GetIntersection(*that));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_Intersect(gf_Rect2i_t const* _this, gf_Rect2i_t const* that, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(_this->Intersect(*that));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_GetUnion(gf_Rect2i_t const* _this, gf_Rect2i_t const* that, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(_this->GetUnion(*that));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_Union(gf_Rect2i_t const* _this, gf_Rect2i_t const* that, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(_this->Union(*that));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_Contains(gf_Rect2i_t const* _this, gf_Vec2i_t const* p, bool* _result) {
    try {
        *_result = _this->Contains(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_op_add_assign(gf_Rect2i_t* _this, gf_Rect2i_t const* that, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(_this->operator+=(*that));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_op_assign_00(gf_Rect2i_t* _this, gf_Rect2i_t const* param00, gf_Rect2i_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Rect2i_op_assign_01(gf_Rect2i_t* _this, gf_Rect2i_t* param00, gf_Rect2i_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Rect2i_default(gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_ctor_01(gf_Vec2i_t const* min, gf_Vec2i_t const* max, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(*min, *max);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_ctor_02(gf_Vec2i_t const* min, int width, int height, gf_Rect2i_t** _result) {
    try {
        *_result = new pxr::GfRect2i(*min, width, height);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rect2i_dtor(gf_Rect2i_t* _this) {
    delete _this;
    return 0;
}

int gf_Rotation_SetAxisAngle(gf_Rotation_t* _this, gf_Vec3d_t const* axis, double angle, gf_Rotation_t** _result) {
    try {
        *_result = &_this->SetAxisAngle(*axis, angle);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_SetQuat(gf_Rotation_t* _this, gf_Quatd_t const* quat, gf_Rotation_t** _result) {
    try {
        *_result = &_this->SetQuat(*quat);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_SetQuaternion(gf_Rotation_t* _this, gf_Quaternion_t const* quat, gf_Rotation_t** _result) {
    try {
        *_result = &_this->SetQuaternion(*quat);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_SetRotateInto(gf_Rotation_t* _this, gf_Vec3d_t const* rotateFrom, gf_Vec3d_t const* rotateTo, gf_Rotation_t** _result) {
    try {
        *_result = &_this->SetRotateInto(*rotateFrom, *rotateTo);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_SetIdentity(gf_Rotation_t* _this, gf_Rotation_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_GetAxis(gf_Rotation_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetAxis();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_GetAngle(gf_Rotation_t const* _this, double* _result) {
    try {
        *_result = _this->GetAngle();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_GetQuaternion(gf_Rotation_t const* _this, gf_Quaternion_t** _result) {
    try {
        *_result = new pxr::GfQuaternion(_this->GetQuaternion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_GetQuat(gf_Rotation_t const* _this, gf_Quatd_t* _result) {
    try {
        *_result = _this->GetQuat();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_GetInverse(gf_Rotation_t const* _this, gf_Rotation_t* _result) {
    try {
        *_result = _this->GetInverse();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_Decompose(gf_Rotation_t const* _this, gf_Vec3d_t const* axis0, gf_Vec3d_t const* axis1, gf_Vec3d_t const* axis2, gf_Vec3d_t* _result) {
    try {
        *_result = _this->Decompose(*axis0, *axis1, *axis2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_DecomposeRotation(gf_Matrix4d_t const* rot, gf_Vec3d_t const* TwAxis, gf_Vec3d_t const* FBAxis, gf_Vec3d_t const* LRAxis, double handedness, double* thetaTw, double* thetaFB, double* thetaLR, double* thetaSw, bool useHint, double const* swShift) {
    try {
        pxr::GfRotation::DecomposeRotation(*rot, *TwAxis, *FBAxis, *LRAxis, handedness, thetaTw, thetaFB, thetaLR, thetaSw, useHint, swShift);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_RotateOntoProjected(gf_Vec3d_t const* v1, gf_Vec3d_t const* v2, gf_Vec3d_t const* axis, gf_Rotation_t* _result) {
    try {
        *_result = pxr::GfRotation::RotateOntoProjected(*v1, *v2, *axis);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_MatchClosestEulerRotation(double targetTw, double targetFB, double targetLR, double targetSw, double* thetaTw, double* thetaFB, double* thetaLR, double* thetaSw) {
    try {
        pxr::GfRotation::MatchClosestEulerRotation(targetTw, targetFB, targetLR, targetSw, thetaTw, thetaFB, thetaLR, thetaSw);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_TransformDir_00(gf_Rotation_t const* _this, gf_Vec3f_t const* vec, gf_Vec3f_t* _result) {
    try {
        *_result = _this->TransformDir(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_TransformDir_01(gf_Rotation_t const* _this, gf_Vec3d_t const* vec, gf_Vec3d_t* _result) {
    try {
        *_result = _this->TransformDir(*vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_op_eq(gf_Rotation_t const* _this, gf_Rotation_t const* r, bool* _result) {
    try {
        *_result = _this->operator==(*r);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_op_neq(gf_Rotation_t const* _this, gf_Rotation_t const* r, bool* _result) {
    try {
        *_result = _this->operator!=(*r);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_op_mul_assign_00(gf_Rotation_t* _this, gf_Rotation_t const* r, gf_Rotation_t** _result) {
    try {
        *_result = &_this->operator*=(*r);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_op_mul_assign_01(gf_Rotation_t* _this, double scale, gf_Rotation_t** _result) {
    try {
        *_result = &_this->operator*=(scale);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_op_div_assign(gf_Rotation_t* _this, double scale, gf_Rotation_t** _result) {
    try {
        *_result = &_this->operator/=(scale);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_default(gf_Rotation_t* _result) {
    try {
        new (_result) pxr::GfRotation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_from_axis_angle(gf_Vec3d_t const* axis, double angle, gf_Rotation_t* _result) {
    try {
        new (_result) pxr::GfRotation(*axis, angle);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_from_quaternion(gf_Quaternion_t const* quaternion, gf_Rotation_t* _result) {
    try {
        new (_result) pxr::GfRotation(*quaternion);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_from_quatd(gf_Quatd_t const* quat, gf_Rotation_t* _result) {
    try {
        new (_result) pxr::GfRotation(*quat);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Rotation_from_to(gf_Vec3d_t const* rotateFrom, gf_Vec3d_t const* rotateTo, gf_Rotation_t* _result) {
    try {
        new (_result) pxr::GfRotation(*rotateFrom, *rotateTo);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_Set_00(gf_Size2_t* _this, size_t const* v, gf_Size2_t** _result) {
    try {
        *_result = &_this->Set(v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_Set_01(gf_Size2_t* _this, size_t v0, size_t v1, gf_Size2_t** _result) {
    try {
        *_result = &_this->Set(v0, v1);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_index_00(gf_Size2_t* _this, size_t i, size_t** _result) {
    try {
        *_result = &_this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_index_01(gf_Size2_t const* _this, size_t i, size_t const** _result) {
    try {
        *_result = &_this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_eq(gf_Size2_t const* _this, gf_Size2_t const* v, bool* _result) {
    try {
        *_result = _this->operator==(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_neq(gf_Size2_t const* _this, gf_Size2_t const* v, bool* _result) {
    try {
        *_result = _this->operator!=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_add_assign(gf_Size2_t* _this, gf_Size2_t const* v, gf_Size2_t** _result) {
    try {
        *_result = &_this->operator+=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_sub_assign(gf_Size2_t* _this, gf_Size2_t const* v, gf_Size2_t** _result) {
    try {
        *_result = &_this->operator-=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_mul_assign_00(gf_Size2_t* _this, gf_Size2_t const* v, gf_Size2_t** _result) {
    try {
        *_result = &_this->operator*=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_mul_assign_01(gf_Size2_t* _this, int d, gf_Size2_t** _result) {
    try {
        *_result = &_this->operator*=(d);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_div_assign(gf_Size2_t* _this, int d, gf_Size2_t** _result) {
    try {
        *_result = &_this->operator/=(d);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_op_assign(gf_Size2_t* _this, gf_Size2_t const* param00, gf_Size2_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Size2_default(gf_Size2_t** _result) {
    try {
        *_result = new pxr::GfSize2();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_ctor_01(gf_Vec2i_t const* o, gf_Size2_t** _result) {
    try {
        *_result = new pxr::GfSize2(*o);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_ctor_02(unsigned long const* v, gf_Size2_t** _result) {
    try {
        *_result = new pxr::GfSize2(v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_ctor_03(unsigned long v0, unsigned long v1, gf_Size2_t** _result) {
    try {
        *_result = new pxr::GfSize2(v0, v1);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size2_dtor(gf_Size2_t* _this) {
    delete _this;
    return 0;
}

int gf_Size3_Set_00(gf_Size3_t* _this, size_t const* v, gf_Size3_t** _result) {
    try {
        *_result = &_this->Set(v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_Set_01(gf_Size3_t* _this, size_t v0, size_t v1, size_t v2, gf_Size3_t** _result) {
    try {
        *_result = &_this->Set(v0, v1, v2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_index_00(gf_Size3_t* _this, size_t i, size_t** _result) {
    try {
        *_result = &_this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_index_01(gf_Size3_t const* _this, size_t i, size_t const** _result) {
    try {
        *_result = &_this->operator[](i);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_eq(gf_Size3_t const* _this, gf_Size3_t const* v, bool* _result) {
    try {
        *_result = _this->operator==(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_neq(gf_Size3_t const* _this, gf_Size3_t const* v, bool* _result) {
    try {
        *_result = _this->operator!=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_add_assign(gf_Size3_t* _this, gf_Size3_t const* v, gf_Size3_t** _result) {
    try {
        *_result = &_this->operator+=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_sub_assign(gf_Size3_t* _this, gf_Size3_t const* v, gf_Size3_t** _result) {
    try {
        *_result = &_this->operator-=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_mul_assign_00(gf_Size3_t* _this, gf_Size3_t const* v, gf_Size3_t** _result) {
    try {
        *_result = &_this->operator*=(*v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_mul_assign_01(gf_Size3_t* _this, size_t d, gf_Size3_t** _result) {
    try {
        *_result = &_this->operator*=(d);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_div_assign(gf_Size3_t* _this, size_t d, gf_Size3_t** _result) {
    try {
        *_result = &_this->operator/=(d);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_op_assign(gf_Size3_t* _this, gf_Size3_t const* param00, gf_Size3_t** _result) {
    *_result = &_this->operator=(*param00);
    return 0;
}

int gf_Size3_default(gf_Size3_t** _result) {
    try {
        *_result = new pxr::GfSize3();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_ctor_01(gf_Vec3i_t const* o, gf_Size3_t** _result) {
    try {
        *_result = new pxr::GfSize3(*o);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_ctor_02(unsigned long const* v, gf_Size3_t** _result) {
    try {
        *_result = new pxr::GfSize3(v);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_ctor_03(unsigned long v0, unsigned long v1, unsigned long v2, gf_Size3_t** _result) {
    try {
        *_result = new pxr::GfSize3(v0, v1, v2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Size3_dtor(gf_Size3_t* _this) {
    delete _this;
    return 0;
}

int gf_Transform_Set_00(gf_Transform_t* _this, gf_Vec3d_t const* scale, gf_Rotation_t const* pivotOrientation, gf_Rotation_t const* rotation, gf_Vec3d_t const* pivotPosition, gf_Vec3d_t const* translation, gf_Transform_t** _result) {
    try {
        *_result = &_this->Set(*scale, *pivotOrientation, *rotation, *pivotPosition, *translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_Set_01(gf_Transform_t* _this, gf_Vec3d_t const* translation, gf_Rotation_t const* rotation, gf_Vec3d_t const* scale, gf_Vec3d_t const* pivotPosition, gf_Rotation_t const* pivotOrientation, gf_Transform_t** _result) {
    try {
        *_result = &_this->Set(*translation, *rotation, *scale, *pivotPosition, *pivotOrientation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetMatrix(gf_Transform_t* _this, gf_Matrix4d_t const* m, gf_Transform_t** _result) {
    try {
        *_result = &_this->SetMatrix(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetIdentity(gf_Transform_t* _this, gf_Transform_t** _result) {
    try {
        *_result = &_this->SetIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetScale(gf_Transform_t* _this, gf_Vec3d_t const* scale) {
    try {
        _this->SetScale(*scale);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetPivotOrientation(gf_Transform_t* _this, gf_Rotation_t const* pivotOrient) {
    try {
        _this->SetPivotOrientation(*pivotOrient);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetScaleOrientation(gf_Transform_t* _this, gf_Rotation_t const* pivotOrient) {
    try {
        _this->SetScaleOrientation(*pivotOrient);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetRotation(gf_Transform_t* _this, gf_Rotation_t const* rotation) {
    try {
        _this->SetRotation(*rotation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetPivotPosition(gf_Transform_t* _this, gf_Vec3d_t const* pivPos) {
    try {
        _this->SetPivotPosition(*pivPos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetCenter(gf_Transform_t* _this, gf_Vec3d_t const* pivPos) {
    try {
        _this->SetCenter(*pivPos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_SetTranslation(gf_Transform_t* _this, gf_Vec3d_t const* translation) {
    try {
        _this->SetTranslation(*translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetScale(gf_Transform_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetScale();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetPivotOrientation(gf_Transform_t const* _this, gf_Rotation_t const** _result) {
    try {
        *_result = &_this->GetPivotOrientation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetScaleOrientation(gf_Transform_t const* _this, gf_Rotation_t const** _result) {
    try {
        *_result = &_this->GetScaleOrientation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetRotation(gf_Transform_t const* _this, gf_Rotation_t const** _result) {
    try {
        *_result = &_this->GetRotation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetPivotPosition(gf_Transform_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetPivotPosition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetCenter(gf_Transform_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetCenter();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetTranslation(gf_Transform_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->GetTranslation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_GetMatrix(gf_Transform_t const* _this, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetMatrix();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_op_eq(gf_Transform_t const* _this, gf_Transform_t const* xf, bool* _result) {
    try {
        *_result = _this->operator==(*xf);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_op_neq(gf_Transform_t const* _this, gf_Transform_t const* xf, bool* _result) {
    try {
        *_result = _this->operator!=(*xf);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_op_mul_assign(gf_Transform_t* _this, gf_Transform_t const* xf, gf_Transform_t** _result) {
    try {
        *_result = &_this->operator*=(*xf);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_default(gf_Transform_t** _result) {
    try {
        *_result = new pxr::GfTransform();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_ctor_01(gf_Vec3d_t const* scale, gf_Rotation_t const* pivotOrientation, gf_Rotation_t const* rotation, gf_Vec3d_t const* pivotPosition, gf_Vec3d_t const* translation, gf_Transform_t** _result) {
    try {
        *_result = new pxr::GfTransform(*scale, *pivotOrientation, *rotation, *pivotPosition, *translation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_ctor_02(gf_Vec3d_t const* translation, gf_Rotation_t const* rotation, gf_Vec3d_t const* scale, gf_Vec3d_t const* pivotPosition, gf_Rotation_t const* pivotOrientation, gf_Transform_t** _result) {
    try {
        *_result = new pxr::GfTransform(*translation, *rotation, *scale, *pivotPosition, *pivotOrientation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_ctor_03(gf_Matrix4d_t const* m, gf_Transform_t** _result) {
    try {
        *_result = new pxr::GfTransform(*m);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_Transform_dtor(gf_Transform_t* _this) {
    delete _this;
    return 0;
}

int gf_GfDot_dualquatd(gf_DualQuatd_t const* dq1, gf_DualQuatd_t const* dq2, double* _result) {
    try {
        *_result = pxr::GfDot(*dq1, *dq2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_GfDot_dualquatf(gf_DualQuatf_t const* dq1, gf_DualQuatf_t const* dq2, float* _result) {
    try {
        *_result = pxr::GfDot(*dq1, *dq2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_GfDot_dualquath(gf_DualQuath_t const* dq1, gf_DualQuath_t const* dq2, gf_Half_t** _result) {
    try {
        *_result = new pxr::GfHalf(pxr::GfDot(*dq1, *dq2));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_GfDot_18(gf_Quaternion_t const* q1, gf_Quaternion_t const* q2, double* _result) {
    try {
        *_result = pxr::GfDot(*q1, *q2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_GfDot_quatd(gf_Quatd_t const* q1, gf_Quatd_t const* q2, double* _result) {
    try {
        *_result = pxr::GfDot(*q1, *q2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_GfDot_quatf(gf_Quatf_t const* q1, gf_Quatf_t const* q2, float* _result) {
    try {
        *_result = pxr::GfDot(*q1, *q2);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int gf_GfDot_quath(gf_Quath_t const* q1, gf_Quath_t const* q2, gf_Half_t** _result) {
    try {
        *_result = new pxr::GfHalf(pxr::GfDot(*q1, *q2));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Array_data(js_Array_t* _this, js_Value_t** _result) {
    *_result = _this->data();
    return 0;
}

int js_Array_data_const(js_Array_t const* _this, js_Value_t const** _result) {
    *_result = _this->data();
    return 0;
}

int js_Array_empty(js_Array_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int js_Array_size(js_Array_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int js_Array_max_size(js_Array_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int js_Array_capacity(js_Array_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int js_Array_clear(js_Array_t* _this) {
    _this->clear();
    return 0;
}

int js_Array_pop_back(js_Array_t* _this) {
    _this->pop_back();
    return 0;
}

int js_Array_op_index(js_Array_t const* _this, size_t __n, js_Value_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int js_Array_default(js_Array_t** _result) {
    *_result = new pxr::JsArray();
    return 0;
}

int js_Array_dtor(js_Array_t* _this) {
    delete _this;
    return 0;
}

int js_Object_dtor(js_Object_t* _this) {
    delete _this;
    return 0;
}

int js_Value_GetJsObject(js_Value_t const* _this, js_Object_t const** _result) {
    try {
        *_result = &_this->GetJsObject();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_GetJsArray(js_Value_t const* _this, js_Array_t const** _result) {
    try {
        *_result = &_this->GetJsArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_GetBool(js_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->GetBool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_GetInt(js_Value_t const* _this, int* _result) {
    try {
        *_result = _this->GetInt();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_GetInt64(js_Value_t const* _this, int64_t* _result) {
    try {
        *_result = _this->GetInt64();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_GetUInt64(js_Value_t const* _this, uint64_t* _result) {
    try {
        *_result = _this->GetUInt64();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_GetReal(js_Value_t const* _this, double* _result) {
    try {
        *_result = _this->GetReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_IsObject(js_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsObject();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_IsArray(js_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_IsBool(js_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsBool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_IsInt(js_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInt();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_IsUInt64(js_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsUInt64();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_IsReal(js_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsReal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_new(js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_object(js_Object_t const* param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_array(js_Array_t const* param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_string(char const* param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_bool(bool param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_int(int param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_int64_t(long param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_uint64_t(unsigned long param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_from_double(double param00, js_Value_t** _result) {
    try {
        *_result = new pxr::JsValue(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int js_Value_dtor(js_Value_t* _this) {
    delete _this;
    return 0;
}

int js_TokenValuePair_dtor(js_TokenValuePair_t* _this) {
    delete _this;
    return 0;
}

int ndr_NdrVersion_GetAsDefault(ndr_NdrVersion_t const* _this, ndr_NdrVersion_t** _result) {
    try {
        *_result = new pxr::NdrVersion(_this->GetAsDefault());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_GetMajor(ndr_NdrVersion_t const* _this, int* _result) {
    try {
        *_result = _this->GetMajor();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_GetMinor(ndr_NdrVersion_t const* _this, int* _result) {
    try {
        *_result = _this->GetMinor();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_IsDefault(ndr_NdrVersion_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefault();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_GetString(ndr_NdrVersion_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_GetStringSuffix(ndr_NdrVersion_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetStringSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_GetHash(ndr_NdrVersion_t const* _this, unsigned long* _result) {
    try {
        *_result = _this->GetHash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_op_bool(ndr_NdrVersion_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_op_not(ndr_NdrVersion_t const* _this, bool* _result) {
    try {
        *_result = _this->operator!();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_default(ndr_NdrVersion_t** _result) {
    *_result = new pxr::NdrVersion();
    return 0;
}

int ndr_NdrVersion_ctor_01(int major, int minor, ndr_NdrVersion_t** _result) {
    try {
        *_result = new pxr::NdrVersion(major, minor);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_ctor_02(std_String_t const* x, ndr_NdrVersion_t** _result) {
    try {
        *_result = new pxr::NdrVersion(*x);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrVersion_dtor(ndr_NdrVersion_t* _this) {
    delete _this;
    return 0;
}

int ndr_DiscoveryPluginContext_GetSourceType(ndr_DiscoveryPluginContext_t const* _this, tf_Token_t const* discoveryType, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetSourceType(*discoveryType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_DiscoveryPluginContext_dtor(ndr_DiscoveryPluginContext_t* _this) {
    delete _this;
    return 0;
}

int ndr_DiscoveryPlugin_DiscoverNodes(ndr_DiscoveryPlugin_t* _this, ndr_DiscoveryPluginContext_t const* param00, ndr_NodeDiscoveryResultVector_t** _result) {
    try {
        *_result = new std::vector<pxr::NdrNodeDiscoveryResult>(_this->DiscoverNodes(*param00));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_DiscoveryPlugin_GetSearchURIs(ndr_DiscoveryPlugin_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetSearchURIs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_DiscoveryPlugin_dtor(ndr_DiscoveryPlugin_t* _this) {
    delete _this;
    return 0;
}

int ndr_DiscoveryPluginRefPtr_DiscoverNodes(ndr_DiscoveryPluginRefPtr_t* _this, ndr_DiscoveryPluginContext_t const* param00, ndr_NodeDiscoveryResultVector_t** _result) {
    try {
        *_result = new std::vector<pxr::NdrNodeDiscoveryResult>((*_this)->DiscoverNodes(*param00));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_DiscoveryPluginRefPtr_GetSearchURIs(ndr_DiscoveryPluginRefPtr_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &(*_this)->GetSearchURIs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_DiscoveryPluginRefPtr_dtor(ndr_DiscoveryPluginRefPtr_t* _this) {
    delete _this;
    return 0;
}

int ndr_DiscoveryUri_dtor(ndr_DiscoveryUri_t* _this) {
    delete _this;
    return 0;
}

int ndr_Node_GetIdentifier(ndr_Node_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetVersion(ndr_Node_t const* _this, ndr_NdrVersion_t** _result) {
    try {
        *_result = new pxr::NdrVersion(_this->GetVersion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetName(ndr_Node_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetFamily(ndr_Node_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetFamily();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetContext(ndr_Node_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetContext();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetSourceType(ndr_Node_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetSourceType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetResolvedDefinitionURI(ndr_Node_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetResolvedDefinitionURI();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetResolvedImplementationURI(ndr_Node_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetResolvedImplementationURI();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetSourceCode(ndr_Node_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetSourceCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_IsValid(ndr_Node_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetInfoString(ndr_Node_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetInfoString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetInputNames(ndr_Node_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetInputNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetOutputNames(ndr_Node_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetOutputNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetInput(ndr_Node_t const* _this, tf_Token_t const* inputName, ndr_Property_t const** _result) {
    try {
        *_result = _this->GetInput(*inputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetOutput(ndr_Node_t const* _this, tf_Token_t const* outputName, ndr_Property_t const** _result) {
    try {
        *_result = _this->GetOutput(*outputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_GetMetadata(ndr_Node_t const* _this, ndr_TokenMap_t const** _result) {
    try {
        *_result = &_this->GetMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Node_dtor(ndr_Node_t* _this) {
    delete _this;
    return 0;
}

int ndr_NodeUniquePtr_GetIdentifier(ndr_NodeUniquePtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetVersion(ndr_NodeUniquePtr_t const* _this, ndr_NdrVersion_t** _result) {
    try {
        *_result = new pxr::NdrVersion((*_this)->GetVersion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetName(ndr_NodeUniquePtr_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetFamily(ndr_NodeUniquePtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetFamily();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetContext(ndr_NodeUniquePtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetContext();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetSourceType(ndr_NodeUniquePtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetSourceType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetResolvedDefinitionURI(ndr_NodeUniquePtr_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetResolvedDefinitionURI();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetResolvedImplementationURI(ndr_NodeUniquePtr_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetResolvedImplementationURI();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetSourceCode(ndr_NodeUniquePtr_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetSourceCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_IsValid(ndr_NodeUniquePtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetInfoString(ndr_NodeUniquePtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetInfoString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetInputNames(ndr_NodeUniquePtr_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &(*_this)->GetInputNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetOutputNames(ndr_NodeUniquePtr_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &(*_this)->GetOutputNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetInput(ndr_NodeUniquePtr_t const* _this, tf_Token_t const* inputName, ndr_Property_t const** _result) {
    try {
        *_result = (*_this)->GetInput(*inputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetOutput(ndr_NodeUniquePtr_t const* _this, tf_Token_t const* outputName, ndr_Property_t const** _result) {
    try {
        *_result = (*_this)->GetOutput(*outputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_GetMetadata(ndr_NodeUniquePtr_t const* _this, ndr_TokenMap_t const** _result) {
    try {
        *_result = &(*_this)->GetMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeUniquePtr_dtor(ndr_NodeUniquePtr_t* _this) {
    delete _this;
    return 0;
}

int ndr_NodeConstPtrVec_data(ndr_NodeConstPtrVec_t* _this, ndr_Node_t const*** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_NodeConstPtrVec_data_const(ndr_NodeConstPtrVec_t const* _this, ndr_Node_t const* const** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_NodeConstPtrVec_empty(ndr_NodeConstPtrVec_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int ndr_NodeConstPtrVec_size(ndr_NodeConstPtrVec_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int ndr_NodeConstPtrVec_max_size(ndr_NodeConstPtrVec_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int ndr_NodeConstPtrVec_capacity(ndr_NodeConstPtrVec_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int ndr_NodeConstPtrVec_clear(ndr_NodeConstPtrVec_t* _this) {
    _this->clear();
    return 0;
}

int ndr_NodeConstPtrVec_pop_back(ndr_NodeConstPtrVec_t* _this) {
    _this->pop_back();
    return 0;
}

int ndr_NodeConstPtrVec_op_index(ndr_NodeConstPtrVec_t const* _this, size_t __n, ndr_Node_t const* const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int ndr_NodeConstPtrVec_default(ndr_NodeConstPtrVec_t** _result) {
    *_result = new pxr::NdrNodeConstPtrVec();
    return 0;
}

int ndr_NodeConstPtrVec_dtor(ndr_NodeConstPtrVec_t* _this) {
    delete _this;
    return 0;
}

int ndr_NodeDiscoveryResult_ctor_00(tf_Token_t const* identifier, ndr_NdrVersion_t const* version, std_String_t const* name, tf_Token_t const* family, tf_Token_t const* discoveryType, tf_Token_t const* sourceType, std_String_t const* uri, std_String_t const* resolvedUri, std_String_t const* sourceCode, ndr_TokenMap_t const* metadata, std_String_t const* blindData, tf_Token_t const* subIdentifier, ndr_NodeDiscoveryResult_t** _result) {
    try {
        *_result = new pxr::NdrNodeDiscoveryResult(*identifier, *version, *name, *family, *discoveryType, *sourceType, *uri, *resolvedUri, *sourceCode, *metadata, *blindData, *subIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NodeDiscoveryResult_dtor(ndr_NodeDiscoveryResult_t* _this) {
    delete _this;
    return 0;
}

int ndr_NodeDiscoveryResultVector_data(ndr_NodeDiscoveryResultVector_t* _this, ndr_NodeDiscoveryResult_t** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_NodeDiscoveryResultVector_data_const(ndr_NodeDiscoveryResultVector_t const* _this, ndr_NodeDiscoveryResult_t const** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_NodeDiscoveryResultVector_empty(ndr_NodeDiscoveryResultVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int ndr_NodeDiscoveryResultVector_size(ndr_NodeDiscoveryResultVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int ndr_NodeDiscoveryResultVector_max_size(ndr_NodeDiscoveryResultVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int ndr_NodeDiscoveryResultVector_capacity(ndr_NodeDiscoveryResultVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int ndr_NodeDiscoveryResultVector_clear(ndr_NodeDiscoveryResultVector_t* _this) {
    _this->clear();
    return 0;
}

int ndr_NodeDiscoveryResultVector_pop_back(ndr_NodeDiscoveryResultVector_t* _this) {
    _this->pop_back();
    return 0;
}

int ndr_NodeDiscoveryResultVector_op_index(ndr_NodeDiscoveryResultVector_t const* _this, size_t __n, ndr_NodeDiscoveryResult_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int ndr_NodeDiscoveryResultVector_default(ndr_NodeDiscoveryResultVector_t** _result) {
    *_result = new std::vector<pxr::NdrNodeDiscoveryResult>();
    return 0;
}

int ndr_NodeDiscoveryResultVector_dtor(ndr_NodeDiscoveryResultVector_t* _this) {
    delete _this;
    return 0;
}

int ndr_ParserPlugin_Parse(ndr_ParserPlugin_t* _this, ndr_NodeDiscoveryResult_t const* discoveryResult, ndr_NodeUniquePtr_t** _result) {
    try {
        *_result = new pxr::NdrNodeUniquePtr(_this->Parse(*discoveryResult));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_ParserPlugin_GetDiscoveryTypes(ndr_ParserPlugin_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetDiscoveryTypes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_ParserPlugin_GetSourceType(ndr_ParserPlugin_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetSourceType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_ParserPlugin_GetInvalidNode(ndr_NodeDiscoveryResult_t const* dr, ndr_NodeUniquePtr_t** _result) {
    try {
        *_result = new pxr::NdrNodeUniquePtr(pxr::NdrParserPlugin::GetInvalidNode(*dr));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_ParserPlugin_dtor(ndr_ParserPlugin_t* _this) {
    delete _this;
    return 0;
}

int ndr_Property_GetName(ndr_Property_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_GetType(ndr_Property_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_GetDefaultValue(ndr_Property_t const* _this, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_IsOutput(ndr_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsOutput();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_IsArray(ndr_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_IsDynamicArray(ndr_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDynamicArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_GetArraySize(ndr_Property_t const* _this, int* _result) {
    try {
        *_result = _this->GetArraySize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_GetInfoString(ndr_Property_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetInfoString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_GetMetadata(ndr_Property_t const* _this, ndr_TokenMap_t const** _result) {
    try {
        *_result = &_this->GetMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_IsConnectable(ndr_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConnectable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_CanConnectTo(ndr_Property_t const* _this, ndr_Property_t const* other, bool* _result) {
    try {
        *_result = _this->CanConnectTo(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_GetTypeAsSdfType(ndr_Property_t const* _this, ndr_SdfTypeIndicator_t const** _result) {
    try {
        *_result = new pxr::NdrSdfTypeIndicator const(_this->GetTypeAsSdfType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_GetDefaultValueAsSdfType(ndr_Property_t const* _this, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetDefaultValueAsSdfType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_ctor_00(tf_Token_t const* name, tf_Token_t const* type, vt_Value_t const* defaultValue, bool isOutput, unsigned long arraySize, bool isDynamicArray, ndr_TokenMap_t const* metadata, ndr_Property_t** _result) {
    try {
        *_result = new pxr::NdrProperty(*name, *type, *defaultValue, isOutput, arraySize, isDynamicArray, *metadata);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Property_dtor(ndr_Property_t* _this) {
    delete _this;
    return 0;
}

int ndr_PropertyUniquePtr_GetName(ndr_PropertyUniquePtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_GetType(ndr_PropertyUniquePtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_GetDefaultValue(ndr_PropertyUniquePtr_t const* _this, vt_Value_t const** _result) {
    try {
        *_result = &(*_this)->GetDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_IsOutput(ndr_PropertyUniquePtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsOutput();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_IsArray(ndr_PropertyUniquePtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_IsDynamicArray(ndr_PropertyUniquePtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDynamicArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_GetArraySize(ndr_PropertyUniquePtr_t const* _this, int* _result) {
    try {
        *_result = (*_this)->GetArraySize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_GetInfoString(ndr_PropertyUniquePtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetInfoString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_GetMetadata(ndr_PropertyUniquePtr_t const* _this, ndr_TokenMap_t const** _result) {
    try {
        *_result = &(*_this)->GetMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_IsConnectable(ndr_PropertyUniquePtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsConnectable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_CanConnectTo(ndr_PropertyUniquePtr_t const* _this, ndr_Property_t const* other, bool* _result) {
    try {
        *_result = (*_this)->CanConnectTo(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_GetTypeAsSdfType(ndr_PropertyUniquePtr_t const* _this, ndr_SdfTypeIndicator_t const** _result) {
    try {
        *_result = new pxr::NdrSdfTypeIndicator const((*_this)->GetTypeAsSdfType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_GetDefaultValueAsSdfType(ndr_PropertyUniquePtr_t const* _this, vt_Value_t const** _result) {
    try {
        *_result = &(*_this)->GetDefaultValueAsSdfType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_PropertyUniquePtr_dtor(ndr_PropertyUniquePtr_t* _this) {
    delete _this;
    return 0;
}

int ndr_PropertyUniquePtrVec_data(ndr_PropertyUniquePtrVec_t* _this, ndr_PropertyUniquePtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_PropertyUniquePtrVec_data_const(ndr_PropertyUniquePtrVec_t const* _this, ndr_PropertyUniquePtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_PropertyUniquePtrVec_empty(ndr_PropertyUniquePtrVec_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int ndr_PropertyUniquePtrVec_size(ndr_PropertyUniquePtrVec_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int ndr_PropertyUniquePtrVec_max_size(ndr_PropertyUniquePtrVec_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int ndr_PropertyUniquePtrVec_capacity(ndr_PropertyUniquePtrVec_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int ndr_PropertyUniquePtrVec_clear(ndr_PropertyUniquePtrVec_t* _this) {
    _this->clear();
    return 0;
}

int ndr_PropertyUniquePtrVec_pop_back(ndr_PropertyUniquePtrVec_t* _this) {
    _this->pop_back();
    return 0;
}

int ndr_PropertyUniquePtrVec_op_index(ndr_PropertyUniquePtrVec_t const* _this, size_t __n, ndr_PropertyUniquePtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int ndr_PropertyUniquePtrVec_default(ndr_PropertyUniquePtrVec_t** _result) {
    *_result = new pxr::NdrPropertyUniquePtrVec();
    return 0;
}

int ndr_PropertyUniquePtrVec_dtor(ndr_PropertyUniquePtrVec_t* _this) {
    delete _this;
    return 0;
}

int ndr_SdfTypeIndicator_dtor(ndr_SdfTypeIndicator_t* _this) {
    delete _this;
    return 0;
}

int ndr_Registry_SetExtraDiscoveryPlugins_00(ndr_Registry_t* _this, ndr_NdrRegistryDiscoveryPluginRefPtrVec_t* plugins) {
    try {
        _this->SetExtraDiscoveryPlugins(*plugins);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_SetExtraDiscoveryPlugins_01(ndr_Registry_t* _this, tf_TypeVector_t const* pluginTypes) {
    try {
        _this->SetExtraDiscoveryPlugins(*pluginTypes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_AddDiscoveryResult_00(ndr_Registry_t* _this, ndr_NodeDiscoveryResult_t* discoveryResult) {
    try {
        _this->AddDiscoveryResult(*discoveryResult);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_AddDiscoveryResult_01(ndr_Registry_t* _this, ndr_NodeDiscoveryResult_t const* discoveryResult) {
    try {
        _this->AddDiscoveryResult(*discoveryResult);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_SetExtraParserPlugins(ndr_Registry_t* _this, tf_TypeVector_t const* pluginTypes) {
    try {
        _this->SetExtraParserPlugins(*pluginTypes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeFromAsset(ndr_Registry_t* _this, sdf_AssetPath_t const* asset, ndr_TokenMap_t const* metadata, tf_Token_t const* subIdentifier, tf_Token_t const* sourceType, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeFromAsset(*asset, *metadata, *subIdentifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeFromSourceCode(ndr_Registry_t* _this, std_String_t const* sourceCode, tf_Token_t const* sourceType, ndr_TokenMap_t const* metadata, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeFromSourceCode(*sourceCode, *sourceType, *metadata);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetSearchURIs(ndr_Registry_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetSearchURIs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeIdentifiers(ndr_Registry_t const* _this, tf_Token_t const* family, unsigned int filter, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetNodeIdentifiers(*family, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeNames(ndr_Registry_t const* _this, tf_Token_t const* family, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetNodeNames(*family));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeByIdentifier(ndr_Registry_t* _this, tf_Token_t const* identifier, tf_TokenVector_t const* sourceTypePriority, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByIdentifier(*identifier, *sourceTypePriority);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeByIdentifierAndType(ndr_Registry_t* _this, tf_Token_t const* identifier, tf_Token_t const* sourceType, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByIdentifierAndType(*identifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeByName(ndr_Registry_t* _this, std_String_t const* name, tf_TokenVector_t const* sourceTypePriority, unsigned int filter, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByName(*name, *sourceTypePriority, static_cast<pxr::NdrVersionFilter>(filter));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodeByNameAndType(ndr_Registry_t* _this, std_String_t const* name, tf_Token_t const* sourceType, unsigned int filter, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByNameAndType(*name, *sourceType, static_cast<pxr::NdrVersionFilter>(filter));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodesByIdentifier(ndr_Registry_t* _this, tf_Token_t const* identifier, ndr_NodeConstPtrVec_t** _result) {
    try {
        *_result = new pxr::NdrNodeConstPtrVec(_this->GetNodesByIdentifier(*identifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodesByName(ndr_Registry_t* _this, std_String_t const* name, unsigned int filter, ndr_NodeConstPtrVec_t** _result) {
    try {
        *_result = new pxr::NdrNodeConstPtrVec(_this->GetNodesByName(*name, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetNodesByFamily(ndr_Registry_t* _this, tf_Token_t const* family, unsigned int filter, ndr_NodeConstPtrVec_t** _result) {
    try {
        *_result = new pxr::NdrNodeConstPtrVec(_this->GetNodesByFamily(*family, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_Registry_GetAllNodeSourceTypes(ndr_Registry_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetAllNodeSourceTypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_data(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t* _this, ndr_DiscoveryPluginRefPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_data_const(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t const* _this, ndr_DiscoveryPluginRefPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_empty(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_size(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_max_size(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_capacity(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_clear(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t* _this) {
    _this->clear();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_pop_back(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t* _this) {
    _this->pop_back();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_op_index(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t const* _this, size_t __n, ndr_DiscoveryPluginRefPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_default(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t** _result) {
    *_result = new pxr::NdrRegistry::DiscoveryPluginRefPtrVec();
    return 0;
}

int ndr_NdrRegistryDiscoveryPluginRefPtrVec_dtor(ndr_NdrRegistryDiscoveryPluginRefPtrVec_t* _this) {
    delete _this;
    return 0;
}

int ndr_TokenMap_dtor(ndr_TokenMap_t* _this) {
    delete _this;
    return 0;
}

int ndr_OptionVec_data(ndr_OptionVec_t* _this, tf_TokenTokenPair_t** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_OptionVec_data_const(ndr_OptionVec_t const* _this, tf_TokenTokenPair_t const** _result) {
    *_result = _this->data();
    return 0;
}

int ndr_OptionVec_empty(ndr_OptionVec_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int ndr_OptionVec_size(ndr_OptionVec_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int ndr_OptionVec_max_size(ndr_OptionVec_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int ndr_OptionVec_capacity(ndr_OptionVec_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int ndr_OptionVec_clear(ndr_OptionVec_t* _this) {
    _this->clear();
    return 0;
}

int ndr_OptionVec_pop_back(ndr_OptionVec_t* _this) {
    _this->pop_back();
    return 0;
}

int ndr_OptionVec_op_index(ndr_OptionVec_t const* _this, size_t __n, tf_TokenTokenPair_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int ndr_OptionVec_default(ndr_OptionVec_t** _result) {
    *_result = new pxr::NdrOptionVec();
    return 0;
}

int ndr_OptionVec_dtor(ndr_OptionVec_t* _this) {
    delete _this;
    return 0;
}

int ndr_NdrGetIdentifierString(tf_Token_t const* id, std_String_t const** _result) {
    try {
        *_result = &pxr::NdrGetIdentifierString(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Arc_default(pcp_Arc_t** _result) {
    try {
        *_result = new pxr::PcpArc();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Arc_dtor(pcp_Arc_t* _this) {
    delete _this;
    return 0;
}

int pcp_Cache_GetLayerStackIdentifier(pcp_Cache_t const* _this, pcp_LayerStackIdentifier_t const** _result) {
    try {
        *_result = &_this->GetLayerStackIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetLayerStack(pcp_Cache_t const* _this, pcp_LayerStackPtr_t** _result) {
    try {
        *_result = new pxr::PcpLayerStackPtr(_this->GetLayerStack());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_HasRootLayerStack_00(pcp_Cache_t const* _this, pcp_LayerStackRefPtr_t const* layerStack, bool* _result) {
    try {
        *_result = _this->HasRootLayerStack(*layerStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_HasRootLayerStack_01(pcp_Cache_t const* _this, pcp_LayerStackPtr_t const* layerStack, bool* _result) {
    try {
        *_result = _this->HasRootLayerStack(*layerStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsUsd(pcp_Cache_t const* _this, bool* _result) {
    try {
        *_result = _this->IsUsd();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetFileFormatTarget(pcp_Cache_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetFileFormatTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetVariantFallbacks(pcp_Cache_t const* _this, pcp_VariantFallbackMap_t** _result) {
    try {
        *_result = new pxr::PcpVariantFallbackMap(_this->GetVariantFallbacks());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_SetVariantFallbacks(pcp_Cache_t* _this, pcp_VariantFallbackMap_t const* map, pcp_Changes_t* changes) {
    try {
        _this->SetVariantFallbacks(*map, changes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsPayloadIncluded(pcp_Cache_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->IsPayloadIncluded(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetIncludedPayloads(pcp_Cache_t const* _this, pcp_CachePayloadSet_t const** _result) {
    try {
        *_result = &_this->GetIncludedPayloads();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_RequestPayloads(pcp_Cache_t* _this, sdf_PathSet_t const* pathsToInclude, sdf_PathSet_t const* pathsToExclude, pcp_Changes_t* changes) {
    try {
        _this->RequestPayloads(*pathsToInclude, *pathsToExclude, changes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_RequestLayerMuting(pcp_Cache_t* _this, std_StringVector_t const* layersToMute, std_StringVector_t const* layersToUnmute, pcp_Changes_t* changes, std_StringVector_t* newLayersMuted, std_StringVector_t* newLayersUnmuted) {
    try {
        _this->RequestLayerMuting(*layersToMute, *layersToUnmute, changes, newLayersMuted, newLayersUnmuted);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetMutedLayers(pcp_Cache_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetMutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsLayerMuted_00(pcp_Cache_t const* _this, std_String_t const* layerIdentifier, bool* _result) {
    try {
        *_result = _this->IsLayerMuted(*layerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsLayerMuted_01(pcp_Cache_t const* _this, sdf_LayerHandle_t const* anchorLayer, std_String_t const* layerIdentifier, std_String_t* canonicalMutedLayerIdentifier, bool* _result) {
    try {
        *_result = _this->IsLayerMuted(*anchorLayer, *layerIdentifier, canonicalMutedLayerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetPrimIndexInputs(pcp_Cache_t* _this, pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = new pxr::PcpPrimIndexInputs(_this->GetPrimIndexInputs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_ComputeLayerStack(pcp_Cache_t* _this, pcp_LayerStackIdentifier_t const* identifier, pcp_ErrorBaseSharedPtrVector_t* allErrors, pcp_LayerStackRefPtr_t** _result) {
    try {
        *_result = new pxr::PcpLayerStackRefPtr(_this->ComputeLayerStack(*identifier, allErrors));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_FindLayerStack(pcp_Cache_t const* _this, pcp_LayerStackIdentifier_t const* identifier, pcp_LayerStackPtr_t** _result) {
    try {
        *_result = new pxr::PcpLayerStackPtr(_this->FindLayerStack(*identifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_UsesLayerStack(pcp_Cache_t const* _this, pcp_LayerStackPtr_t const* layerStack, bool* _result) {
    try {
        *_result = _this->UsesLayerStack(*layerStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_ComputePrimIndex(pcp_Cache_t* _this, sdf_Path_t const* primPath, pcp_ErrorBaseSharedPtrVector_t* allErrors, pcp_PrimIndex_t const** _result) {
    try {
        *_result = &_this->ComputePrimIndex(*primPath, allErrors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_FindPrimIndex(pcp_Cache_t const* _this, sdf_Path_t const* primPath, pcp_PrimIndex_t const** _result) {
    try {
        *_result = _this->FindPrimIndex(*primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_ComputePropertyIndex(pcp_Cache_t* _this, sdf_Path_t const* propPath, pcp_ErrorBaseSharedPtrVector_t* allErrors, pcp_PropertyIndex_t const** _result) {
    try {
        *_result = &_this->ComputePropertyIndex(*propPath, allErrors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_FindPropertyIndex(pcp_Cache_t const* _this, sdf_Path_t const* propPath, pcp_PropertyIndex_t const** _result) {
    try {
        *_result = _this->FindPropertyIndex(*propPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_ComputeRelationshipTargetPaths(pcp_Cache_t* _this, sdf_Path_t const* relationshipPath, sdf_PathVector_t* paths, bool localOnly, sdf_SpecHandle_t const* stopProperty, bool includeStopProperty, sdf_PathVector_t* deletedPaths, pcp_ErrorBaseSharedPtrVector_t* allErrors) {
    try {
        _this->ComputeRelationshipTargetPaths(*relationshipPath, paths, localOnly, *stopProperty, includeStopProperty, deletedPaths, allErrors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_ComputeAttributeConnectionPaths(pcp_Cache_t* _this, sdf_Path_t const* attributePath, sdf_PathVector_t* paths, bool localOnly, sdf_SpecHandle_t const* stopProperty, bool includeStopProperty, sdf_PathVector_t* deletedPaths, pcp_ErrorBaseSharedPtrVector_t* allErrors) {
    try {
        _this->ComputeAttributeConnectionPaths(*attributePath, paths, localOnly, *stopProperty, includeStopProperty, deletedPaths, allErrors);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetUsedLayers(pcp_Cache_t const* _this, sdf_LayerHandleSet_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleSet(_this->GetUsedLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetUsedLayersRevision(pcp_Cache_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetUsedLayersRevision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetUsedRootLayers(pcp_Cache_t const* _this, sdf_LayerHandleSet_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleSet(_this->GetUsedRootLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_FindAllLayerStacksUsingLayer(pcp_Cache_t const* _this, sdf_LayerHandle_t const* layer, pcp_LayerStackPtrVector_t const** _result) {
    try {
        *_result = &_this->FindAllLayerStacksUsingLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_FindSiteDependencies_00(pcp_Cache_t const* _this, pcp_LayerStackPtr_t const* siteLayerStack, sdf_Path_t const* sitePath, unsigned int depMask, bool recurseOnSite, bool recurseOnIndex, bool filterForExistingCachesOnly, pcp_DependencyVector_t** _result) {
    try {
        *_result = new pxr::PcpDependencyVector(_this->FindSiteDependencies(*siteLayerStack, *sitePath, depMask, recurseOnSite, recurseOnIndex, filterForExistingCachesOnly));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_FindSiteDependencies_01(pcp_Cache_t const* _this, sdf_LayerHandle_t const* siteLayer, sdf_Path_t const* sitePath, unsigned int depMask, bool recurseOnSite, bool recurseOnIndex, bool filterForExistingCachesOnly, pcp_DependencyVector_t** _result) {
    try {
        *_result = new pxr::PcpDependencyVector(_this->FindSiteDependencies(*siteLayer, *sitePath, depMask, recurseOnSite, recurseOnIndex, filterForExistingCachesOnly));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_CanHaveOpinionForSite(pcp_Cache_t const* _this, sdf_Path_t const* localPcpSitePath, sdf_LayerHandle_t const* layer, sdf_Path_t* allowedPathInLayer, bool* _result) {
    try {
        *_result = _this->CanHaveOpinionForSite(*localPcpSitePath, *layer, allowedPathInLayer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetInvalidSublayerIdentifiers(pcp_Cache_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetInvalidSublayerIdentifiers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsInvalidSublayerIdentifier(pcp_Cache_t const* _this, std_String_t const* identifier, bool* _result) {
    try {
        *_result = _this->IsInvalidSublayerIdentifier(*identifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetInvalidAssetPaths(pcp_Cache_t const* _this, pcp_InvalidAssetPathMap_t** _result) {
    try {
        *_result = new std::map<pxr::SdfPath, std::vector<std::string>, pxr::SdfPath::FastLessThan>(_this->GetInvalidAssetPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsInvalidAssetPath(pcp_Cache_t const* _this, std_String_t const* resolvedAssetPath, bool* _result) {
    try {
        *_result = _this->IsInvalidAssetPath(*resolvedAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_HasAnyDynamicFileFormatArgumentFieldDependencies(pcp_Cache_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAnyDynamicFileFormatArgumentFieldDependencies();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_HasAnyDynamicFileFormatArgumentAttributeDependencies(pcp_Cache_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAnyDynamicFileFormatArgumentAttributeDependencies();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsPossibleDynamicFileFormatArgumentField(pcp_Cache_t const* _this, tf_Token_t const* field, bool* _result) {
    try {
        *_result = _this->IsPossibleDynamicFileFormatArgumentField(*field);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_IsPossibleDynamicFileFormatArgumentAttribute(pcp_Cache_t const* _this, tf_Token_t const* attributeName, bool* _result) {
    try {
        *_result = _this->IsPossibleDynamicFileFormatArgumentAttribute(*attributeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetDynamicFileFormatArgumentDependencyData(pcp_Cache_t const* _this, sdf_Path_t const* primIndexPath, pcp_DynamicFileFormatDependencyData_t const** _result) {
    try {
        *_result = &_this->GetDynamicFileFormatArgumentDependencyData(*primIndexPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetPrimsUsingExpressionVariablesFromLayerStack(pcp_Cache_t const* _this, pcp_LayerStackPtr_t const* layerStack, sdf_PathVector_t const** _result) {
    try {
        *_result = &_this->GetPrimsUsingExpressionVariablesFromLayerStack(*layerStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_GetExpressionVariablesFromLayerStackUsedByPrim(pcp_Cache_t const* _this, sdf_Path_t const* primIndexPath, pcp_LayerStackPtr_t const* layerStack, std_StringUnorderedSet_t const** _result) {
    try {
        *_result = &_this->GetExpressionVariablesFromLayerStackUsedByPrim(*primIndexPath, *layerStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_Reload(pcp_Cache_t* _this, pcp_Changes_t* changes) {
    try {
        _this->Reload(changes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_ReloadReferences(pcp_Cache_t* _this, pcp_Changes_t* changes, sdf_Path_t const* primPath) {
    try {
        _this->ReloadReferences(changes, *primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_PrintStatistics(pcp_Cache_t const* _this) {
    try {
        _this->PrintStatistics();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_ctor_00(pcp_LayerStackIdentifier_t const* layerStackIdentifier, std_String_t const* fileFormatTarget, bool usd, pcp_Cache_t** _result) {
    try {
        *_result = new pxr::PcpCache(*layerStackIdentifier, *fileFormatTarget, usd);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Cache_dtor(pcp_Cache_t* _this) {
    delete _this;
    return 0;
}

int pcp_InvalidAssetPathMap_dtor(pcp_InvalidAssetPathMap_t* _this) {
    delete _this;
    return 0;
}

int pcp_CachePayloadSet_dtor(pcp_CachePayloadSet_t* _this) {
    delete _this;
    return 0;
}

int pcp_Changes_DidChange(pcp_Changes_t* _this, pcp_Cache_t const* cache, sdf_LayerChangeListVec_t const* changes) {
    try {
        _this->DidChange(cache, *changes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidMaybeFixSublayer(pcp_Changes_t* _this, pcp_Cache_t const* cache, sdf_LayerHandle_t const* layer, std_String_t const* assetPath) {
    try {
        _this->DidMaybeFixSublayer(cache, *layer, *assetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidMaybeFixAsset(pcp_Changes_t* _this, pcp_Cache_t const* cache, pcp_Site_t const* site, sdf_LayerHandle_t const* srcLayer, std_String_t const* assetPath) {
    try {
        _this->DidMaybeFixAsset(cache, *site, *srcLayer, *assetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidMuteLayer(pcp_Changes_t* _this, pcp_Cache_t const* cache, std_String_t const* layerId) {
    try {
        _this->DidMuteLayer(cache, *layerId);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidUnmuteLayer(pcp_Changes_t* _this, pcp_Cache_t const* cache, std_String_t const* layerId) {
    try {
        _this->DidUnmuteLayer(cache, *layerId);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidChangeSignificantly(pcp_Changes_t* _this, pcp_Cache_t const* cache, sdf_Path_t const* path) {
    try {
        _this->DidChangeSignificantly(cache, *path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidChangeSpecs(pcp_Changes_t* _this, pcp_Cache_t const* cache, sdf_Path_t const* path, sdf_LayerHandle_t const* changedLayer, sdf_Path_t const* changedPath) {
    try {
        _this->DidChangeSpecs(cache, *path, *changedLayer, *changedPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidChangeSpecStack(pcp_Changes_t* _this, pcp_Cache_t const* cache, sdf_Path_t const* path) {
    try {
        _this->DidChangeSpecStack(cache, *path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidChangeTargets(pcp_Changes_t* _this, pcp_Cache_t const* cache, sdf_Path_t const* path, unsigned int targetType) {
    try {
        _this->DidChangeTargets(cache, *path, static_cast<pxr::PcpCacheChanges::TargetType>(targetType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidChangePaths(pcp_Changes_t* _this, pcp_Cache_t const* cache, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        _this->DidChangePaths(cache, *oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidDestroyCache(pcp_Changes_t* _this, pcp_Cache_t const* cache) {
    try {
        _this->DidDestroyCache(cache);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_DidChangeAssetResolver(pcp_Changes_t* _this, pcp_Cache_t const* cache) {
    try {
        _this->DidChangeAssetResolver(cache);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_Swap(pcp_Changes_t* _this, pcp_Changes_t* other) {
    try {
        _this->Swap(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_IsEmpty(pcp_Changes_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_GetLayerStackChanges(pcp_Changes_t const* _this, pcp_PcpLayerStackChanges_t const** _result) {
    try {
        *_result = &_this->GetLayerStackChanges();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_GetCacheChanges(pcp_Changes_t const* _this, pcp_PcpChangesCacheChanges_t const** _result) {
    try {
        *_result = &_this->GetCacheChanges();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_Apply(pcp_Changes_t const* _this) {
    try {
        _this->Apply();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_default(pcp_Changes_t** _result) {
    try {
        *_result = new pxr::PcpChanges();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Changes_dtor(pcp_Changes_t* _this) {
    delete _this;
    return 0;
}

int pcp_PcpChangesCacheChanges_dtor(pcp_PcpChangesCacheChanges_t* _this) {
    delete _this;
    return 0;
}

int pcp_PcpLayerStackChanges_dtor(pcp_PcpLayerStackChanges_t* _this) {
    delete _this;
    return 0;
}

int pcp_CacheChanges_dtor(pcp_CacheChanges_t* _this) {
    delete _this;
    return 0;
}

int pcp_CompressedSdSite_dtor(pcp_CompressedSdSite_t* _this) {
    delete _this;
    return 0;
}

int pcp_SourceArcInfo_dtor(pcp_SourceArcInfo_t* _this) {
    delete _this;
    return 0;
}

int pcp_SourceArcInfoVector_data(pcp_SourceArcInfoVector_t* _this, pcp_SourceArcInfo_t** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_SourceArcInfoVector_data_const(pcp_SourceArcInfoVector_t const* _this, pcp_SourceArcInfo_t const** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_SourceArcInfoVector_empty(pcp_SourceArcInfoVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int pcp_SourceArcInfoVector_size(pcp_SourceArcInfoVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int pcp_SourceArcInfoVector_max_size(pcp_SourceArcInfoVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int pcp_SourceArcInfoVector_capacity(pcp_SourceArcInfoVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int pcp_SourceArcInfoVector_clear(pcp_SourceArcInfoVector_t* _this) {
    _this->clear();
    return 0;
}

int pcp_SourceArcInfoVector_pop_back(pcp_SourceArcInfoVector_t* _this) {
    _this->pop_back();
    return 0;
}

int pcp_SourceArcInfoVector_op_index(pcp_SourceArcInfoVector_t const* _this, size_t __n, pcp_SourceArcInfo_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int pcp_SourceArcInfoVector_default(pcp_SourceArcInfoVector_t** _result) {
    *_result = new pxr::PcpSourceArcInfoVector();
    return 0;
}

int pcp_SourceArcInfoVector_dtor(pcp_SourceArcInfoVector_t* _this) {
    delete _this;
    return 0;
}

int pcp_Dependency_dtor(pcp_Dependency_t* _this) {
    delete _this;
    return 0;
}

int pcp_DependencyVector_data(pcp_DependencyVector_t* _this, pcp_Dependency_t** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_DependencyVector_data_const(pcp_DependencyVector_t const* _this, pcp_Dependency_t const** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_DependencyVector_empty(pcp_DependencyVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int pcp_DependencyVector_size(pcp_DependencyVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int pcp_DependencyVector_max_size(pcp_DependencyVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int pcp_DependencyVector_capacity(pcp_DependencyVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int pcp_DependencyVector_clear(pcp_DependencyVector_t* _this) {
    _this->clear();
    return 0;
}

int pcp_DependencyVector_pop_back(pcp_DependencyVector_t* _this) {
    _this->pop_back();
    return 0;
}

int pcp_DependencyVector_op_index(pcp_DependencyVector_t const* _this, size_t __n, pcp_Dependency_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int pcp_DependencyVector_default(pcp_DependencyVector_t** _result) {
    *_result = new pxr::PcpDependencyVector();
    return 0;
}

int pcp_DependencyVector_dtor(pcp_DependencyVector_t* _this) {
    delete _this;
    return 0;
}

int pcp_CulledDependency_dtor(pcp_CulledDependency_t* _this) {
    delete _this;
    return 0;
}

int pcp_DynamicFileFormatContext_ComposeValue(pcp_DynamicFileFormatContext_t const* _this, tf_Token_t const* field, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->ComposeValue(*field, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatContext_ComposeValueStack(pcp_DynamicFileFormatContext_t const* _this, tf_Token_t const* field, vt_ValueVector_t* values, bool* _result) {
    try {
        *_result = _this->ComposeValueStack(*field, values);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatContext_ComposeAttributeDefaultValue(pcp_DynamicFileFormatContext_t const* _this, tf_Token_t const* attributeName, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->ComposeAttributeDefaultValue(*attributeName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatContext_dtor(pcp_DynamicFileFormatContext_t* _this) {
    delete _this;
    return 0;
}

int pcp_DynamicFileFormatDependencyData_Swap(pcp_DynamicFileFormatDependencyData_t* _this, pcp_DynamicFileFormatDependencyData_t* rhs) {
    try {
        _this->Swap(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatDependencyData_swap(pcp_DynamicFileFormatDependencyData_t* _this, pcp_DynamicFileFormatDependencyData_t* rhs) {
    try {
        _this->swap(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatDependencyData_IsEmpty(pcp_DynamicFileFormatDependencyData_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatDependencyData_GetRelevantFieldNames(pcp_DynamicFileFormatDependencyData_t const* _this, tf_TokenSet_t const** _result) {
    try {
        *_result = &_this->GetRelevantFieldNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatDependencyData_GetRelevantAttributeNames(pcp_DynamicFileFormatDependencyData_t const* _this, tf_TokenSet_t const** _result) {
    try {
        *_result = &_this->GetRelevantAttributeNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatDependencyData_CanFieldChangeAffectFileFormatArguments(pcp_DynamicFileFormatDependencyData_t const* _this, tf_Token_t const* fieldName, vt_Value_t const* oldValue, vt_Value_t const* newValue, bool* _result) {
    try {
        *_result = _this->CanFieldChangeAffectFileFormatArguments(*fieldName, *oldValue, *newValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatDependencyData_CanAttributeDefaultValueChangeAffectFileFormatArguments(pcp_DynamicFileFormatDependencyData_t const* _this, tf_Token_t const* attributeName, vt_Value_t const* oldValue, vt_Value_t const* newValue, bool* _result) {
    try {
        *_result = _this->CanAttributeDefaultValueChangeAffectFileFormatArguments(*attributeName, *oldValue, *newValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatDependencyData_default(pcp_DynamicFileFormatDependencyData_t** _result) {
    *_result = new pxr::PcpDynamicFileFormatDependencyData();
    return 0;
}

int pcp_DynamicFileFormatDependencyData_dtor(pcp_DynamicFileFormatDependencyData_t* _this) {
    delete _this;
    return 0;
}

int pcp_DynamicFileFormatInterface_ComposeFieldsForFileFormatArguments(pcp_DynamicFileFormatInterface_t const* _this, std_String_t const* assetPath, pcp_DynamicFileFormatContext_t const* context, sdf_FileFormatFileFormatArguments_t* args, vt_Value_t* dependencyContextData) {
    try {
        _this->ComposeFieldsForFileFormatArguments(*assetPath, *context, args, dependencyContextData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatInterface_CanFieldChangeAffectFileFormatArguments(pcp_DynamicFileFormatInterface_t const* _this, tf_Token_t const* field, vt_Value_t const* oldValue, vt_Value_t const* newValue, vt_Value_t const* dependencyContextData, bool* _result) {
    try {
        *_result = _this->CanFieldChangeAffectFileFormatArguments(*field, *oldValue, *newValue, *dependencyContextData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatInterface_CanAttributeDefaultValueChangeAffectFileFormatArguments(pcp_DynamicFileFormatInterface_t const* _this, tf_Token_t const* attributeName, vt_Value_t const* oldValue, vt_Value_t const* newValue, vt_Value_t const* dependencyContextData, bool* _result) {
    try {
        *_result = _this->CanAttributeDefaultValueChangeAffectFileFormatArguments(*attributeName, *oldValue, *newValue, *dependencyContextData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_DynamicFileFormatInterface_dtor(pcp_DynamicFileFormatInterface_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorBase_ToString(pcp_ErrorBase_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorBase_dtor(pcp_ErrorBase_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorBaseSharedPtr_ToString(pcp_ErrorBaseSharedPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorBaseSharedPtr_dtor(pcp_ErrorBaseSharedPtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_data(pcp_ErrorBaseSharedPtrVector_t* _this, pcp_ErrorBaseSharedPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_data_const(pcp_ErrorBaseSharedPtrVector_t const* _this, pcp_ErrorBaseSharedPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_empty(pcp_ErrorBaseSharedPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_size(pcp_ErrorBaseSharedPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_max_size(pcp_ErrorBaseSharedPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_capacity(pcp_ErrorBaseSharedPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_clear(pcp_ErrorBaseSharedPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_pop_back(pcp_ErrorBaseSharedPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_op_index(pcp_ErrorBaseSharedPtrVector_t const* _this, size_t __n, pcp_ErrorBaseSharedPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_default(pcp_ErrorBaseSharedPtrVector_t** _result) {
    *_result = new std::vector<std::shared_ptr<pxr::PcpErrorBase>>();
    return 0;
}

int pcp_ErrorBaseSharedPtrVector_dtor(pcp_ErrorBaseSharedPtrVector_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorArcCycle_ToString(pcp_ErrorArcCycle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorArcCycle_dtor(pcp_ErrorArcCycle_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorArcPermissionDenied_ToString(pcp_ErrorArcPermissionDenied_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorArcPermissionDenied_dtor(pcp_ErrorArcPermissionDenied_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorCapacityExceeded_ToString(pcp_ErrorCapacityExceeded_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorCapacityExceeded_dtor(pcp_ErrorCapacityExceeded_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInconsistentPropertyBase_ToString(pcp_ErrorInconsistentPropertyBase_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInconsistentPropertyBase_dtor(pcp_ErrorInconsistentPropertyBase_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInconsistentPropertyBaseSharedPtr_ToString(pcp_ErrorInconsistentPropertyBaseSharedPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInconsistentPropertyBaseSharedPtr_dtor(pcp_ErrorInconsistentPropertyBaseSharedPtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInconsistentPropertyType_ToString(pcp_ErrorInconsistentPropertyType_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInconsistentPropertyType_dtor(pcp_ErrorInconsistentPropertyType_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInconsistentAttributeType_ToString(pcp_ErrorInconsistentAttributeType_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInconsistentAttributeType_dtor(pcp_ErrorInconsistentAttributeType_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInconsistentAttributeVariability_ToString(pcp_ErrorInconsistentAttributeVariability_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInconsistentAttributeVariability_dtor(pcp_ErrorInconsistentAttributeVariability_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidPrimPath_ToString(pcp_ErrorInvalidPrimPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidPrimPath_dtor(pcp_ErrorInvalidPrimPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidAssetPathBase_ToString(pcp_ErrorInvalidAssetPathBase_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidAssetPathBase_dtor(pcp_ErrorInvalidAssetPathBase_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidAssetPathBaseSharedPtr_ToString(pcp_ErrorInvalidAssetPathBaseSharedPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidAssetPathBaseSharedPtr_dtor(pcp_ErrorInvalidAssetPathBaseSharedPtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidAssetPath_ToString(pcp_ErrorInvalidAssetPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidAssetPath_dtor(pcp_ErrorInvalidAssetPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorMutedAssetPath_ToString(pcp_ErrorMutedAssetPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorMutedAssetPath_dtor(pcp_ErrorMutedAssetPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorTargetPathBase_ToString(pcp_ErrorTargetPathBase_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorTargetPathBase_dtor(pcp_ErrorTargetPathBase_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorTargetPathBaseSharedPtr_ToString(pcp_ErrorTargetPathBaseSharedPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorTargetPathBaseSharedPtr_dtor(pcp_ErrorTargetPathBaseSharedPtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidInstaceTargetPath_ToString(pcp_ErrorInvalidInstaceTargetPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidInstaceTargetPath_dtor(pcp_ErrorInvalidInstaceTargetPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidExternalTargetPath_ToString(pcp_ErrorInvalidExternalTargetPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidExternalTargetPath_dtor(pcp_ErrorInvalidExternalTargetPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidTargetPath_ToString(pcp_ErrorInvalidTargetPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidTargetPath_dtor(pcp_ErrorInvalidTargetPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidSublayerOffset_ToString(pcp_ErrorInvalidSublayerOffset_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidSublayerOffset_dtor(pcp_ErrorInvalidSublayerOffset_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidReferenceOffset_ToString(pcp_ErrorInvalidReferenceOffset_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidReferenceOffset_dtor(pcp_ErrorInvalidReferenceOffset_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidSublayerOwnership_ToString(pcp_ErrorInvalidSublayerOwnership_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidSublayerOwnership_dtor(pcp_ErrorInvalidSublayerOwnership_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorInvalidSublayerPath_ToString(pcp_ErrorInvalidSublayerPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorInvalidSublayerPath_dtor(pcp_ErrorInvalidSublayerPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorOpinionAtRelocationSource_ToString(pcp_ErrorOpinionAtRelocationSource_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorOpinionAtRelocationSource_dtor(pcp_ErrorOpinionAtRelocationSource_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorPrimPermissionDenied_ToString(pcp_ErrorPrimPermissionDenied_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorPrimPermissionDenied_dtor(pcp_ErrorPrimPermissionDenied_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorPropertyPermissionDenied_ToString(pcp_ErrorPropertyPermissionDenied_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorPropertyPermissionDenied_dtor(pcp_ErrorPropertyPermissionDenied_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorSublayerCycle_ToString(pcp_ErrorSublayerCycle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorSublayerCycle_dtor(pcp_ErrorSublayerCycle_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorTargetPermissionDenied_ToString(pcp_ErrorTargetPermissionDenied_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorTargetPermissionDenied_dtor(pcp_ErrorTargetPermissionDenied_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorUnresolvedPrimPath_ToString(pcp_ErrorUnresolvedPrimPath_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorUnresolvedPrimPath_dtor(pcp_ErrorUnresolvedPrimPath_t* _this) {
    delete _this;
    return 0;
}

int pcp_ErrorVariableExpressionError_ToString(pcp_ErrorVariableExpressionError_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ErrorVariableExpressionError_dtor(pcp_ErrorVariableExpressionError_t* _this) {
    delete _this;
    return 0;
}

int pcp_ExpressionVariables_Compute(pcp_LayerStackIdentifier_t const* sourceLayerStackId, pcp_LayerStackIdentifier_t const* rootLayerStackId, pcp_ExpressionVariables_t const* overrideExpressionVars, pcp_ExpressionVariables_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariables(pxr::PcpExpressionVariables::Compute(*sourceLayerStackId, *rootLayerStackId, overrideExpressionVars));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_op_eq(pcp_ExpressionVariables_t const* _this, pcp_ExpressionVariables_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_op_neq(pcp_ExpressionVariables_t const* _this, pcp_ExpressionVariables_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_GetSource(pcp_ExpressionVariables_t const* _this, pcp_ExpressionVariablesSource_t const** _result) {
    try {
        *_result = &_this->GetSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_GetVariables(pcp_ExpressionVariables_t const* _this, vt_Dictionary_t const** _result) {
    try {
        *_result = &_this->GetVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_SetVariables(pcp_ExpressionVariables_t* _this, vt_Dictionary_t const* variables) {
    try {
        _this->SetVariables(*variables);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_default(pcp_ExpressionVariables_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_ctor_01(pcp_ExpressionVariablesSource_t const* source, vt_Dictionary_t const* expressionVariables, pcp_ExpressionVariables_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariables(*source, *expressionVariables);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_ctor_02(pcp_ExpressionVariablesSource_t* source, vt_Dictionary_t* expressionVariables, pcp_ExpressionVariables_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariables(*source, *expressionVariables);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariables_dtor(pcp_ExpressionVariables_t* _this) {
    delete _this;
    return 0;
}

int pcp_ExpressionVariableCachingComposer_ComputeExpressionVariables(pcp_ExpressionVariableCachingComposer_t* _this, pcp_LayerStackIdentifier_t const* id, pcp_ExpressionVariables_t const** _result) {
    try {
        *_result = &_this->ComputeExpressionVariables(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariableCachingComposer_ctor_00(pcp_LayerStackIdentifier_t const* rootLayerStackIdentifier, pcp_ExpressionVariableCachingComposer_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariableCachingComposer(*rootLayerStackIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariableCachingComposer_dtor(pcp_ExpressionVariableCachingComposer_t* _this) {
    delete _this;
    return 0;
}

int pcp_ExpressionVariablesDependencyData_IsEmpty(pcp_ExpressionVariablesDependencyData_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesDependencyData_GetDependenciesForLayerStack(pcp_ExpressionVariablesDependencyData_t const* _this, pcp_LayerStackPtr_t const* layerStack, std_StringUnorderedSet_t const** _result) {
    try {
        *_result = _this->GetDependenciesForLayerStack(*layerStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesDependencyData_default(pcp_ExpressionVariablesDependencyData_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariablesDependencyData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesDependencyData_dtor(pcp_ExpressionVariablesDependencyData_t* _this) {
    delete _this;
    return 0;
}

int pcp_ExpressionVariablesSource_op_eq(pcp_ExpressionVariablesSource_t const* _this, pcp_ExpressionVariablesSource_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_op_neq(pcp_ExpressionVariablesSource_t const* _this, pcp_ExpressionVariablesSource_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_op_lt(pcp_ExpressionVariablesSource_t const* _this, pcp_ExpressionVariablesSource_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_GetHash(pcp_ExpressionVariablesSource_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetHash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_IsRootLayerStack(pcp_ExpressionVariablesSource_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRootLayerStack();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_GetLayerStackIdentifier(pcp_ExpressionVariablesSource_t const* _this, pcp_LayerStackIdentifier_t const** _result) {
    try {
        *_result = _this->GetLayerStackIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_ResolveLayerStackIdentifier_00(pcp_ExpressionVariablesSource_t const* _this, pcp_LayerStackIdentifier_t const* rootLayerStackIdentifier, pcp_LayerStackIdentifier_t const** _result) {
    try {
        *_result = &_this->ResolveLayerStackIdentifier(*rootLayerStackIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_ResolveLayerStackIdentifier_01(pcp_ExpressionVariablesSource_t const* _this, pcp_Cache_t const* cache, pcp_LayerStackIdentifier_t const** _result) {
    try {
        *_result = &_this->ResolveLayerStackIdentifier(*cache);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_default(pcp_ExpressionVariablesSource_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariablesSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_ctor_01(pcp_LayerStackIdentifier_t const* layerStackIdentifier, pcp_LayerStackIdentifier_t const* rootLayerStackIdentifier, pcp_ExpressionVariablesSource_t** _result) {
    try {
        *_result = new pxr::PcpExpressionVariablesSource(*layerStackIdentifier, *rootLayerStackIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_ExpressionVariablesSource_dtor(pcp_ExpressionVariablesSource_t* _this) {
    delete _this;
    return 0;
}

int pcp_InstanceKey_op_eq(pcp_InstanceKey_t const* _this, pcp_InstanceKey_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_InstanceKey_op_neq(pcp_InstanceKey_t const* _this, pcp_InstanceKey_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_InstanceKey_GetString(pcp_InstanceKey_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_InstanceKey_default(pcp_InstanceKey_t** _result) {
    try {
        *_result = new pxr::PcpInstanceKey();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_InstanceKey_ctor_01(pcp_PrimIndex_t const* primIndex, pcp_InstanceKey_t** _result) {
    try {
        *_result = new pxr::PcpInstanceKey(*primIndex);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_InstanceKey_dtor(pcp_InstanceKey_t* _this) {
    delete _this;
    return 0;
}

int pcp_LayerStackSite_dtor(pcp_LayerStackSite_t* _this) {
    delete _this;
    return 0;
}

int pcp_NodeIterator_GetCompressedSdSite(pcp_NodeIterator_t const* _this, size_t layerIndex, pcp_CompressedSdSite_t** _result) {
    try {
        *_result = new pxr::Pcp_CompressedSdSite(_this->GetCompressedSdSite(layerIndex));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeIterator_default(pcp_NodeIterator_t** _result) {
    *_result = new pxr::PcpNodeIterator();
    return 0;
}

int pcp_NodeIterator_dtor(pcp_NodeIterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_NodeReverseIterator_default(pcp_NodeReverseIterator_t** _result) {
    try {
        *_result = new pxr::PcpNodeReverseIterator();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeReverseIterator_dtor(pcp_NodeReverseIterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_PrimIterator_GetNode(pcp_PrimIterator_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIterator__GetSiteRef(pcp_PrimIterator_t const* _this, pcp_SdSiteRef_t** _result) {
    try {
        *_result = new pxr::Pcp_SdSiteRef(_this->_GetSiteRef());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIterator_default(pcp_PrimIterator_t** _result) {
    try {
        *_result = new pxr::PcpPrimIterator();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIterator_dtor(pcp_PrimIterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_PrimReverseIterator_GetNode(pcp_PrimReverseIterator_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimReverseIterator_default(pcp_PrimReverseIterator_t** _result) {
    try {
        *_result = new pxr::PcpPrimReverseIterator();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimReverseIterator_dtor(pcp_PrimReverseIterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_PropertyIterator_GetNode(pcp_PropertyIterator_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIterator_IsLocal(pcp_PropertyIterator_t const* _this, bool* _result) {
    try {
        *_result = _this->IsLocal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIterator_default(pcp_PropertyIterator_t** _result) {
    try {
        *_result = new pxr::PcpPropertyIterator();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIterator_dtor(pcp_PropertyIterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_PropertyReverseIterator_GetNode(pcp_PropertyReverseIterator_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyReverseIterator_IsLocal(pcp_PropertyReverseIterator_t const* _this, bool* _result) {
    try {
        *_result = _this->IsLocal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyReverseIterator_default(pcp_PropertyReverseIterator_t** _result) {
    try {
        *_result = new pxr::PcpPropertyReverseIterator();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyReverseIterator_dtor(pcp_PropertyReverseIterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_LayerStack_GetIdentifier(pcp_LayerStack_t const* _this, pcp_LayerStackIdentifier_t const** _result) {
    try {
        *_result = &_this->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetLayers(pcp_LayerStack_t const* _this, sdf_LayerRefPtrVector_t const** _result) {
    try {
        *_result = &_this->GetLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetSessionLayers(pcp_LayerStack_t const* _this, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector(_this->GetSessionLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetLayerTree(pcp_LayerStack_t const* _this, sdf_LayerTreeHandle_t const** _result) {
    try {
        *_result = &_this->GetLayerTree();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetLayerOffsetForLayer_00(pcp_LayerStack_t const* _this, sdf_LayerHandle_t const* param00, sdf_LayerOffset_t const** _result) {
    try {
        *_result = _this->GetLayerOffsetForLayer(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetLayerOffsetForLayer_01(pcp_LayerStack_t const* _this, sdf_LayerRefPtr_t const* param00, sdf_LayerOffset_t const** _result) {
    try {
        *_result = _this->GetLayerOffsetForLayer(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetLayerOffsetForLayer_02(pcp_LayerStack_t const* _this, size_t layerIdx, sdf_LayerOffset_t const** _result) {
    try {
        *_result = _this->GetLayerOffsetForLayer(layerIdx);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetMutedLayers(pcp_LayerStack_t const* _this, std_StringSet_t const** _result) {
    try {
        *_result = &_this->GetMutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetLocalErrors(pcp_LayerStack_t const* _this, pcp_ErrorBaseSharedPtrVector_t** _result) {
    try {
        *_result = new std::vector<std::shared_ptr<pxr::PcpErrorBase>>(_this->GetLocalErrors());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_HasLayer_00(pcp_LayerStack_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = _this->HasLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_HasLayer_01(pcp_LayerStack_t const* _this, sdf_LayerRefPtr_t const* layer, bool* _result) {
    try {
        *_result = _this->HasLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetExpressionVariables(pcp_LayerStack_t const* _this, pcp_ExpressionVariables_t const** _result) {
    try {
        *_result = &_this->GetExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetExpressionVariableDependencies(pcp_LayerStack_t const* _this, std_StringUnorderedSet_t const** _result) {
    try {
        *_result = &_this->GetExpressionVariableDependencies();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetTimeCodesPerSecond(pcp_LayerStack_t const* _this, double* _result) {
    try {
        *_result = _this->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetRelocatesSourceToTarget(pcp_LayerStack_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &_this->GetRelocatesSourceToTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetRelocatesTargetToSource(pcp_LayerStack_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &_this->GetRelocatesTargetToSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetIncrementalRelocatesSourceToTarget(pcp_LayerStack_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &_this->GetIncrementalRelocatesSourceToTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetIncrementalRelocatesTargetToSource(pcp_LayerStack_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &_this->GetIncrementalRelocatesTargetToSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetPathsToPrimsWithRelocates(pcp_LayerStack_t const* _this, sdf_PathVector_t const** _result) {
    try {
        *_result = &_this->GetPathsToPrimsWithRelocates();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_GetExpressionForRelocatesAtPath(pcp_LayerStack_t* _this, sdf_Path_t const* path, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression(_this->GetExpressionForRelocatesAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStack_dtor(pcp_LayerStack_t* _this) {
    delete _this;
    return 0;
}

int pcp_LayerStackChanges_dtor(pcp_LayerStackChanges_t* _this) {
    delete _this;
    return 0;
}

int pcp_LayerStackPtr_GetIdentifier(pcp_LayerStackPtr_t const* _this, pcp_LayerStackIdentifier_t const** _result) {
    try {
        *_result = &(*_this)->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetLayers(pcp_LayerStackPtr_t const* _this, sdf_LayerRefPtrVector_t const** _result) {
    try {
        *_result = &(*_this)->GetLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetSessionLayers(pcp_LayerStackPtr_t const* _this, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector((*_this)->GetSessionLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetLayerTree(pcp_LayerStackPtr_t const* _this, sdf_LayerTreeHandle_t const** _result) {
    try {
        *_result = &(*_this)->GetLayerTree();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetLayerOffsetForLayer_00(pcp_LayerStackPtr_t const* _this, sdf_LayerHandle_t const* param00, sdf_LayerOffset_t const** _result) {
    try {
        *_result = (*_this)->GetLayerOffsetForLayer(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetLayerOffsetForLayer_01(pcp_LayerStackPtr_t const* _this, sdf_LayerRefPtr_t const* param00, sdf_LayerOffset_t const** _result) {
    try {
        *_result = (*_this)->GetLayerOffsetForLayer(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetLayerOffsetForLayer_02(pcp_LayerStackPtr_t const* _this, size_t layerIdx, sdf_LayerOffset_t const** _result) {
    try {
        *_result = (*_this)->GetLayerOffsetForLayer(layerIdx);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetMutedLayers(pcp_LayerStackPtr_t const* _this, std_StringSet_t const** _result) {
    try {
        *_result = &(*_this)->GetMutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetLocalErrors(pcp_LayerStackPtr_t const* _this, pcp_ErrorBaseSharedPtrVector_t** _result) {
    try {
        *_result = new std::vector<std::shared_ptr<pxr::PcpErrorBase>>((*_this)->GetLocalErrors());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_HasLayer_00(pcp_LayerStackPtr_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = (*_this)->HasLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_HasLayer_01(pcp_LayerStackPtr_t const* _this, sdf_LayerRefPtr_t const* layer, bool* _result) {
    try {
        *_result = (*_this)->HasLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetExpressionVariables(pcp_LayerStackPtr_t const* _this, pcp_ExpressionVariables_t const** _result) {
    try {
        *_result = &(*_this)->GetExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetExpressionVariableDependencies(pcp_LayerStackPtr_t const* _this, std_StringUnorderedSet_t const** _result) {
    try {
        *_result = &(*_this)->GetExpressionVariableDependencies();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetTimeCodesPerSecond(pcp_LayerStackPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetRelocatesSourceToTarget(pcp_LayerStackPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetRelocatesSourceToTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetRelocatesTargetToSource(pcp_LayerStackPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetRelocatesTargetToSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetIncrementalRelocatesSourceToTarget(pcp_LayerStackPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetIncrementalRelocatesSourceToTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetIncrementalRelocatesTargetToSource(pcp_LayerStackPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetIncrementalRelocatesTargetToSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetPathsToPrimsWithRelocates(pcp_LayerStackPtr_t const* _this, sdf_PathVector_t const** _result) {
    try {
        *_result = &(*_this)->GetPathsToPrimsWithRelocates();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_GetExpressionForRelocatesAtPath(pcp_LayerStackPtr_t* _this, sdf_Path_t const* path, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression((*_this)->GetExpressionForRelocatesAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackPtr_dtor(pcp_LayerStackPtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_LayerStackPtrVector_data(pcp_LayerStackPtrVector_t* _this, pcp_LayerStackPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_LayerStackPtrVector_data_const(pcp_LayerStackPtrVector_t const* _this, pcp_LayerStackPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int pcp_LayerStackPtrVector_empty(pcp_LayerStackPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int pcp_LayerStackPtrVector_size(pcp_LayerStackPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int pcp_LayerStackPtrVector_max_size(pcp_LayerStackPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int pcp_LayerStackPtrVector_capacity(pcp_LayerStackPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int pcp_LayerStackPtrVector_clear(pcp_LayerStackPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int pcp_LayerStackPtrVector_pop_back(pcp_LayerStackPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int pcp_LayerStackPtrVector_op_index(pcp_LayerStackPtrVector_t const* _this, size_t __n, pcp_LayerStackPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int pcp_LayerStackPtrVector_default(pcp_LayerStackPtrVector_t** _result) {
    *_result = new pxr::PcpLayerStackPtrVector();
    return 0;
}

int pcp_LayerStackPtrVector_dtor(pcp_LayerStackPtrVector_t* _this) {
    delete _this;
    return 0;
}

int pcp_LayerStackRefPtr_GetIdentifier(pcp_LayerStackRefPtr_t const* _this, pcp_LayerStackIdentifier_t const** _result) {
    try {
        *_result = &(*_this)->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetLayers(pcp_LayerStackRefPtr_t const* _this, sdf_LayerRefPtrVector_t const** _result) {
    try {
        *_result = &(*_this)->GetLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetSessionLayers(pcp_LayerStackRefPtr_t const* _this, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector((*_this)->GetSessionLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetLayerTree(pcp_LayerStackRefPtr_t const* _this, sdf_LayerTreeHandle_t const** _result) {
    try {
        *_result = &(*_this)->GetLayerTree();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetLayerOffsetForLayer_00(pcp_LayerStackRefPtr_t const* _this, sdf_LayerHandle_t const* param00, sdf_LayerOffset_t const** _result) {
    try {
        *_result = (*_this)->GetLayerOffsetForLayer(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetLayerOffsetForLayer_01(pcp_LayerStackRefPtr_t const* _this, sdf_LayerRefPtr_t const* param00, sdf_LayerOffset_t const** _result) {
    try {
        *_result = (*_this)->GetLayerOffsetForLayer(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetLayerOffsetForLayer_02(pcp_LayerStackRefPtr_t const* _this, size_t layerIdx, sdf_LayerOffset_t const** _result) {
    try {
        *_result = (*_this)->GetLayerOffsetForLayer(layerIdx);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetMutedLayers(pcp_LayerStackRefPtr_t const* _this, std_StringSet_t const** _result) {
    try {
        *_result = &(*_this)->GetMutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetLocalErrors(pcp_LayerStackRefPtr_t const* _this, pcp_ErrorBaseSharedPtrVector_t** _result) {
    try {
        *_result = new std::vector<std::shared_ptr<pxr::PcpErrorBase>>((*_this)->GetLocalErrors());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_HasLayer_00(pcp_LayerStackRefPtr_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = (*_this)->HasLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_HasLayer_01(pcp_LayerStackRefPtr_t const* _this, sdf_LayerRefPtr_t const* layer, bool* _result) {
    try {
        *_result = (*_this)->HasLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetExpressionVariables(pcp_LayerStackRefPtr_t const* _this, pcp_ExpressionVariables_t const** _result) {
    try {
        *_result = &(*_this)->GetExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetExpressionVariableDependencies(pcp_LayerStackRefPtr_t const* _this, std_StringUnorderedSet_t const** _result) {
    try {
        *_result = &(*_this)->GetExpressionVariableDependencies();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetTimeCodesPerSecond(pcp_LayerStackRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetRelocatesSourceToTarget(pcp_LayerStackRefPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetRelocatesSourceToTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetRelocatesTargetToSource(pcp_LayerStackRefPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetRelocatesTargetToSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetIncrementalRelocatesSourceToTarget(pcp_LayerStackRefPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetIncrementalRelocatesSourceToTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetIncrementalRelocatesTargetToSource(pcp_LayerStackRefPtr_t const* _this, sdf_RelocatesMap_t const** _result) {
    try {
        *_result = &(*_this)->GetIncrementalRelocatesTargetToSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetPathsToPrimsWithRelocates(pcp_LayerStackRefPtr_t const* _this, sdf_PathVector_t const** _result) {
    try {
        *_result = &(*_this)->GetPathsToPrimsWithRelocates();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_GetExpressionForRelocatesAtPath(pcp_LayerStackRefPtr_t* _this, sdf_Path_t const* path, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression((*_this)->GetExpressionForRelocatesAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackRefPtr_dtor(pcp_LayerStackRefPtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_LayerStackIdentifier_op_bool(pcp_LayerStackIdentifier_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_op_eq(pcp_LayerStackIdentifier_t const* _this, pcp_LayerStackIdentifier_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_op_neq(pcp_LayerStackIdentifier_t const* _this, pcp_LayerStackIdentifier_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_op_lt(pcp_LayerStackIdentifier_t const* _this, pcp_LayerStackIdentifier_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_op_lte(pcp_LayerStackIdentifier_t const* _this, pcp_LayerStackIdentifier_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_op_gt(pcp_LayerStackIdentifier_t const* _this, pcp_LayerStackIdentifier_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_op_gte(pcp_LayerStackIdentifier_t const* _this, pcp_LayerStackIdentifier_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_GetHash(pcp_LayerStackIdentifier_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetHash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_default(pcp_LayerStackIdentifier_t** _result) {
    try {
        *_result = new pxr::PcpLayerStackIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_ctor_01(sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, pcp_ExpressionVariablesSource_t const* expressionVariablesOverrideSource, pcp_LayerStackIdentifier_t** _result) {
    try {
        *_result = new pxr::PcpLayerStackIdentifier(*rootLayer, *sessionLayer, *pathResolverContext, *expressionVariablesOverrideSource);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_LayerStackIdentifier_dtor(pcp_LayerStackIdentifier_t* _this) {
    delete _this;
    return 0;
}

int pcp_MapExpression_Evaluate(pcp_MapExpression_t const* _this, pcp_MapFunction_t const** _result) {
    try {
        *_result = &_this->Evaluate();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_Swap(pcp_MapExpression_t* _this, pcp_MapExpression_t* other) {
    _this->Swap(*other);
    return 0;
}

int pcp_MapExpression_IsNull(pcp_MapExpression_t const* _this, bool* _result) {
    *_result = _this->IsNull();
    return 0;
}

int pcp_MapExpression_Identity(pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression(pxr::PcpMapExpression::Identity());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_Constant(pcp_MapFunction_t const* constValue, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression(pxr::PcpMapExpression::Constant(*constValue));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_Compose(pcp_MapExpression_t const* _this, pcp_MapExpression_t const* f, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression(_this->Compose(*f));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_Inverse(pcp_MapExpression_t const* _this, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression(_this->Inverse());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_AddRootIdentity(pcp_MapExpression_t const* _this, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression(_this->AddRootIdentity());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_IsConstantIdentity(pcp_MapExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConstantIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_IsIdentity(pcp_MapExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->IsIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_MapSourceToTarget(pcp_MapExpression_t const* _this, sdf_Path_t const* path, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->MapSourceToTarget(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_MapTargetToSource(pcp_MapExpression_t const* _this, sdf_Path_t const* path, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->MapTargetToSource(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_GetTimeOffset(pcp_MapExpression_t const* _this, sdf_LayerOffset_t const** _result) {
    try {
        *_result = &_this->GetTimeOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_GetString(pcp_MapExpression_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpression_default(pcp_MapExpression_t** _result) {
    *_result = new pxr::PcpMapExpression();
    return 0;
}

int pcp_MapExpression_dtor(pcp_MapExpression_t* _this) {
    delete _this;
    return 0;
}

int pcp_MapExpressionVariable_GetValue(pcp_MapExpressionVariable_t const* _this, pcp_MapFunction_t const** _result) {
    try {
        *_result = &_this->GetValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpressionVariable_GetExpression(pcp_MapExpressionVariable_t const* _this, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression(_this->GetExpression());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpressionVariable_dtor(pcp_MapExpressionVariable_t* _this) {
    delete _this;
    return 0;
}

int pcp_MapExpressionVariableUniquePtr_GetValue(pcp_MapExpressionVariableUniquePtr_t const* _this, pcp_MapFunction_t const** _result) {
    try {
        *_result = &(*_this)->GetValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpressionVariableUniquePtr_GetExpression(pcp_MapExpressionVariableUniquePtr_t const* _this, pcp_MapExpression_t** _result) {
    try {
        *_result = new pxr::PcpMapExpression((*_this)->GetExpression());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapExpressionVariableUniquePtr_dtor(pcp_MapExpressionVariableUniquePtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_MapFunction_IsNull(pcp_MapFunction_t const* _this, bool* _result) {
    try {
        *_result = _this->IsNull();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_IsIdentity(pcp_MapFunction_t const* _this, bool* _result) {
    try {
        *_result = _this->IsIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_IsIdentityPathMapping(pcp_MapFunction_t const* _this, bool* _result) {
    try {
        *_result = _this->IsIdentityPathMapping();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_HasRootIdentity(pcp_MapFunction_t const* _this, bool* _result) {
    try {
        *_result = _this->HasRootIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_Compose(pcp_MapFunction_t const* _this, pcp_MapFunction_t const* f, pcp_MapFunction_t** _result) {
    try {
        *_result = new pxr::PcpMapFunction(_this->Compose(*f));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_ComposeOffset(pcp_MapFunction_t const* _this, sdf_LayerOffset_t const* newOffset, pcp_MapFunction_t** _result) {
    try {
        *_result = new pxr::PcpMapFunction(_this->ComposeOffset(*newOffset));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_GetInverse(pcp_MapFunction_t const* _this, pcp_MapFunction_t** _result) {
    try {
        *_result = new pxr::PcpMapFunction(_this->GetInverse());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_GetSourceToTargetMap(pcp_MapFunction_t const* _this, pcp_MapFunctionPathMap_t** _result) {
    try {
        *_result = new pxr::PcpMapFunction::PathMap(_this->GetSourceToTargetMap());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_GetTimeOffset(pcp_MapFunction_t const* _this, sdf_LayerOffset_t const** _result) {
    try {
        *_result = &_this->GetTimeOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_GetString(pcp_MapFunction_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_Hash(pcp_MapFunction_t const* _this, size_t* _result) {
    try {
        *_result = _this->Hash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_Create(pcp_MapFunctionPathMap_t const* sourceToTargetMap, sdf_LayerOffset_t const* offset, pcp_MapFunction_t** _result) {
    try {
        *_result = new pxr::PcpMapFunction(pxr::PcpMapFunction::Create(*sourceToTargetMap, *offset));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_Identity(pcp_MapFunction_t const** _result) {
    try {
        *_result = &pxr::PcpMapFunction::Identity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_IdentityPathMap(pcp_MapFunctionPathMap_t const** _result) {
    try {
        *_result = &pxr::PcpMapFunction::IdentityPathMap();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_default(pcp_MapFunction_t** _result) {
    try {
        *_result = new pxr::PcpMapFunction();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_MapFunction_dtor(pcp_MapFunction_t* _this) {
    delete _this;
    return 0;
}

int pcp_MapFunctionPathMap_dtor(pcp_MapFunctionPathMap_t* _this) {
    delete _this;
    return 0;
}

int pcp_NamespaceEdits_Swap(pcp_NamespaceEdits_t* _this, pcp_NamespaceEdits_t* rhs) {
    try {
        _this->Swap(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NamespaceEdits_dtor(pcp_NamespaceEdits_t* _this) {
    delete _this;
    return 0;
}

int pcp_NamespaceEditsCacheSite_dtor(pcp_NamespaceEditsCacheSite_t* _this) {
    delete _this;
    return 0;
}

int pcp_NamespaceEditsLayerStackSite_dtor(pcp_NamespaceEditsLayerStackSite_t* _this) {
    delete _this;
    return 0;
}

int pcp_NodeRef_op_eq(pcp_NodeRef_t const* _this, pcp_NodeRef_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_op_neq(pcp_NodeRef_t const* _this, pcp_NodeRef_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_op_lt(pcp_NodeRef_t const* _this, pcp_NodeRef_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_op_lte(pcp_NodeRef_t const* _this, pcp_NodeRef_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_op_gt(pcp_NodeRef_t const* _this, pcp_NodeRef_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_op_gte(pcp_NodeRef_t const* _this, pcp_NodeRef_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetOwningGraph(pcp_NodeRef_t const* _this, pcp_PrimIndex_Graph_t** _result) {
    try {
        *_result = _this->GetOwningGraph();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetUniqueIdentifier(pcp_NodeRef_t const* _this, void** _result) {
    try {
        *_result = _this->GetUniqueIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetArcType(pcp_NodeRef_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetArcType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetParentNode(pcp_NodeRef_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetParentNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetChildrenRange(pcp_NodeRef_t const* _this, pcp_NodeRef_child_const_range_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef::child_const_range(_this->GetChildrenRange());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_InsertChild(pcp_NodeRef_t* _this, pcp_LayerStackSite_t const* site, pcp_Arc_t const* arc, pcp_ErrorBaseSharedPtr_t* error, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->InsertChild(*site, *arc, error));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_InsertChildSubgraph(pcp_NodeRef_t* _this, pcp_PrimIndex_GraphRefPtr_t const* subgraph, pcp_Arc_t const* arc, pcp_ErrorBaseSharedPtr_t* error, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->InsertChildSubgraph(*subgraph, *arc, error));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetOriginNode(pcp_NodeRef_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetOriginNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetOriginRootNode(pcp_NodeRef_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetOriginRootNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetRootNode(pcp_NodeRef_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetRootNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetMapToParent(pcp_NodeRef_t const* _this, pcp_MapExpression_t const** _result) {
    try {
        *_result = &_this->GetMapToParent();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetMapToRoot(pcp_NodeRef_t const* _this, pcp_MapExpression_t const** _result) {
    try {
        *_result = &_this->GetMapToRoot();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetSiblingNumAtOrigin(pcp_NodeRef_t const* _this, int* _result) {
    try {
        *_result = _this->GetSiblingNumAtOrigin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetNamespaceDepth(pcp_NodeRef_t const* _this, int* _result) {
    try {
        *_result = _this->GetNamespaceDepth();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetDepthBelowIntroduction(pcp_NodeRef_t const* _this, int* _result) {
    try {
        *_result = _this->GetDepthBelowIntroduction();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetPathAtIntroduction(pcp_NodeRef_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPathAtIntroduction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetIntroPath(pcp_NodeRef_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetIntroPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetSite(pcp_NodeRef_t const* _this, pcp_LayerStackSite_t** _result) {
    try {
        *_result = new pxr::PcpLayerStackSite(_this->GetSite());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetPath(pcp_NodeRef_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetLayerStack(pcp_NodeRef_t const* _this, pcp_LayerStackRefPtr_t const** _result) {
    try {
        *_result = &_this->GetLayerStack();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_IsRootNode(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRootNode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_SetIsDueToAncestor(pcp_NodeRef_t* _this, bool isDueToAncestor) {
    try {
        _this->SetIsDueToAncestor(isDueToAncestor);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_IsDueToAncestor(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDueToAncestor();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_SetHasSymmetry(pcp_NodeRef_t* _this, bool hasSymmetry) {
    try {
        _this->SetHasSymmetry(hasSymmetry);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_HasSymmetry(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSymmetry();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_SetPermission(pcp_NodeRef_t* _this, unsigned int perm) {
    try {
        _this->SetPermission(static_cast<pxr::SdfPermission>(perm));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetPermission(pcp_NodeRef_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_SetInert(pcp_NodeRef_t* _this, bool inert) {
    try {
        _this->SetInert(inert);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_IsInert(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInert();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_SetCulled(pcp_NodeRef_t* _this, bool culled) {
    try {
        _this->SetCulled(culled);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_IsCulled(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->IsCulled();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_SetRestricted(pcp_NodeRef_t* _this, bool restricted) {
    try {
        _this->SetRestricted(restricted);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_IsRestricted(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRestricted();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_CanContributeSpecs(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->CanContributeSpecs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_SetHasSpecs(pcp_NodeRef_t* _this, bool hasSpecs) {
    try {
        _this->SetHasSpecs(hasSpecs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_HasSpecs(pcp_NodeRef_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSpecs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_GetCompressedSdSite(pcp_NodeRef_t const* _this, size_t layerIndex, pcp_CompressedSdSite_t** _result) {
    try {
        *_result = new pxr::Pcp_CompressedSdSite(_this->GetCompressedSdSite(layerIndex));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_default(pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_NodeRef_dtor(pcp_NodeRef_t* _this) {
    delete _this;
    return 0;
}

int pcp_NodeRange_dtor(pcp_NodeRange_t* _this) {
    delete _this;
    return 0;
}

int pcp_NodeRef_child_const_iterator_dtor(pcp_NodeRef_child_const_iterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_NodeRef_child_const_reverse_iterator_dtor(pcp_NodeRef_child_const_reverse_iterator_t* _this) {
    delete _this;
    return 0;
}

int pcp_NodeRef_child_const_range_dtor(pcp_NodeRef_child_const_range_t* _this) {
    delete _this;
    return 0;
}

int pcp_PrimIndex_Swap(pcp_PrimIndex_t* _this, pcp_PrimIndex_t* rhs) {
    try {
        _this->Swap(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_swap(pcp_PrimIndex_t* _this, pcp_PrimIndex_t* rhs) {
    try {
        _this->swap(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_IsValid(pcp_PrimIndex_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_SetGraph(pcp_PrimIndex_t* _this, pcp_PrimIndex_GraphRefPtr_t const* graph) {
    try {
        _this->SetGraph(*graph);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetGraph(pcp_PrimIndex_t const* _this, pcp_PrimIndex_GraphRefPtr_t const** _result) {
    try {
        *_result = &_this->GetGraph();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetRootNode(pcp_PrimIndex_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetRootNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetPath(pcp_PrimIndex_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_HasSpecs(pcp_PrimIndex_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSpecs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_HasAnyPayloads(pcp_PrimIndex_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAnyPayloads();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_IsUsd(pcp_PrimIndex_t const* _this, bool* _result) {
    try {
        *_result = _this->IsUsd();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_IsInstanceable(pcp_PrimIndex_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetNodeRange(pcp_PrimIndex_t const* _this, unsigned int rangeType, pcp_NodeRange_t** _result) {
    try {
        *_result = new pxr::PcpNodeRange(_this->GetNodeRange(static_cast<pxr::PcpRangeType>(rangeType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetNodeIteratorAtNode(pcp_PrimIndex_t const* _this, pcp_NodeRef_t const* node, pcp_NodeIterator_t** _result) {
    try {
        *_result = new pxr::PcpNodeIterator(_this->GetNodeIteratorAtNode(*node));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetPrimRange(pcp_PrimIndex_t const* _this, unsigned int rangeType, pcp_PrimRange_t** _result) {
    try {
        *_result = new pxr::PcpPrimRange(_this->GetPrimRange(static_cast<pxr::PcpRangeType>(rangeType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetPrimRangeForNode(pcp_PrimIndex_t const* _this, pcp_NodeRef_t const* node, pcp_PrimRange_t** _result) {
    try {
        *_result = new pxr::PcpPrimRange(_this->GetPrimRangeForNode(*node));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetNodeProvidingSpec_00(pcp_PrimIndex_t const* _this, sdf_PrimSpecHandle_t const* primSpec, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetNodeProvidingSpec(*primSpec));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetNodeProvidingSpec_01(pcp_PrimIndex_t const* _this, sdf_LayerHandle_t const* layer, sdf_Path_t const* path, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetNodeProvidingSpec(*layer, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetLocalErrors(pcp_PrimIndex_t const* _this, pcp_ErrorBaseSharedPtrVector_t** _result) {
    try {
        *_result = new std::vector<std::shared_ptr<pxr::PcpErrorBase>>(_this->GetLocalErrors());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_PrintStatistics(pcp_PrimIndex_t const* _this) {
    try {
        _this->PrintStatistics();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_DumpToString(pcp_PrimIndex_t const* _this, bool includeInheritOriginInfo, bool includeMaps, std_String_t** _result) {
    try {
        *_result = new std::string(_this->DumpToString(includeInheritOriginInfo, includeMaps));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_DumpToDotGraph(pcp_PrimIndex_t const* _this, std_String_t const* filename, bool includeInheritOriginInfo, bool includeMaps) {
    try {
        _this->DumpToDotGraph(*filename, includeInheritOriginInfo, includeMaps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_ComputePrimChildNames(pcp_PrimIndex_t const* _this, tf_TokenVector_t* nameOrder, pcp_TokenSet_t* prohibitedNameSet) {
    try {
        _this->ComputePrimChildNames(nameOrder, prohibitedNameSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_ComputePrimPropertyNames(pcp_PrimIndex_t const* _this, tf_TokenVector_t* nameOrder) {
    try {
        _this->ComputePrimPropertyNames(nameOrder);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_ComposeAuthoredVariantSelections(pcp_PrimIndex_t const* _this, sdf_FileFormatFileFormatArguments_t** _result) {
    try {
        *_result = new pxr::SdfFileFormat::FileFormatArguments(_this->ComposeAuthoredVariantSelections());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_GetSelectionAppliedForVariantSet(pcp_PrimIndex_t const* _this, std_String_t const* variantSet, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSelectionAppliedForVariantSet(*variantSet));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_default(pcp_PrimIndex_t** _result) {
    try {
        *_result = new pxr::PcpPrimIndex();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndex_dtor(pcp_PrimIndex_t* _this) {
    delete _this;
    return 0;
}

int pcp_PrimIndexOutputs_dtor(pcp_PrimIndexOutputs_t* _this) {
    delete _this;
    return 0;
}

int pcp_PrimIndexInputs_Cache(pcp_PrimIndexInputs_t* _this, pcp_Cache_t* cache_, pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = &_this->Cache(cache_);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndexInputs_VariantFallbacks(pcp_PrimIndexInputs_t* _this, pcp_VariantFallbackMap_t const* map, pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = &_this->VariantFallbacks(map);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndexInputs_IncludedPayloads(pcp_PrimIndexInputs_t* _this, pcp_CachePayloadSet_t const* payloadSet, pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = &_this->IncludedPayloads(payloadSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndexInputs_Cull(pcp_PrimIndexInputs_t* _this, bool doCulling, pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = &_this->Cull(doCulling);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndexInputs_USD(pcp_PrimIndexInputs_t* _this, bool doUSD, pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = &_this->USD(doUSD);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndexInputs_FileFormatTarget(pcp_PrimIndexInputs_t* _this, std_String_t const* target, pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = &_this->FileFormatTarget(*target);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndexInputs_default(pcp_PrimIndexInputs_t** _result) {
    try {
        *_result = new pxr::PcpPrimIndexInputs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PrimIndexInputs_dtor(pcp_PrimIndexInputs_t* _this) {
    delete _this;
    return 0;
}

int pcp_PrimIndex_GraphRefPtr_dtor(pcp_PrimIndex_GraphRefPtr_t* _this) {
    delete _this;
    return 0;
}

int pcp_PrimRange_dtor(pcp_PrimRange_t* _this) {
    delete _this;
    return 0;
}

int pcp_PropertyIndex_Swap(pcp_PropertyIndex_t* _this, pcp_PropertyIndex_t* index) {
    try {
        _this->Swap(*index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIndex_IsEmpty(pcp_PropertyIndex_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIndex_GetPropertyRange(pcp_PropertyIndex_t const* _this, bool localOnly, pcp_PropertyRange_t** _result) {
    try {
        *_result = new pxr::PcpPropertyRange(_this->GetPropertyRange(localOnly));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIndex_GetLocalErrors(pcp_PropertyIndex_t const* _this, pcp_ErrorBaseSharedPtrVector_t** _result) {
    try {
        *_result = new std::vector<std::shared_ptr<pxr::PcpErrorBase>>(_this->GetLocalErrors());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIndex_GetNumLocalSpecs(pcp_PropertyIndex_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetNumLocalSpecs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIndex_default(pcp_PropertyIndex_t** _result) {
    try {
        *_result = new pxr::PcpPropertyIndex();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PropertyIndex_dtor(pcp_PropertyIndex_t* _this) {
    delete _this;
    return 0;
}

int pcp_PropertyRange_dtor(pcp_PropertyRange_t* _this) {
    delete _this;
    return 0;
}

int pcp_SdSiteRef_dtor(pcp_SdSiteRef_t* _this) {
    delete _this;
    return 0;
}

int pcp_Site_op_eq(pcp_Site_t const* _this, pcp_Site_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_op_neq(pcp_Site_t const* _this, pcp_Site_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_op_lt(pcp_Site_t const* _this, pcp_Site_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_op_lte(pcp_Site_t const* _this, pcp_Site_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_op_gt(pcp_Site_t const* _this, pcp_Site_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_op_gte(pcp_Site_t const* _this, pcp_Site_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator>=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_op_assign_00(pcp_Site_t* _this, pcp_Site_t const* param00, pcp_Site_t** _result) {
    try {
        *_result = &_this->operator=(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_op_assign_01(pcp_Site_t* _this, pcp_Site_t* param00, pcp_Site_t** _result) {
    try {
        *_result = &_this->operator=(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_default(pcp_Site_t** _result) {
    try {
        *_result = new pxr::PcpSite();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_ctor_01(pcp_LayerStackIdentifier_t const* param_00, sdf_Path_t const* path, pcp_Site_t** _result) {
    try {
        *_result = new pxr::PcpSite(*param_00, *path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_ctor_02(pcp_LayerStackPtr_t const* param_00, sdf_Path_t const* path, pcp_Site_t** _result) {
    try {
        *_result = new pxr::PcpSite(*param_00, *path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_ctor_03(sdf_LayerHandle_t const* param_00, sdf_Path_t const* path, pcp_Site_t** _result) {
    try {
        *_result = new pxr::PcpSite(*param_00, *path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_ctor_04(pcp_LayerStackSite_t const* param_00, pcp_Site_t** _result) {
    try {
        *_result = new pxr::PcpSite(*param_00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Site_dtor(pcp_Site_t* _this) {
    delete _this;
    return 0;
}

int pcp_TargetIndex_dtor(pcp_TargetIndex_t* _this) {
    delete _this;
    return 0;
}

int pcp_TokenSet_dtor(pcp_TokenSet_t* _this) {
    delete _this;
    return 0;
}

int pcp_VariantFallbackMap_dtor(pcp_VariantFallbackMap_t* _this) {
    delete _this;
    return 0;
}

int pcp_SiteTrackerSegment_dtor(pcp_SiteTrackerSegment_t* _this) {
    delete _this;
    return 0;
}

int pcp_Arc_get_type(pcp_Arc_t const* arc, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(bblext::Arc_get_type(*arc));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Arc_get_parent(pcp_Arc_t const* arc, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(bblext::Arc_get_parent(*arc));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Arc_get_origin(pcp_Arc_t const* arc, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(bblext::Arc_get_origin(*arc));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Arc_get_map_to_parent(pcp_Arc_t const* arc, pcp_MapExpression_t const** _result) {
    try {
        *_result = &bblext::Arc_get_map_to_parent(*arc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Arc_get_sibling_num_at_origin(pcp_Arc_t const* arc, int* _result) {
    try {
        *_result = bblext::Arc_get_sibling_num_at_origin(*arc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_Arc_get_namespace_depth(pcp_Arc_t const* arc, int* _result) {
    try {
        *_result = bblext::Arc_get_namespace_depth(*arc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PcpIsInheritArc(unsigned int arcType, bool* _result) {
    try {
        *_result = pxr::PcpIsInheritArc(static_cast<pxr::PcpArcType>(arcType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PcpIsSpecializeArc(unsigned int arcType, bool* _result) {
    try {
        *_result = pxr::PcpIsSpecializeArc(static_cast<pxr::PcpArcType>(arcType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int pcp_PcpIsClassBasedArc(unsigned int arcType, bool* _result) {
    try {
        *_result = pxr::PcpIsClassBasedArc(static_cast<pxr::PcpArcType>(arcType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_CopyFrom(sdf_AbstractData_t* _this, sdf_AbstractDataConstPtr_t const* source) {
    try {
        _this->CopyFrom(*source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_StreamsData(sdf_AbstractData_t const* _this, bool* _result) {
    try {
        *_result = _this->StreamsData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_IsDetached(sdf_AbstractData_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDetached();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_IsEmpty(sdf_AbstractData_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_Equals(sdf_AbstractData_t const* _this, sdf_AbstractDataRefPtr_t const* rhs, bool* _result) {
    try {
        *_result = _this->Equals(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_CreateSpec(sdf_AbstractData_t* _this, sdf_Path_t const* path, unsigned int specType) {
    try {
        _this->CreateSpec(*path, static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_HasSpec(sdf_AbstractData_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_EraseSpec(sdf_AbstractData_t* _this, sdf_Path_t const* path) {
    try {
        _this->EraseSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_MoveSpec(sdf_AbstractData_t* _this, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        _this->MoveSpec(*oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_GetSpecType(sdf_AbstractData_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_Has_00(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = _this->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_Has_01(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_HasSpecAndField_00(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = _this->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_HasSpecAndField_01(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = _this->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_Get(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->Get(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_Set_00(sdf_AbstractData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t const* value) {
    try {
        _this->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_Set_01(sdf_AbstractData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataConstValue_t const* value) {
    try {
        _this->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_Erase(sdf_AbstractData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName) {
    try {
        _this->Erase(*path, *fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_List(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->List(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_HasDictKey_00(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = _this->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_HasDictKey_01(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_GetDictValueByKey(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_SetDictValueByKey_00(sdf_AbstractData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_SetDictValueByKey_01(sdf_AbstractData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataConstValue_t const* value) {
    try {
        _this->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_EraseDictValueByKey(sdf_AbstractData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath) {
    try {
        _this->EraseDictValueByKey(*path, *fieldName, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_ListDictKeys(sdf_AbstractData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListDictKeys(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_ListAllTimeSamples(sdf_AbstractData_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>(_this->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_ListTimeSamplesForPath(sdf_AbstractData_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>(_this->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_GetBracketingTimeSamples(sdf_AbstractData_t const* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_GetNumTimeSamplesForPath(sdf_AbstractData_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = _this->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_GetBracketingTimeSamplesForPath(sdf_AbstractData_t const* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_QueryTimeSample_00(sdf_AbstractData_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* optionalValue, bool* _result) {
    try {
        *_result = _this->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_QueryTimeSample_01(sdf_AbstractData_t const* _this, sdf_Path_t const* path, double time, sdf_AbstractDataValue_t* optionalValue, bool* _result) {
    try {
        *_result = _this->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_SetTimeSample(sdf_AbstractData_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        _this->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_EraseTimeSample(sdf_AbstractData_t* _this, sdf_Path_t const* path, double time) {
    try {
        _this->EraseTimeSample(*path, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractData_dtor(sdf_AbstractData_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataPtr_CopyFrom(sdf_AbstractDataPtr_t* _this, sdf_AbstractDataConstPtr_t const* source) {
    try {
        (*_this)->CopyFrom(*source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_StreamsData(sdf_AbstractDataPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->StreamsData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_IsDetached(sdf_AbstractDataPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDetached();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_IsEmpty(sdf_AbstractDataPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_Equals(sdf_AbstractDataPtr_t const* _this, sdf_AbstractDataRefPtr_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->Equals(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_CreateSpec(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, unsigned int specType) {
    try {
        (*_this)->CreateSpec(*path, static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_HasSpec(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = (*_this)->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_EraseSpec(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path) {
    try {
        (*_this)->EraseSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_MoveSpec(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        (*_this)->MoveSpec(*oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_GetSpecType(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_Has_00(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_Has_01(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_HasSpecAndField_00(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_HasSpecAndField_01(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_Get(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->Get(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_Set_00(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t const* value) {
    try {
        (*_this)->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_Set_01(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataConstValue_t const* value) {
    try {
        (*_this)->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_Erase(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName) {
    try {
        (*_this)->Erase(*path, *fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_List(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->List(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_HasDictKey_00(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_HasDictKey_01(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_GetDictValueByKey(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_SetDictValueByKey_00(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        (*_this)->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_SetDictValueByKey_01(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataConstValue_t const* value) {
    try {
        (*_this)->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_EraseDictValueByKey(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath) {
    try {
        (*_this)->EraseDictValueByKey(*path, *fieldName, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_ListDictKeys(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListDictKeys(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_ListAllTimeSamples(sdf_AbstractDataPtr_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_ListTimeSamplesForPath(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_GetBracketingTimeSamples(sdf_AbstractDataPtr_t const* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_GetNumTimeSamplesForPath(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = (*_this)->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_GetBracketingTimeSamplesForPath(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_QueryTimeSample_00(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_QueryTimeSample_01(sdf_AbstractDataPtr_t const* _this, sdf_Path_t const* path, double time, sdf_AbstractDataValue_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_SetTimeSample(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        (*_this)->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_EraseTimeSample(sdf_AbstractDataPtr_t* _this, sdf_Path_t const* path, double time) {
    try {
        (*_this)->EraseTimeSample(*path, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataPtr_dtor(sdf_AbstractDataPtr_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataPtrVector_data(sdf_AbstractDataPtrVector_t* _this, sdf_AbstractDataPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataPtrVector_data_const(sdf_AbstractDataPtrVector_t const* _this, sdf_AbstractDataPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataPtrVector_empty(sdf_AbstractDataPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_AbstractDataPtrVector_size(sdf_AbstractDataPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_AbstractDataPtrVector_max_size(sdf_AbstractDataPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_AbstractDataPtrVector_capacity(sdf_AbstractDataPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_AbstractDataPtrVector_clear(sdf_AbstractDataPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_AbstractDataPtrVector_pop_back(sdf_AbstractDataPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_AbstractDataPtrVector_op_index(sdf_AbstractDataPtrVector_t const* _this, size_t __n, sdf_AbstractDataPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_AbstractDataPtrVector_default(sdf_AbstractDataPtrVector_t** _result) {
    *_result = new pxr::SdfAbstractDataPtrVector();
    return 0;
}

int sdf_AbstractDataPtrVector_dtor(sdf_AbstractDataPtrVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataConstPtr_StreamsData(sdf_AbstractDataConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->StreamsData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_IsDetached(sdf_AbstractDataConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDetached();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_IsEmpty(sdf_AbstractDataConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_Equals(sdf_AbstractDataConstPtr_t const* _this, sdf_AbstractDataRefPtr_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->Equals(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_HasSpec(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = (*_this)->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_GetSpecType(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_Has_00(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_Has_01(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_HasSpecAndField_00(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_HasSpecAndField_01(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_Get(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->Get(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_List(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->List(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_HasDictKey_00(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_HasDictKey_01(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_GetDictValueByKey(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_ListDictKeys(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListDictKeys(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_ListAllTimeSamples(sdf_AbstractDataConstPtr_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_ListTimeSamplesForPath(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_GetBracketingTimeSamples(sdf_AbstractDataConstPtr_t const* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_GetNumTimeSamplesForPath(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = (*_this)->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_GetBracketingTimeSamplesForPath(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_QueryTimeSample_00(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_QueryTimeSample_01(sdf_AbstractDataConstPtr_t const* _this, sdf_Path_t const* path, double time, sdf_AbstractDataValue_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstPtr_dtor(sdf_AbstractDataConstPtr_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataConstPtrVector_data(sdf_AbstractDataConstPtrVector_t* _this, sdf_AbstractDataConstPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataConstPtrVector_data_const(sdf_AbstractDataConstPtrVector_t const* _this, sdf_AbstractDataConstPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataConstPtrVector_empty(sdf_AbstractDataConstPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_AbstractDataConstPtrVector_size(sdf_AbstractDataConstPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_AbstractDataConstPtrVector_max_size(sdf_AbstractDataConstPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_AbstractDataConstPtrVector_capacity(sdf_AbstractDataConstPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_AbstractDataConstPtrVector_clear(sdf_AbstractDataConstPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_AbstractDataConstPtrVector_pop_back(sdf_AbstractDataConstPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_AbstractDataConstPtrVector_op_index(sdf_AbstractDataConstPtrVector_t const* _this, size_t __n, sdf_AbstractDataConstPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_AbstractDataConstPtrVector_default(sdf_AbstractDataConstPtrVector_t** _result) {
    *_result = new pxr::SdfAbstractDataConstPtrVector();
    return 0;
}

int sdf_AbstractDataConstPtrVector_dtor(sdf_AbstractDataConstPtrVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataRefPtr_CopyFrom(sdf_AbstractDataRefPtr_t* _this, sdf_AbstractDataConstPtr_t const* source) {
    try {
        (*_this)->CopyFrom(*source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_StreamsData(sdf_AbstractDataRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->StreamsData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_IsDetached(sdf_AbstractDataRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDetached();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_IsEmpty(sdf_AbstractDataRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_Equals(sdf_AbstractDataRefPtr_t const* _this, sdf_AbstractDataRefPtr_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->Equals(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_CreateSpec(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, unsigned int specType) {
    try {
        (*_this)->CreateSpec(*path, static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_HasSpec(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = (*_this)->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_EraseSpec(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path) {
    try {
        (*_this)->EraseSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_MoveSpec(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        (*_this)->MoveSpec(*oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_GetSpecType(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_Has_00(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_Has_01(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_HasSpecAndField_00(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_HasSpecAndField_01(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_Get(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->Get(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_Set_00(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t const* value) {
    try {
        (*_this)->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_Set_01(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataConstValue_t const* value) {
    try {
        (*_this)->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_Erase(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName) {
    try {
        (*_this)->Erase(*path, *fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_List(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->List(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_HasDictKey_00(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_HasDictKey_01(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_GetDictValueByKey(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_SetDictValueByKey_00(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        (*_this)->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_SetDictValueByKey_01(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataConstValue_t const* value) {
    try {
        (*_this)->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_EraseDictValueByKey(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath) {
    try {
        (*_this)->EraseDictValueByKey(*path, *fieldName, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_ListDictKeys(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListDictKeys(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_ListAllTimeSamples(sdf_AbstractDataRefPtr_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_ListTimeSamplesForPath(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_GetBracketingTimeSamples(sdf_AbstractDataRefPtr_t const* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_GetNumTimeSamplesForPath(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = (*_this)->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_GetBracketingTimeSamplesForPath(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_QueryTimeSample_00(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_QueryTimeSample_01(sdf_AbstractDataRefPtr_t const* _this, sdf_Path_t const* path, double time, sdf_AbstractDataValue_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_SetTimeSample(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        (*_this)->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_EraseTimeSample(sdf_AbstractDataRefPtr_t* _this, sdf_Path_t const* path, double time) {
    try {
        (*_this)->EraseTimeSample(*path, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataRefPtr_dtor(sdf_AbstractDataRefPtr_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataRefPtrVector_data(sdf_AbstractDataRefPtrVector_t* _this, sdf_AbstractDataRefPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataRefPtrVector_data_const(sdf_AbstractDataRefPtrVector_t const* _this, sdf_AbstractDataRefPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataRefPtrVector_empty(sdf_AbstractDataRefPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_AbstractDataRefPtrVector_size(sdf_AbstractDataRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_AbstractDataRefPtrVector_max_size(sdf_AbstractDataRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_AbstractDataRefPtrVector_capacity(sdf_AbstractDataRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_AbstractDataRefPtrVector_clear(sdf_AbstractDataRefPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_AbstractDataRefPtrVector_pop_back(sdf_AbstractDataRefPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_AbstractDataRefPtrVector_op_index(sdf_AbstractDataRefPtrVector_t const* _this, size_t __n, sdf_AbstractDataRefPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_AbstractDataRefPtrVector_default(sdf_AbstractDataRefPtrVector_t** _result) {
    *_result = new pxr::SdfAbstractDataRefPtrVector();
    return 0;
}

int sdf_AbstractDataRefPtrVector_dtor(sdf_AbstractDataRefPtrVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataConstRefPtr_StreamsData(sdf_AbstractDataConstRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->StreamsData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_IsDetached(sdf_AbstractDataConstRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDetached();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_IsEmpty(sdf_AbstractDataConstRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_Equals(sdf_AbstractDataConstRefPtr_t const* _this, sdf_AbstractDataRefPtr_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->Equals(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_HasSpec(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = (*_this)->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_GetSpecType(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_Has_00(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_Has_01(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_HasSpecAndField_00(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_HasSpecAndField_01(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = (*_this)->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_Get(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->Get(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_List(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->List(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_HasDictKey_00(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_HasDictKey_01(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_GetDictValueByKey(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_ListDictKeys(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListDictKeys(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_ListAllTimeSamples(sdf_AbstractDataConstRefPtr_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_ListTimeSamplesForPath(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_GetBracketingTimeSamples(sdf_AbstractDataConstRefPtr_t const* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_GetNumTimeSamplesForPath(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = (*_this)->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_GetBracketingTimeSamplesForPath(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_QueryTimeSample_00(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_QueryTimeSample_01(sdf_AbstractDataConstRefPtr_t const* _this, sdf_Path_t const* path, double time, sdf_AbstractDataValue_t* optionalValue, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstRefPtr_dtor(sdf_AbstractDataConstRefPtr_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_data(sdf_AbstractDataConstRefPtrVector_t* _this, sdf_AbstractDataConstRefPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_data_const(sdf_AbstractDataConstRefPtrVector_t const* _this, sdf_AbstractDataConstRefPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_empty(sdf_AbstractDataConstRefPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_size(sdf_AbstractDataConstRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_max_size(sdf_AbstractDataConstRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_capacity(sdf_AbstractDataConstRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_clear(sdf_AbstractDataConstRefPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_pop_back(sdf_AbstractDataConstRefPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_op_index(sdf_AbstractDataConstRefPtrVector_t const* _this, size_t __n, sdf_AbstractDataConstRefPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_default(sdf_AbstractDataConstRefPtrVector_t** _result) {
    *_result = new pxr::SdfAbstractDataConstRefPtrVector();
    return 0;
}

int sdf_AbstractDataConstRefPtrVector_dtor(sdf_AbstractDataConstRefPtrVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataValue_StoreValue(sdf_AbstractDataValue_t* _this, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->StoreValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataValue_StoreValue_block(sdf_AbstractDataValue_t* _this, sdf_ValueBlock_t const* block, bool* _result) {
    try {
        *_result = _this->StoreValue(*block);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataValue_dtor(sdf_AbstractDataValue_t* _this) {
    delete _this;
    return 0;
}

int sdf_AbstractDataConstValue_GetValue(sdf_AbstractDataConstValue_t const* _this, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstValue_IsEqual(sdf_AbstractDataConstValue_t const* _this, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->IsEqual(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AbstractDataConstValue_dtor(sdf_AbstractDataConstValue_t* _this) {
    delete _this;
    return 0;
}

int sdf_Allowed_IsAllowed(sdf_Allowed_t const* _this, std_String_t* whyNot, bool* _result) {
    try {
        *_result = _this->IsAllowed(whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Allowed_GetWhyNot(sdf_Allowed_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetWhyNot();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Allowed_new(sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Allowed_from_bool(bool param00, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Allowed_from_string(char const* param00, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Allowed_from_bool_and_string(bool param00, char const* param01, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(param00, param01);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Allowed_dtor(sdf_Allowed_t* _this) {
    delete _this;
    return 0;
}

int sdf_AssetPath_op_eq(sdf_AssetPath_t const* _this, sdf_AssetPath_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AssetPath_op_neq(sdf_AssetPath_t const* _this, sdf_AssetPath_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AssetPath_op_lt(sdf_AssetPath_t const* _this, sdf_AssetPath_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AssetPath_new(sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AssetPath_dtor(sdf_AssetPath_t* _this) {
    delete _this;
    return 0;
}

int sdf_AssetPathArray_dtor(sdf_AssetPathArray_t* _this) {
    delete _this;
    return 0;
}

int sdf_AttributeSpec_New(sdf_PrimSpecHandle_t const* owner, std_String_t const* name, sdf_ValueTypeName_t const* typeName, unsigned int variability, bool custom, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle(pxr::SdfAttributeSpec::New(*owner, *name, *typeName, static_cast<pxr::SdfVariability>(variability), custom));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasConnectionPaths(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasConnectionPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ClearConnectionPaths(sdf_AttributeSpec_t* _this) {
    try {
        _this->ClearConnectionPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetAllowedTokens(sdf_AttributeSpec_t const* _this, vt_TokenArray_t** _result) {
    try {
        *_result = new pxr::VtTokenArray(_this->GetAllowedTokens());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasAllowedTokens(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAllowedTokens();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetAllowedTokens(sdf_AttributeSpec_t* _this, vt_TokenArray_t const* allowedTokens) {
    try {
        _this->SetAllowedTokens(*allowedTokens);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ClearAllowedTokens(sdf_AttributeSpec_t* _this) {
    try {
        _this->ClearAllowedTokens();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetDisplayUnit(sdf_AttributeSpec_t const* _this, tf_Enum_t** _result) {
    try {
        *_result = new pxr::TfEnum(_this->GetDisplayUnit());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetDisplayUnit(sdf_AttributeSpec_t* _this, tf_Enum_t const* displayUnit) {
    try {
        _this->SetDisplayUnit(*displayUnit);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasDisplayUnit(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasDisplayUnit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ClearDisplayUnit(sdf_AttributeSpec_t* _this) {
    try {
        _this->ClearDisplayUnit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetColorSpace(sdf_AttributeSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetColorSpace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetColorSpace(sdf_AttributeSpec_t* _this, tf_Token_t const* colorSpace) {
    try {
        _this->SetColorSpace(*colorSpace);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasColorSpace(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasColorSpace();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ClearColorSpace(sdf_AttributeSpec_t* _this) {
    try {
        _this->ClearColorSpace();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetRoleName(sdf_AttributeSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetRoleName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetName(sdf_AttributeSpec_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetNameToken(sdf_AttributeSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_CanSetName(sdf_AttributeSpec_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = _this->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetName(sdf_AttributeSpec_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = _this->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetOwner(sdf_AttributeSpec_t const* _this, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle(_this->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetCustomData(sdf_AttributeSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetAssetInfo(sdf_AttributeSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetCustomData(sdf_AttributeSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetAssetInfo(sdf_AttributeSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetDisplayGroup(sdf_AttributeSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetDisplayGroup(sdf_AttributeSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDisplayGroup(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetDisplayName(sdf_AttributeSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetDisplayName(sdf_AttributeSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDisplayName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetDocumentation(sdf_AttributeSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetDocumentation(sdf_AttributeSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetHidden(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetHidden(sdf_AttributeSpec_t* _this, bool value) {
    try {
        _this->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetPermission(sdf_AttributeSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetPermission(sdf_AttributeSpec_t* _this, unsigned int value) {
    try {
        _this->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetPrefix(sdf_AttributeSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetPrefix(sdf_AttributeSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetSuffix(sdf_AttributeSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetSuffix(sdf_AttributeSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetSymmetricPeer(sdf_AttributeSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetSymmetricPeer(sdf_AttributeSpec_t* _this, std_String_t const* peerName) {
    try {
        _this->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetSymmetryArguments(sdf_AttributeSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetSymmetryArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetSymmetryArgument(sdf_AttributeSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetSymmetryArgument(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetSymmetryFunction(sdf_AttributeSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetSymmetryFunction(sdf_AttributeSpec_t* _this, tf_Token_t const* functionName) {
    try {
        _this->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetTimeSampleMap(sdf_AttributeSpec_t const* _this, sdf_TimeSampleMap_t** _result) {
    try {
        *_result = new pxr::SdfTimeSampleMap(_this->GetTimeSampleMap());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetValueType(sdf_AttributeSpec_t const* _this, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetValueType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetTypeName(sdf_AttributeSpec_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetDefaultValue(sdf_AttributeSpec_t const* _this, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetDefaultValue());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetDefaultValue(sdf_AttributeSpec_t* _this, vt_Value_t const* defaultValue, bool* _result) {
    try {
        *_result = _this->SetDefaultValue(*defaultValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasDefaultValue(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ClearDefaultValue(sdf_AttributeSpec_t* _this) {
    try {
        _this->ClearDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetComment(sdf_AttributeSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetComment(sdf_AttributeSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_IsCustom(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetCustom(sdf_AttributeSpec_t* _this, bool custom) {
    try {
        _this->SetCustom(custom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetVariability(sdf_AttributeSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasOnlyRequiredFields(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasOnlyRequiredFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetSchema(sdf_AttributeSpec_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetSpecType(sdf_AttributeSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_IsDormant(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetLayer(sdf_AttributeSpec_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetPath(sdf_AttributeSpec_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_PermissionToEdit(sdf_AttributeSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ListInfoKeys(sdf_AttributeSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetMetaDataInfoKeys(sdf_AttributeSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetMetaDataDisplayGroup(sdf_AttributeSpec_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetInfo(sdf_AttributeSpec_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetInfo(sdf_AttributeSpec_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        _this->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetInfoDictionaryValue(sdf_AttributeSpec_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        _this->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasInfo(sdf_AttributeSpec_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ClearInfo(sdf_AttributeSpec_t* _this, tf_Token_t const* key) {
    try {
        _this->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetTypeForInfo(sdf_AttributeSpec_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetFallbackForInfo(sdf_AttributeSpec_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_IsInert(sdf_AttributeSpec_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = _this->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ListFields(sdf_AttributeSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_HasField_00(sdf_AttributeSpec_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_GetField(sdf_AttributeSpec_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_SetField_00(sdf_AttributeSpec_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_ClearField(sdf_AttributeSpec_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_op_eq(sdf_AttributeSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_op_lt(sdf_AttributeSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_default(sdf_AttributeSpec_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpec_dtor(sdf_AttributeSpec_t* _this) {
    delete _this;
    return 0;
}

int sdf_AttributeSpecHandle_HasConnectionPaths(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasConnectionPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ClearConnectionPaths(sdf_AttributeSpecHandle_t* _this) {
    try {
        (*_this)->ClearConnectionPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetAllowedTokens(sdf_AttributeSpecHandle_t const* _this, vt_TokenArray_t** _result) {
    try {
        *_result = new pxr::VtTokenArray((*_this)->GetAllowedTokens());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_HasAllowedTokens(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasAllowedTokens();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetAllowedTokens(sdf_AttributeSpecHandle_t* _this, vt_TokenArray_t const* allowedTokens) {
    try {
        (*_this)->SetAllowedTokens(*allowedTokens);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ClearAllowedTokens(sdf_AttributeSpecHandle_t* _this) {
    try {
        (*_this)->ClearAllowedTokens();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetDisplayUnit(sdf_AttributeSpecHandle_t const* _this, tf_Enum_t** _result) {
    try {
        *_result = new pxr::TfEnum((*_this)->GetDisplayUnit());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetDisplayUnit(sdf_AttributeSpecHandle_t* _this, tf_Enum_t const* displayUnit) {
    try {
        (*_this)->SetDisplayUnit(*displayUnit);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_HasDisplayUnit(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasDisplayUnit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ClearDisplayUnit(sdf_AttributeSpecHandle_t* _this) {
    try {
        (*_this)->ClearDisplayUnit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetColorSpace(sdf_AttributeSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetColorSpace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetColorSpace(sdf_AttributeSpecHandle_t* _this, tf_Token_t const* colorSpace) {
    try {
        (*_this)->SetColorSpace(*colorSpace);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_HasColorSpace(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasColorSpace();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ClearColorSpace(sdf_AttributeSpecHandle_t* _this) {
    try {
        (*_this)->ClearColorSpace();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetRoleName(sdf_AttributeSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetRoleName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetName(sdf_AttributeSpecHandle_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetNameToken(sdf_AttributeSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_CanSetName(sdf_AttributeSpecHandle_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = (*_this)->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetName(sdf_AttributeSpecHandle_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = (*_this)->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetOwner(sdf_AttributeSpecHandle_t const* _this, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle((*_this)->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetCustomData(sdf_AttributeSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetAssetInfo(sdf_AttributeSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetCustomData(sdf_AttributeSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetAssetInfo(sdf_AttributeSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetDisplayGroup(sdf_AttributeSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetDisplayGroup(sdf_AttributeSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDisplayGroup(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetDisplayName(sdf_AttributeSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetDisplayName(sdf_AttributeSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDisplayName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetDocumentation(sdf_AttributeSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetDocumentation(sdf_AttributeSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetHidden(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetHidden(sdf_AttributeSpecHandle_t* _this, bool value) {
    try {
        (*_this)->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetPermission(sdf_AttributeSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetPermission(sdf_AttributeSpecHandle_t* _this, unsigned int value) {
    try {
        (*_this)->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetPrefix(sdf_AttributeSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetPrefix(sdf_AttributeSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetSuffix(sdf_AttributeSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetSuffix(sdf_AttributeSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetSymmetricPeer(sdf_AttributeSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetSymmetricPeer(sdf_AttributeSpecHandle_t* _this, std_String_t const* peerName) {
    try {
        (*_this)->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetSymmetryArguments(sdf_AttributeSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetSymmetryArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetSymmetryArgument(sdf_AttributeSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetSymmetryArgument(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetSymmetryFunction(sdf_AttributeSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetSymmetryFunction(sdf_AttributeSpecHandle_t* _this, tf_Token_t const* functionName) {
    try {
        (*_this)->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetTimeSampleMap(sdf_AttributeSpecHandle_t const* _this, sdf_TimeSampleMap_t** _result) {
    try {
        *_result = new pxr::SdfTimeSampleMap((*_this)->GetTimeSampleMap());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetValueType(sdf_AttributeSpecHandle_t const* _this, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetValueType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetTypeName(sdf_AttributeSpecHandle_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName((*_this)->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetDefaultValue(sdf_AttributeSpecHandle_t const* _this, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetDefaultValue());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetDefaultValue(sdf_AttributeSpecHandle_t* _this, vt_Value_t const* defaultValue, bool* _result) {
    try {
        *_result = (*_this)->SetDefaultValue(*defaultValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_HasDefaultValue(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ClearDefaultValue(sdf_AttributeSpecHandle_t* _this) {
    try {
        (*_this)->ClearDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetComment(sdf_AttributeSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetComment(sdf_AttributeSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_IsCustom(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetCustom(sdf_AttributeSpecHandle_t* _this, bool custom) {
    try {
        (*_this)->SetCustom(custom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetVariability(sdf_AttributeSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_HasOnlyRequiredFields(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasOnlyRequiredFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetSchema(sdf_AttributeSpecHandle_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &(*_this)->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetSpecType(sdf_AttributeSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_IsDormant(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetLayer(sdf_AttributeSpecHandle_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle((*_this)->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetPath(sdf_AttributeSpecHandle_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath((*_this)->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_PermissionToEdit(sdf_AttributeSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ListInfoKeys(sdf_AttributeSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetMetaDataInfoKeys(sdf_AttributeSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetMetaDataDisplayGroup(sdf_AttributeSpecHandle_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetInfo(sdf_AttributeSpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetInfo(sdf_AttributeSpecHandle_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        (*_this)->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetInfoDictionaryValue(sdf_AttributeSpecHandle_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        (*_this)->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_HasInfo(sdf_AttributeSpecHandle_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ClearInfo(sdf_AttributeSpecHandle_t* _this, tf_Token_t const* key) {
    try {
        (*_this)->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetTypeForInfo(sdf_AttributeSpecHandle_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetFallbackForInfo(sdf_AttributeSpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &(*_this)->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_IsInert(sdf_AttributeSpecHandle_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = (*_this)->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ListFields(sdf_AttributeSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_HasField_00(sdf_AttributeSpecHandle_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_GetField(sdf_AttributeSpecHandle_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_SetField_00(sdf_AttributeSpecHandle_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = (*_this)->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_ClearField(sdf_AttributeSpecHandle_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_op_eq(sdf_AttributeSpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_op_lt(sdf_AttributeSpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AttributeSpecHandle_dtor(sdf_AttributeSpecHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_AttributeSpecHandleVector_data(sdf_AttributeSpecHandleVector_t* _this, sdf_AttributeSpecHandle_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AttributeSpecHandleVector_data_const(sdf_AttributeSpecHandleVector_t const* _this, sdf_AttributeSpecHandle_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_AttributeSpecHandleVector_empty(sdf_AttributeSpecHandleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_AttributeSpecHandleVector_size(sdf_AttributeSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_AttributeSpecHandleVector_max_size(sdf_AttributeSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_AttributeSpecHandleVector_capacity(sdf_AttributeSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_AttributeSpecHandleVector_clear(sdf_AttributeSpecHandleVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_AttributeSpecHandleVector_pop_back(sdf_AttributeSpecHandleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_AttributeSpecHandleVector_op_index(sdf_AttributeSpecHandleVector_t const* _this, size_t __n, sdf_AttributeSpecHandle_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_AttributeSpecHandleVector_default(sdf_AttributeSpecHandleVector_t** _result) {
    *_result = new pxr::SdfAttributeSpecHandleVector();
    return 0;
}

int sdf_AttributeSpecHandleVector_dtor(sdf_AttributeSpecHandleVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_AttributeSpecView_dtor(sdf_AttributeSpecView_t* _this) {
    delete _this;
    return 0;
}

int sdf_ChangeBlock_default(sdf_ChangeBlock_t** _result) {
    try {
        *_result = new pxr::SdfChangeBlock();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ChangeBlock_dtor(sdf_ChangeBlock_t* _this) {
    delete _this;
    return 0;
}

int sdf_ChangeList_dtor(sdf_ChangeList_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfChangeListEntry_HasInfoChange(sdf_SdfChangeListEntry_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfoChange(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfChangeListEntry_default(sdf_SdfChangeListEntry_t** _result) {
    try {
        *_result = new pxr::SdfChangeList::Entry();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfChangeListEntry_dtor(sdf_SdfChangeListEntry_t* _this) {
    delete _this;
    return 0;
}

int sdf_ChangeListEntryList_dtor(sdf_ChangeListEntryList_t* _this) {
    delete _this;
    return 0;
}

int sdf_PathChangeListEntryPair_dtor(sdf_PathChangeListEntryPair_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerChangeListVec_dtor(sdf_LayerChangeListVec_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfCopySpecsValueEdit_dtor(sdf_SdfCopySpecsValueEdit_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfData_StreamsData(sdf_SdfData_t const* _this, bool* _result) {
    try {
        *_result = _this->StreamsData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_IsDetached(sdf_SdfData_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDetached();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_CreateSpec(sdf_SdfData_t* _this, sdf_Path_t const* path, unsigned int specType) {
    try {
        _this->CreateSpec(*path, static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_HasSpec(sdf_SdfData_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_EraseSpec(sdf_SdfData_t* _this, sdf_Path_t const* path) {
    try {
        _this->EraseSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_MoveSpec(sdf_SdfData_t* _this, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        _this->MoveSpec(*oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_GetSpecType(sdf_SdfData_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_Has_00(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = _this->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_Has_01(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->Has(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_HasSpecAndField_00(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataValue_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = _this->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_HasSpecAndField_01(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, unsigned int* specType, bool* _result) {
    try {
        *_result = _this->HasSpecAndField(*path, *fieldName, value, reinterpret_cast<pxr::SdfSpecType*>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_Get(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->Get(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_Set_00(sdf_SdfData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t const* value) {
    try {
        _this->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_Set_01(sdf_SdfData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, sdf_AbstractDataConstValue_t const* value) {
    try {
        _this->Set(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_Erase(sdf_SdfData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName) {
    try {
        _this->Erase(*path, *fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_List(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->List(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_ListAllTimeSamples(sdf_SdfData_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>(_this->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_ListTimeSamplesForPath(sdf_SdfData_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>(_this->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_GetBracketingTimeSamples(sdf_SdfData_t const* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_GetNumTimeSamplesForPath(sdf_SdfData_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = _this->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_GetBracketingTimeSamplesForPath(sdf_SdfData_t const* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_SetTimeSample(sdf_SdfData_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        _this->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_EraseTimeSample(sdf_SdfData_t* _this, sdf_Path_t const* path, double time) {
    try {
        _this->EraseTimeSample(*path, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_CopyFrom(sdf_SdfData_t* _this, sdf_AbstractDataConstPtr_t const* source) {
    try {
        _this->CopyFrom(*source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_IsEmpty(sdf_SdfData_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_Equals(sdf_SdfData_t const* _this, sdf_AbstractDataRefPtr_t const* rhs, bool* _result) {
    try {
        *_result = _this->Equals(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_HasDictKey_00(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataValue_t* value, bool* _result) {
    try {
        *_result = _this->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_HasDictKey_01(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->HasDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_GetDictValueByKey(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_SetDictValueByKey_00(sdf_SdfData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_SetDictValueByKey_01(sdf_SdfData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, sdf_AbstractDataConstValue_t const* value) {
    try {
        _this->SetDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_EraseDictValueByKey(sdf_SdfData_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath) {
    try {
        _this->EraseDictValueByKey(*path, *fieldName, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_ListDictKeys(sdf_SdfData_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListDictKeys(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_QueryTimeSample_00(sdf_SdfData_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* optionalValue, bool* _result) {
    try {
        *_result = _this->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_QueryTimeSample_01(sdf_SdfData_t const* _this, sdf_Path_t const* path, double time, sdf_AbstractDataValue_t* optionalValue, bool* _result) {
    try {
        *_result = _this->QueryTimeSample(*path, time, optionalValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_default(sdf_SdfData_t** _result) {
    try {
        *_result = new pxr::SdfData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfData_dtor(sdf_SdfData_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfFileFormat_GetSchema(sdf_SdfFileFormat_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetFormatId(sdf_SdfFileFormat_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetFormatId();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetTarget(sdf_SdfFileFormat_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetFileCookie(sdf_SdfFileFormat_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetFileCookie();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetVersionString(sdf_SdfFileFormat_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetVersionString();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_IsPrimaryFormatForExtensions(sdf_SdfFileFormat_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPrimaryFormatForExtensions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetFileExtensions(sdf_SdfFileFormat_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetFileExtensions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetPrimaryFileExtension(sdf_SdfFileFormat_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetPrimaryFileExtension();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_IsSupportedExtension(sdf_SdfFileFormat_t const* _this, std_String_t const* extension, bool* _result) {
    try {
        *_result = _this->IsSupportedExtension(*extension);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_IsPackage(sdf_SdfFileFormat_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPackage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetPackageRootLayerPath(sdf_SdfFileFormat_t const* _this, std_String_t const* resolvedPath, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetPackageRootLayerPath(*resolvedPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetDefaultFileFormatArguments(sdf_SdfFileFormat_t const* _this, sdf_FileFormatFileFormatArguments_t** _result) {
    try {
        *_result = new pxr::SdfFileFormat::FileFormatArguments(_this->GetDefaultFileFormatArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_InitData(sdf_SdfFileFormat_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr(_this->InitData(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_InitDetachedData(sdf_SdfFileFormat_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr(_this->InitDetachedData(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_NewLayer(sdf_SdfFileFormat_t const* _this, sdf_FileFormatConstPtr_t const* fileFormat, std_String_t const* identifier, std_String_t const* realPath, ar_AssetInfo_t const* assetInfo, sdf_FileFormatFileFormatArguments_t const* args, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(_this->NewLayer(*fileFormat, *identifier, *realPath, *assetInfo, *args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_ShouldSkipAnonymousReload(sdf_SdfFileFormat_t const* _this, bool* _result) {
    try {
        *_result = _this->ShouldSkipAnonymousReload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_ShouldReadAnonymousLayers(sdf_SdfFileFormat_t const* _this, bool* _result) {
    try {
        *_result = _this->ShouldReadAnonymousLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_CanRead(sdf_SdfFileFormat_t const* _this, std_String_t const* file, bool* _result) {
    try {
        *_result = _this->CanRead(*file);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_Read(sdf_SdfFileFormat_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = _this->Read(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_ReadDetached(sdf_SdfFileFormat_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = _this->ReadDetached(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_WriteToFile(sdf_SdfFileFormat_t const* _this, sdf_Layer_t const* layer, std_String_t const* filePath, std_String_t const* comment, sdf_FileFormatFileFormatArguments_t const* args, bool* _result) {
    try {
        *_result = _this->WriteToFile(*layer, *filePath, *comment, *args);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_ReadFromString(sdf_SdfFileFormat_t const* _this, sdf_Layer_t* layer, std_String_t const* str, bool* _result) {
    try {
        *_result = _this->ReadFromString(layer, *str);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_WriteToString(sdf_SdfFileFormat_t const* _this, sdf_Layer_t const* layer, std_String_t* str, std_String_t const* comment, bool* _result) {
    try {
        *_result = _this->WriteToString(*layer, str, *comment);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetExternalAssetDependencies(sdf_SdfFileFormat_t const* _this, sdf_Layer_t const* layer, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>(_this->GetExternalAssetDependencies(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_SupportsReading(sdf_SdfFileFormat_t const* _this, bool* _result) {
    try {
        *_result = _this->SupportsReading();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_SupportsWriting(sdf_SdfFileFormat_t const* _this, bool* _result) {
    try {
        *_result = _this->SupportsWriting();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_SupportsEditing(sdf_SdfFileFormat_t const* _this, bool* _result) {
    try {
        *_result = _this->SupportsEditing();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_GetFileExtension(std_String_t const* s, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::SdfFileFormat::GetFileExtension(*s));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FindAllFileFormatExtensions(std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>(pxr::SdfFileFormat::FindAllFileFormatExtensions());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FindAllDerivedFileFormatExtensions(tf_Type_t const* baseType, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>(pxr::SdfFileFormat::FindAllDerivedFileFormatExtensions(*baseType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FormatSupportsReading(std_String_t const* extension, std_String_t const* target, bool* _result) {
    try {
        *_result = pxr::SdfFileFormat::FormatSupportsReading(*extension, *target);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FormatSupportsWriting(std_String_t const* extension, std_String_t const* target, bool* _result) {
    try {
        *_result = pxr::SdfFileFormat::FormatSupportsWriting(*extension, *target);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FormatSupportsEditing(std_String_t const* extension, std_String_t const* target, bool* _result) {
    try {
        *_result = pxr::SdfFileFormat::FormatSupportsEditing(*extension, *target);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FindById(tf_Token_t const* formatId, sdf_FileFormatConstPtr_t** _result) {
    try {
        *_result = new pxr::SdfFileFormatConstPtr(pxr::SdfFileFormat::FindById(*formatId));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FindByExtension_00(std_String_t const* path, std_String_t const* target, sdf_FileFormatConstPtr_t** _result) {
    try {
        *_result = new pxr::SdfFileFormatConstPtr(pxr::SdfFileFormat::FindByExtension(*path, *target));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfFileFormat_FindByExtension_01(std_String_t const* path, sdf_FileFormatFileFormatArguments_t const* args, sdf_FileFormatConstPtr_t** _result) {
    try {
        *_result = new pxr::SdfFileFormatConstPtr(pxr::SdfFileFormat::FindByExtension(*path, *args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__ReadAndCopyLayerDataToMemory(sdf_FileFormatBase_t const* _this, sdf_Layer_t* layer, char const* resolvedPath, bool metadataOnly, bool* didCopyData, bool* _result) {
    try {
        *_result = _this->_ReadAndCopyLayerDataToMemory(layer, resolvedPath, metadataOnly, didCopyData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__InstantiateNewLayer(sdf_FileFormatBase_t const* _this, sdf_FileFormatConstPtr_t const* fileFormat, std_String_t const* identifier, std_String_t const* realPath, ar_AssetInfo_t const* assetInfo, sdf_FileFormatFileFormatArguments_t const* args, sdf_Layer_t** _result) {
    try {
        *_result = _this->_InstantiateNewLayer(*fileFormat, *identifier, *realPath, *assetInfo, *args);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__InstantiateNewLayer_base(sdf_FileFormatBase_t const* _this, sdf_FileFormatConstPtr_t const* fileFormat, char const* identifier, char const* realPath, ar_AssetInfo_t const* assetInfo, sdf_FileFormatFileFormatArguments_t const* args, sdf_Layer_t** _result) {
    try {
        *_result = _this->_InstantiateNewLayer_base(*fileFormat, identifier, realPath, *assetInfo, *args);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__ShouldSkipAnonymousReload(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->_ShouldSkipAnonymousReload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__ShouldSkipAnonymousReload_base(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->_ShouldSkipAnonymousReload_base();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__ShouldReadAnonymousLayers(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->_ShouldReadAnonymousLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__ShouldReadAnonymousLayers_base(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->_ShouldReadAnonymousLayers_base();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__InitDetachedData(sdf_FileFormatBase_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr(_this->_InitDetachedData(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__InitDetachedData_base(sdf_FileFormatBase_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr(_this->_InitDetachedData_base(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__ReadDetached(sdf_FileFormatBase_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = _this->_ReadDetached(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__ReadDetached_base(sdf_FileFormatBase_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = _this->_ReadDetached_base(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__SetLayerData(sdf_Layer_t* layer, sdf_AbstractDataRefPtr_t* data) {
    try {
        bblext::FileFormatBase::_SetLayerData(layer, *data);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__SetLayerData_with_hints(sdf_Layer_t* layer, sdf_AbstractDataRefPtr_t* data, sdf_LayerHints_t hints) {
    try {
        bblext::FileFormatBase::_SetLayerData_with_hints(layer, *data, hints);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase__GetLayerData(sdf_Layer_t const* layer, sdf_AbstractDataConstPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataConstPtr(bblext::FileFormatBase::_GetLayerData(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetSchema(sdf_FileFormatBase_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetFormatId(sdf_FileFormatBase_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetFormatId();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetTarget(sdf_FileFormatBase_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetFileCookie(sdf_FileFormatBase_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetFileCookie();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetVersionString(sdf_FileFormatBase_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetVersionString();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_IsPrimaryFormatForExtensions(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPrimaryFormatForExtensions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetFileExtensions(sdf_FileFormatBase_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetFileExtensions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetPrimaryFileExtension(sdf_FileFormatBase_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetPrimaryFileExtension();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_IsSupportedExtension(sdf_FileFormatBase_t const* _this, std_String_t const* extension, bool* _result) {
    try {
        *_result = _this->IsSupportedExtension(*extension);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_IsPackage(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPackage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetPackageRootLayerPath(sdf_FileFormatBase_t const* _this, std_String_t const* resolvedPath, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetPackageRootLayerPath(*resolvedPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetDefaultFileFormatArguments(sdf_FileFormatBase_t const* _this, sdf_FileFormatFileFormatArguments_t** _result) {
    try {
        *_result = new pxr::SdfFileFormat::FileFormatArguments(_this->GetDefaultFileFormatArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_InitData(sdf_FileFormatBase_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr(_this->InitData(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_InitDetachedData(sdf_FileFormatBase_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr(_this->InitDetachedData(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_NewLayer(sdf_FileFormatBase_t const* _this, sdf_FileFormatConstPtr_t const* fileFormat, std_String_t const* identifier, std_String_t const* realPath, ar_AssetInfo_t const* assetInfo, sdf_FileFormatFileFormatArguments_t const* args, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(_this->NewLayer(*fileFormat, *identifier, *realPath, *assetInfo, *args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_ShouldSkipAnonymousReload(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->ShouldSkipAnonymousReload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_ShouldReadAnonymousLayers(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->ShouldReadAnonymousLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_CanRead(sdf_FileFormatBase_t const* _this, std_String_t const* file, bool* _result) {
    try {
        *_result = _this->CanRead(*file);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_Read(sdf_FileFormatBase_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = _this->Read(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_ReadDetached(sdf_FileFormatBase_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = _this->ReadDetached(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_WriteToFile(sdf_FileFormatBase_t const* _this, sdf_Layer_t const* layer, std_String_t const* filePath, std_String_t const* comment, sdf_FileFormatFileFormatArguments_t const* args, bool* _result) {
    try {
        *_result = _this->WriteToFile(*layer, *filePath, *comment, *args);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_ReadFromString(sdf_FileFormatBase_t const* _this, sdf_Layer_t* layer, std_String_t const* str, bool* _result) {
    try {
        *_result = _this->ReadFromString(layer, *str);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_WriteToString(sdf_FileFormatBase_t const* _this, sdf_Layer_t const* layer, std_String_t* str, std_String_t const* comment, bool* _result) {
    try {
        *_result = _this->WriteToString(*layer, str, *comment);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_GetExternalAssetDependencies(sdf_FileFormatBase_t const* _this, sdf_Layer_t const* layer, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>(_this->GetExternalAssetDependencies(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_SupportsReading(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->SupportsReading();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_SupportsWriting(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->SupportsWriting();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_SupportsEditing(sdf_FileFormatBase_t const* _this, bool* _result) {
    try {
        *_result = _this->SupportsEditing();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_ctor(tf_Token_t const* formatId, tf_Token_t const* versionString, tf_Token_t const* target, char const* extension, sdf_FileFormatBase_t** _result) {
    try {
        *_result = new bblext::FileFormatBase(*formatId, *versionString, *target, extension);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatBase_dtor(sdf_FileFormatBase_t* _this) {
    delete _this;
    return 0;
}

int sdf_FileFormatConstPtr_GetSchema(sdf_FileFormatConstPtr_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &(*_this)->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetFormatId(sdf_FileFormatConstPtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetFormatId();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetTarget(sdf_FileFormatConstPtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetFileCookie(sdf_FileFormatConstPtr_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetFileCookie();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetVersionString(sdf_FileFormatConstPtr_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &(*_this)->GetVersionString();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_IsPrimaryFormatForExtensions(sdf_FileFormatConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsPrimaryFormatForExtensions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetFileExtensions(sdf_FileFormatConstPtr_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &(*_this)->GetFileExtensions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetPrimaryFileExtension(sdf_FileFormatConstPtr_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetPrimaryFileExtension();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_IsSupportedExtension(sdf_FileFormatConstPtr_t const* _this, std_String_t const* extension, bool* _result) {
    try {
        *_result = (*_this)->IsSupportedExtension(*extension);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_IsPackage(sdf_FileFormatConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsPackage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetPackageRootLayerPath(sdf_FileFormatConstPtr_t const* _this, std_String_t const* resolvedPath, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetPackageRootLayerPath(*resolvedPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetDefaultFileFormatArguments(sdf_FileFormatConstPtr_t const* _this, sdf_FileFormatFileFormatArguments_t** _result) {
    try {
        *_result = new pxr::SdfFileFormat::FileFormatArguments((*_this)->GetDefaultFileFormatArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_InitData(sdf_FileFormatConstPtr_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr((*_this)->InitData(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_InitDetachedData(sdf_FileFormatConstPtr_t const* _this, sdf_FileFormatFileFormatArguments_t const* args, sdf_AbstractDataRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfAbstractDataRefPtr((*_this)->InitDetachedData(*args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_NewLayer(sdf_FileFormatConstPtr_t const* _this, sdf_FileFormatConstPtr_t const* fileFormat, std_String_t const* identifier, std_String_t const* realPath, ar_AssetInfo_t const* assetInfo, sdf_FileFormatFileFormatArguments_t const* args, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr((*_this)->NewLayer(*fileFormat, *identifier, *realPath, *assetInfo, *args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_ShouldSkipAnonymousReload(sdf_FileFormatConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->ShouldSkipAnonymousReload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_ShouldReadAnonymousLayers(sdf_FileFormatConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->ShouldReadAnonymousLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_CanRead(sdf_FileFormatConstPtr_t const* _this, std_String_t const* file, bool* _result) {
    try {
        *_result = (*_this)->CanRead(*file);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_Read(sdf_FileFormatConstPtr_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = (*_this)->Read(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_ReadDetached(sdf_FileFormatConstPtr_t const* _this, sdf_Layer_t* layer, std_String_t const* resolvedPath, bool metadataOnly, bool* _result) {
    try {
        *_result = (*_this)->ReadDetached(layer, *resolvedPath, metadataOnly);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_WriteToFile(sdf_FileFormatConstPtr_t const* _this, sdf_Layer_t const* layer, std_String_t const* filePath, std_String_t const* comment, sdf_FileFormatFileFormatArguments_t const* args, bool* _result) {
    try {
        *_result = (*_this)->WriteToFile(*layer, *filePath, *comment, *args);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_ReadFromString(sdf_FileFormatConstPtr_t const* _this, sdf_Layer_t* layer, std_String_t const* str, bool* _result) {
    try {
        *_result = (*_this)->ReadFromString(layer, *str);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_WriteToString(sdf_FileFormatConstPtr_t const* _this, sdf_Layer_t const* layer, std_String_t* str, std_String_t const* comment, bool* _result) {
    try {
        *_result = (*_this)->WriteToString(*layer, str, *comment);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_GetExternalAssetDependencies(sdf_FileFormatConstPtr_t const* _this, sdf_Layer_t const* layer, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>((*_this)->GetExternalAssetDependencies(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_SupportsReading(sdf_FileFormatConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->SupportsReading();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_SupportsWriting(sdf_FileFormatConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->SupportsWriting();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_SupportsEditing(sdf_FileFormatConstPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->SupportsEditing();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FileFormatConstPtr_dtor(sdf_FileFormatConstPtr_t* _this) {
    delete _this;
    return 0;
}

int sdf_FileFormatFileFormatArguments_default(sdf_FileFormatFileFormatArguments_t** _result) {
    *_result = new pxr::SdfFileFormat::FileFormatArguments();
    return 0;
}

int sdf_FileFormatFileFormatArguments_dtor(sdf_FileFormatFileFormatArguments_t* _this) {
    delete _this;
    return 0;
}

int sdf_Layer_CreateAnonymous(std_String_t const* tag, sdf_FileFormatFileFormatArguments_t const* args, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(pxr::SdfLayer::CreateAnonymous(*tag, *args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ImportFromString(sdf_Layer_t* _this, std_String_t const* string, bool* _result) {
    try {
        *_result = _this->ImportFromString(*string);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_FindOrOpen(std_String_t const* identifier, sdf_FileFormatFileFormatArguments_t const* args, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(pxr::SdfLayer::FindOrOpen(*identifier, *args));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetExternalReferences(sdf_Layer_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>(_this->GetExternalReferences());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_UpdateExternalReference(sdf_Layer_t* _this, std_String_t const* oldAssetPath, std_String_t const* newAssetPath, bool* _result) {
    try {
        *_result = _this->UpdateExternalReference(*oldAssetPath, *newAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetCompositionAssetDependencies(sdf_Layer_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>(_this->GetCompositionAssetDependencies());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_UpdateCompositionAssetDependency(sdf_Layer_t* _this, std_String_t const* oldAssetPath, std_String_t const* newAssetPath, bool* _result) {
    try {
        *_result = _this->UpdateCompositionAssetDependency(*oldAssetPath, *newAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetExternalAssetDependencies(sdf_Layer_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>(_this->GetExternalAssetDependencies());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetSpecType(sdf_Layer_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasSpec(sdf_Layer_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ListFields(sdf_Layer_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasField(sdf_Layer_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->HasField(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasFieldDictKey(sdf_Layer_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->HasFieldDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetField(sdf_Layer_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetFieldDictValueByKey(sdf_Layer_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetFieldDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetField(sdf_Layer_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t const* value) {
    try {
        _this->SetField(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetFieldDictValueByKey(sdf_Layer_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetFieldDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_EraseField(sdf_Layer_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName) {
    try {
        _this->EraseField(*path, *fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_EraseFieldDictValueByKey(sdf_Layer_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath) {
    try {
        _this->EraseFieldDictValueByKey(*path, *fieldName, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetIdentifier(sdf_Layer_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetColorConfiguration(sdf_Layer_t const* _this, sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath(_this->GetColorConfiguration());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetColorConfiguration(sdf_Layer_t* _this, sdf_AssetPath_t const* colorConfiguration) {
    try {
        _this->SetColorConfiguration(*colorConfiguration);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasColorConfiguration(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasColorConfiguration();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearColorConfiguration(sdf_Layer_t* _this) {
    try {
        _this->ClearColorConfiguration();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetColorManagementSystem(sdf_Layer_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetColorManagementSystem());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetColorManagementSystem(sdf_Layer_t* _this, tf_Token_t const* cms) {
    try {
        _this->SetColorManagementSystem(*cms);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasColorManagementSystem(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasColorManagementSystem();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearColorManagementSystem(sdf_Layer_t* _this) {
    try {
        _this->ClearColorManagementSystem();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetComment(sdf_Layer_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetComment(sdf_Layer_t* _this, std_String_t const* comment) {
    try {
        _this->SetComment(*comment);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetDefaultPrim(sdf_Layer_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetDefaultPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetDefaultPrim(sdf_Layer_t* _this, tf_Token_t const* name) {
    try {
        _this->SetDefaultPrim(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasDefaultPrim(sdf_Layer_t* _this, bool* _result) {
    try {
        *_result = _this->HasDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearDefaultPrim(sdf_Layer_t* _this) {
    try {
        _this->ClearDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetDocumentation(sdf_Layer_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetDocumentation(sdf_Layer_t* _this, std_String_t const* documentation) {
    try {
        _this->SetDocumentation(*documentation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetStartTimeCode(sdf_Layer_t const* _this, double* _result) {
    try {
        *_result = _this->GetStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetStartTimeCode(sdf_Layer_t* _this, double startTimecode) {
    try {
        _this->SetStartTimeCode(startTimecode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasStartTimeCode(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearStartTimeCode(sdf_Layer_t* _this) {
    try {
        _this->ClearStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetEndTimeCode(sdf_Layer_t const* _this, double* _result) {
    try {
        *_result = _this->GetEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetEndTimeCode(sdf_Layer_t* _this, double endTimeCode) {
    try {
        _this->SetEndTimeCode(endTimeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasEndTimeCode(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearEndTimeCode(sdf_Layer_t* _this) {
    try {
        _this->ClearEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetTimeCodesPerSecond(sdf_Layer_t const* _this, double* _result) {
    try {
        *_result = _this->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetTimeCodesPerSecond(sdf_Layer_t* _this, double timeCodesPerSecond) {
    try {
        _this->SetTimeCodesPerSecond(timeCodesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasTimeCodesPerSecond(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearTimeCodesPerSecond(sdf_Layer_t* _this) {
    try {
        _this->ClearTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetFramesPerSecond(sdf_Layer_t const* _this, double* _result) {
    try {
        *_result = _this->GetFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetFramesPerSecond(sdf_Layer_t* _this, double framesPerSecond) {
    try {
        _this->SetFramesPerSecond(framesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasFramesPerSecond(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearFramesPerSecond(sdf_Layer_t* _this) {
    try {
        _this->ClearFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetFramePrecision(sdf_Layer_t const* _this, int* _result) {
    try {
        *_result = _this->GetFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetFramePrecision(sdf_Layer_t* _this, int framePrecision) {
    try {
        _this->SetFramePrecision(framePrecision);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasFramePrecision(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearFramePrecision(sdf_Layer_t* _this) {
    try {
        _this->ClearFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetOwner(sdf_Layer_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetOwner(sdf_Layer_t* _this, std_String_t const* owner) {
    try {
        _this->SetOwner(*owner);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasOwner(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearOwner(sdf_Layer_t* _this) {
    try {
        _this->ClearOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetSessionOwner(sdf_Layer_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSessionOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetSessionOwner(sdf_Layer_t* _this, std_String_t const* owner) {
    try {
        _this->SetSessionOwner(*owner);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasSessionOwner(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSessionOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearSessionOwner(sdf_Layer_t* _this) {
    try {
        _this->ClearSessionOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetHasOwnedSubLayers(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->GetHasOwnedSubLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetHasOwnedSubLayers(sdf_Layer_t* _this, bool param00) {
    try {
        _this->SetHasOwnedSubLayers(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetCustomLayerData(sdf_Layer_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetCustomLayerData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetCustomLayerData(sdf_Layer_t* _this, vt_Dictionary_t const* value) {
    try {
        _this->SetCustomLayerData(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasCustomLayerData(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasCustomLayerData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearCustomLayerData(sdf_Layer_t* _this) {
    try {
        _this->ClearCustomLayerData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetExpressionVariables(sdf_Layer_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetExpressionVariables());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetExpressionVariables(sdf_Layer_t* _this, vt_Dictionary_t const* expressionVars) {
    try {
        _this->SetExpressionVariables(*expressionVars);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_HasExpressionVariables(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->HasExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ClearExpressionVariables(sdf_Layer_t* _this) {
    try {
        _this->ClearExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetSubLayerPaths(sdf_Layer_t const* _this, sdf_SubLayerProxy_t** _result) {
    try {
        *_result = new pxr::SdfSubLayerProxy(_this->GetSubLayerPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetSubLayerPaths(sdf_Layer_t* _this, std_StringVector_t const* newPaths) {
    try {
        _this->SetSubLayerPaths(*newPaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetNumSubLayerPaths(sdf_Layer_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetNumSubLayerPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_InsertSubLayerPath(sdf_Layer_t* _this, std_String_t const* path, int index) {
    try {
        _this->InsertSubLayerPath(*path, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_RemoveSubLayerPath(sdf_Layer_t* _this, int index) {
    try {
        _this->RemoveSubLayerPath(index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetSubLayerOffsets(sdf_Layer_t const* _this, sdf_LayerOffsetVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffsetVector(_this->GetSubLayerOffsets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetSubLayerOffset(sdf_Layer_t const* _this, int index, sdf_LayerOffset_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffset(_this->GetSubLayerOffset(index));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetSubLayerOffset(sdf_Layer_t* _this, sdf_LayerOffset_t const* offset, int index) {
    try {
        _this->SetSubLayerOffset(*offset, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetPseudoRoot(sdf_Layer_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetPseudoRoot());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetObjectAtPath(sdf_Layer_t* _this, sdf_Path_t const* path, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle(_this->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetPrimAtPath(sdf_Layer_t* _this, sdf_Path_t const* path, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetPropertyAtPath(sdf_Layer_t* _this, sdf_Path_t const* path, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle(_this->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetAttributeAtPath(sdf_Layer_t* _this, sdf_Path_t const* path, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle(_this->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetRelationshipAtPath(sdf_Layer_t* _this, sdf_Path_t const* path, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle(_this->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_PermissionToEdit(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_PermissionToSave(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToSave();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetPermissionToEdit(sdf_Layer_t* _this, bool allow) {
    try {
        _this->SetPermissionToEdit(allow);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetPermissionToSave(sdf_Layer_t* _this, bool allow) {
    try {
        _this->SetPermissionToSave(allow);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_CanApply(sdf_Layer_t const* _this, sdf_BatchNamespaceEdit_t const* param00, sdf_NamespaceEditDetailVector_t* details, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->CanApply(*param00, details));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_Apply(sdf_Layer_t* _this, sdf_BatchNamespaceEdit_t const* param00, bool* _result) {
    try {
        *_result = _this->Apply(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_IsDirty(sdf_Layer_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDirty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ListAllTimeSamples(sdf_Layer_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>(_this->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_ListTimeSamplesForPath(sdf_Layer_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>(_this->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetBracketingTimeSamplesForPath(sdf_Layer_t* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetBracketingTimeSamples(sdf_Layer_t* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_GetNumTimeSamplesForPath(sdf_Layer_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = _this->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_QueryTimeSample(sdf_Layer_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->QueryTimeSample(*path, time, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_SetTimeSample(sdf_Layer_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        _this->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_EraseTimeSample(sdf_Layer_t* _this, sdf_Path_t const* path, double time) {
    try {
        _this->EraseTimeSample(*path, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_DumpLayerInfo() {
    try {
        pxr::SdfLayer::DumpLayerInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Layer_dtor(sdf_Layer_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerHandle_ImportFromString(sdf_LayerHandle_t* _this, std_String_t const* string, bool* _result) {
    try {
        *_result = (*_this)->ImportFromString(*string);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetExternalReferences(sdf_LayerHandle_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>((*_this)->GetExternalReferences());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_UpdateExternalReference(sdf_LayerHandle_t* _this, std_String_t const* oldAssetPath, std_String_t const* newAssetPath, bool* _result) {
    try {
        *_result = (*_this)->UpdateExternalReference(*oldAssetPath, *newAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetCompositionAssetDependencies(sdf_LayerHandle_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>((*_this)->GetCompositionAssetDependencies());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_UpdateCompositionAssetDependency(sdf_LayerHandle_t* _this, std_String_t const* oldAssetPath, std_String_t const* newAssetPath, bool* _result) {
    try {
        *_result = (*_this)->UpdateCompositionAssetDependency(*oldAssetPath, *newAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetExternalAssetDependencies(sdf_LayerHandle_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>((*_this)->GetExternalAssetDependencies());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetSpecType(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasSpec(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = (*_this)->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ListFields(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListFields(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasField(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasField(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasFieldDictKey(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasFieldDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetField(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetField(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetFieldDictValueByKey(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetFieldDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetField(sdf_LayerHandle_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t const* value) {
    try {
        (*_this)->SetField(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetFieldDictValueByKey(sdf_LayerHandle_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        (*_this)->SetFieldDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_EraseField(sdf_LayerHandle_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName) {
    try {
        (*_this)->EraseField(*path, *fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_EraseFieldDictValueByKey(sdf_LayerHandle_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath) {
    try {
        (*_this)->EraseFieldDictValueByKey(*path, *fieldName, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetIdentifier(sdf_LayerHandle_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetColorConfiguration(sdf_LayerHandle_t const* _this, sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath((*_this)->GetColorConfiguration());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetColorConfiguration(sdf_LayerHandle_t* _this, sdf_AssetPath_t const* colorConfiguration) {
    try {
        (*_this)->SetColorConfiguration(*colorConfiguration);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasColorConfiguration(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasColorConfiguration();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearColorConfiguration(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearColorConfiguration();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetColorManagementSystem(sdf_LayerHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetColorManagementSystem());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetColorManagementSystem(sdf_LayerHandle_t* _this, tf_Token_t const* cms) {
    try {
        (*_this)->SetColorManagementSystem(*cms);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasColorManagementSystem(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasColorManagementSystem();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearColorManagementSystem(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearColorManagementSystem();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetComment(sdf_LayerHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetComment(sdf_LayerHandle_t* _this, std_String_t const* comment) {
    try {
        (*_this)->SetComment(*comment);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetDefaultPrim(sdf_LayerHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetDefaultPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetDefaultPrim(sdf_LayerHandle_t* _this, tf_Token_t const* name) {
    try {
        (*_this)->SetDefaultPrim(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasDefaultPrim(sdf_LayerHandle_t* _this, bool* _result) {
    try {
        *_result = (*_this)->HasDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearDefaultPrim(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetDocumentation(sdf_LayerHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetDocumentation(sdf_LayerHandle_t* _this, std_String_t const* documentation) {
    try {
        (*_this)->SetDocumentation(*documentation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetStartTimeCode(sdf_LayerHandle_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetStartTimeCode(sdf_LayerHandle_t* _this, double startTimecode) {
    try {
        (*_this)->SetStartTimeCode(startTimecode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasStartTimeCode(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearStartTimeCode(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetEndTimeCode(sdf_LayerHandle_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetEndTimeCode(sdf_LayerHandle_t* _this, double endTimeCode) {
    try {
        (*_this)->SetEndTimeCode(endTimeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasEndTimeCode(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearEndTimeCode(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetTimeCodesPerSecond(sdf_LayerHandle_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetTimeCodesPerSecond(sdf_LayerHandle_t* _this, double timeCodesPerSecond) {
    try {
        (*_this)->SetTimeCodesPerSecond(timeCodesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasTimeCodesPerSecond(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearTimeCodesPerSecond(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetFramesPerSecond(sdf_LayerHandle_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetFramesPerSecond(sdf_LayerHandle_t* _this, double framesPerSecond) {
    try {
        (*_this)->SetFramesPerSecond(framesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasFramesPerSecond(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearFramesPerSecond(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetFramePrecision(sdf_LayerHandle_t const* _this, int* _result) {
    try {
        *_result = (*_this)->GetFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetFramePrecision(sdf_LayerHandle_t* _this, int framePrecision) {
    try {
        (*_this)->SetFramePrecision(framePrecision);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasFramePrecision(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearFramePrecision(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetOwner(sdf_LayerHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetOwner(sdf_LayerHandle_t* _this, std_String_t const* owner) {
    try {
        (*_this)->SetOwner(*owner);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasOwner(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearOwner(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetSessionOwner(sdf_LayerHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSessionOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetSessionOwner(sdf_LayerHandle_t* _this, std_String_t const* owner) {
    try {
        (*_this)->SetSessionOwner(*owner);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasSessionOwner(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasSessionOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearSessionOwner(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearSessionOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetHasOwnedSubLayers(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetHasOwnedSubLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetHasOwnedSubLayers(sdf_LayerHandle_t* _this, bool param00) {
    try {
        (*_this)->SetHasOwnedSubLayers(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetCustomLayerData(sdf_LayerHandle_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary((*_this)->GetCustomLayerData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetCustomLayerData(sdf_LayerHandle_t* _this, vt_Dictionary_t const* value) {
    try {
        (*_this)->SetCustomLayerData(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasCustomLayerData(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasCustomLayerData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearCustomLayerData(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearCustomLayerData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetExpressionVariables(sdf_LayerHandle_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary((*_this)->GetExpressionVariables());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetExpressionVariables(sdf_LayerHandle_t* _this, vt_Dictionary_t const* expressionVars) {
    try {
        (*_this)->SetExpressionVariables(*expressionVars);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_HasExpressionVariables(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ClearExpressionVariables(sdf_LayerHandle_t* _this) {
    try {
        (*_this)->ClearExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetSubLayerPaths(sdf_LayerHandle_t const* _this, sdf_SubLayerProxy_t** _result) {
    try {
        *_result = new pxr::SdfSubLayerProxy((*_this)->GetSubLayerPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetSubLayerPaths(sdf_LayerHandle_t* _this, std_StringVector_t const* newPaths) {
    try {
        (*_this)->SetSubLayerPaths(*newPaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetNumSubLayerPaths(sdf_LayerHandle_t const* _this, size_t* _result) {
    try {
        *_result = (*_this)->GetNumSubLayerPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_InsertSubLayerPath(sdf_LayerHandle_t* _this, std_String_t const* path, int index) {
    try {
        (*_this)->InsertSubLayerPath(*path, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_RemoveSubLayerPath(sdf_LayerHandle_t* _this, int index) {
    try {
        (*_this)->RemoveSubLayerPath(index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetSubLayerOffsets(sdf_LayerHandle_t const* _this, sdf_LayerOffsetVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffsetVector((*_this)->GetSubLayerOffsets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetSubLayerOffset(sdf_LayerHandle_t const* _this, int index, sdf_LayerOffset_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffset((*_this)->GetSubLayerOffset(index));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetSubLayerOffset(sdf_LayerHandle_t* _this, sdf_LayerOffset_t const* offset, int index) {
    try {
        (*_this)->SetSubLayerOffset(*offset, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetPseudoRoot(sdf_LayerHandle_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetPseudoRoot());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetObjectAtPath(sdf_LayerHandle_t* _this, sdf_Path_t const* path, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle((*_this)->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetPrimAtPath(sdf_LayerHandle_t* _this, sdf_Path_t const* path, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetPropertyAtPath(sdf_LayerHandle_t* _this, sdf_Path_t const* path, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle((*_this)->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetAttributeAtPath(sdf_LayerHandle_t* _this, sdf_Path_t const* path, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle((*_this)->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetRelationshipAtPath(sdf_LayerHandle_t* _this, sdf_Path_t const* path, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle((*_this)->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_PermissionToEdit(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_PermissionToSave(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToSave();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetPermissionToEdit(sdf_LayerHandle_t* _this, bool allow) {
    try {
        (*_this)->SetPermissionToEdit(allow);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetPermissionToSave(sdf_LayerHandle_t* _this, bool allow) {
    try {
        (*_this)->SetPermissionToSave(allow);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_CanApply(sdf_LayerHandle_t const* _this, sdf_BatchNamespaceEdit_t const* param00, sdf_NamespaceEditDetailVector_t* details, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->CanApply(*param00, details));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_Apply(sdf_LayerHandle_t* _this, sdf_BatchNamespaceEdit_t const* param00, bool* _result) {
    try {
        *_result = (*_this)->Apply(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_IsDirty(sdf_LayerHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDirty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ListAllTimeSamples(sdf_LayerHandle_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ListTimeSamplesForPath(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetBracketingTimeSamplesForPath(sdf_LayerHandle_t* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetBracketingTimeSamples(sdf_LayerHandle_t* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_GetNumTimeSamplesForPath(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = (*_this)->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_QueryTimeSample(sdf_LayerHandle_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_SetTimeSample(sdf_LayerHandle_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        (*_this)->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_EraseTimeSample(sdf_LayerHandle_t* _this, sdf_Path_t const* path, double time) {
    try {
        (*_this)->EraseTimeSample(*path, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_dtor(sdf_LayerHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerRefPtr_ImportFromString(sdf_LayerRefPtr_t* _this, std_String_t const* string, bool* _result) {
    try {
        *_result = (*_this)->ImportFromString(*string);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetExternalReferences(sdf_LayerRefPtr_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>((*_this)->GetExternalReferences());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_UpdateExternalReference(sdf_LayerRefPtr_t* _this, std_String_t const* oldAssetPath, std_String_t const* newAssetPath, bool* _result) {
    try {
        *_result = (*_this)->UpdateExternalReference(*oldAssetPath, *newAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetCompositionAssetDependencies(sdf_LayerRefPtr_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>((*_this)->GetCompositionAssetDependencies());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_UpdateCompositionAssetDependency(sdf_LayerRefPtr_t* _this, std_String_t const* oldAssetPath, std_String_t const* newAssetPath, bool* _result) {
    try {
        *_result = (*_this)->UpdateCompositionAssetDependency(*oldAssetPath, *newAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetExternalAssetDependencies(sdf_LayerRefPtr_t const* _this, std_StringSet_t** _result) {
    try {
        *_result = new std::set<std::string>((*_this)->GetExternalAssetDependencies());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetSpecType(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasSpec(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = (*_this)->HasSpec(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ListFields(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListFields(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasField(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasField(*path, *fieldName, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasFieldDictKey(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->HasFieldDictKey(*path, *fieldName, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetField(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetField(*path, *fieldName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetFieldDictValueByKey(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetFieldDictValueByKey(*path, *fieldName, *keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetField(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, vt_Value_t const* value) {
    try {
        (*_this)->SetField(*path, *fieldName, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetFieldDictValueByKey(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        (*_this)->SetFieldDictValueByKey(*path, *fieldName, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_EraseField(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName) {
    try {
        (*_this)->EraseField(*path, *fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_EraseFieldDictValueByKey(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* fieldName, tf_Token_t const* keyPath) {
    try {
        (*_this)->EraseFieldDictValueByKey(*path, *fieldName, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetIdentifier(sdf_LayerRefPtr_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetColorConfiguration(sdf_LayerRefPtr_t const* _this, sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath((*_this)->GetColorConfiguration());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetColorConfiguration(sdf_LayerRefPtr_t* _this, sdf_AssetPath_t const* colorConfiguration) {
    try {
        (*_this)->SetColorConfiguration(*colorConfiguration);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasColorConfiguration(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasColorConfiguration();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearColorConfiguration(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearColorConfiguration();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetColorManagementSystem(sdf_LayerRefPtr_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetColorManagementSystem());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetColorManagementSystem(sdf_LayerRefPtr_t* _this, tf_Token_t const* cms) {
    try {
        (*_this)->SetColorManagementSystem(*cms);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasColorManagementSystem(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasColorManagementSystem();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearColorManagementSystem(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearColorManagementSystem();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetComment(sdf_LayerRefPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetComment(sdf_LayerRefPtr_t* _this, std_String_t const* comment) {
    try {
        (*_this)->SetComment(*comment);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetDefaultPrim(sdf_LayerRefPtr_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetDefaultPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetDefaultPrim(sdf_LayerRefPtr_t* _this, tf_Token_t const* name) {
    try {
        (*_this)->SetDefaultPrim(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasDefaultPrim(sdf_LayerRefPtr_t* _this, bool* _result) {
    try {
        *_result = (*_this)->HasDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearDefaultPrim(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetDocumentation(sdf_LayerRefPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetDocumentation(sdf_LayerRefPtr_t* _this, std_String_t const* documentation) {
    try {
        (*_this)->SetDocumentation(*documentation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetStartTimeCode(sdf_LayerRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetStartTimeCode(sdf_LayerRefPtr_t* _this, double startTimecode) {
    try {
        (*_this)->SetStartTimeCode(startTimecode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasStartTimeCode(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearStartTimeCode(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetEndTimeCode(sdf_LayerRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetEndTimeCode(sdf_LayerRefPtr_t* _this, double endTimeCode) {
    try {
        (*_this)->SetEndTimeCode(endTimeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasEndTimeCode(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearEndTimeCode(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetTimeCodesPerSecond(sdf_LayerRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetTimeCodesPerSecond(sdf_LayerRefPtr_t* _this, double timeCodesPerSecond) {
    try {
        (*_this)->SetTimeCodesPerSecond(timeCodesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasTimeCodesPerSecond(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearTimeCodesPerSecond(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetFramesPerSecond(sdf_LayerRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetFramesPerSecond(sdf_LayerRefPtr_t* _this, double framesPerSecond) {
    try {
        (*_this)->SetFramesPerSecond(framesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasFramesPerSecond(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearFramesPerSecond(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetFramePrecision(sdf_LayerRefPtr_t const* _this, int* _result) {
    try {
        *_result = (*_this)->GetFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetFramePrecision(sdf_LayerRefPtr_t* _this, int framePrecision) {
    try {
        (*_this)->SetFramePrecision(framePrecision);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasFramePrecision(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearFramePrecision(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearFramePrecision();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetOwner(sdf_LayerRefPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetOwner(sdf_LayerRefPtr_t* _this, std_String_t const* owner) {
    try {
        (*_this)->SetOwner(*owner);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasOwner(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearOwner(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetSessionOwner(sdf_LayerRefPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSessionOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetSessionOwner(sdf_LayerRefPtr_t* _this, std_String_t const* owner) {
    try {
        (*_this)->SetSessionOwner(*owner);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasSessionOwner(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasSessionOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearSessionOwner(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearSessionOwner();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetHasOwnedSubLayers(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetHasOwnedSubLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetHasOwnedSubLayers(sdf_LayerRefPtr_t* _this, bool param00) {
    try {
        (*_this)->SetHasOwnedSubLayers(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetCustomLayerData(sdf_LayerRefPtr_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary((*_this)->GetCustomLayerData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetCustomLayerData(sdf_LayerRefPtr_t* _this, vt_Dictionary_t const* value) {
    try {
        (*_this)->SetCustomLayerData(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasCustomLayerData(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasCustomLayerData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearCustomLayerData(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearCustomLayerData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetExpressionVariables(sdf_LayerRefPtr_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary((*_this)->GetExpressionVariables());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetExpressionVariables(sdf_LayerRefPtr_t* _this, vt_Dictionary_t const* expressionVars) {
    try {
        (*_this)->SetExpressionVariables(*expressionVars);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_HasExpressionVariables(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ClearExpressionVariables(sdf_LayerRefPtr_t* _this) {
    try {
        (*_this)->ClearExpressionVariables();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetSubLayerPaths(sdf_LayerRefPtr_t const* _this, sdf_SubLayerProxy_t** _result) {
    try {
        *_result = new pxr::SdfSubLayerProxy((*_this)->GetSubLayerPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetSubLayerPaths(sdf_LayerRefPtr_t* _this, std_StringVector_t const* newPaths) {
    try {
        (*_this)->SetSubLayerPaths(*newPaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetNumSubLayerPaths(sdf_LayerRefPtr_t const* _this, size_t* _result) {
    try {
        *_result = (*_this)->GetNumSubLayerPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_InsertSubLayerPath(sdf_LayerRefPtr_t* _this, std_String_t const* path, int index) {
    try {
        (*_this)->InsertSubLayerPath(*path, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_RemoveSubLayerPath(sdf_LayerRefPtr_t* _this, int index) {
    try {
        (*_this)->RemoveSubLayerPath(index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetSubLayerOffsets(sdf_LayerRefPtr_t const* _this, sdf_LayerOffsetVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffsetVector((*_this)->GetSubLayerOffsets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetSubLayerOffset(sdf_LayerRefPtr_t const* _this, int index, sdf_LayerOffset_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffset((*_this)->GetSubLayerOffset(index));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetSubLayerOffset(sdf_LayerRefPtr_t* _this, sdf_LayerOffset_t const* offset, int index) {
    try {
        (*_this)->SetSubLayerOffset(*offset, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetPseudoRoot(sdf_LayerRefPtr_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetPseudoRoot());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetObjectAtPath(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle((*_this)->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetPrimAtPath(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetPropertyAtPath(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle((*_this)->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetAttributeAtPath(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle((*_this)->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetRelationshipAtPath(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle((*_this)->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_PermissionToEdit(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_PermissionToSave(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToSave();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetPermissionToEdit(sdf_LayerRefPtr_t* _this, bool allow) {
    try {
        (*_this)->SetPermissionToEdit(allow);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetPermissionToSave(sdf_LayerRefPtr_t* _this, bool allow) {
    try {
        (*_this)->SetPermissionToSave(allow);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_CanApply(sdf_LayerRefPtr_t const* _this, sdf_BatchNamespaceEdit_t const* param00, sdf_NamespaceEditDetailVector_t* details, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->CanApply(*param00, details));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_Apply(sdf_LayerRefPtr_t* _this, sdf_BatchNamespaceEdit_t const* param00, bool* _result) {
    try {
        *_result = (*_this)->Apply(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_IsDirty(sdf_LayerRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDirty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ListAllTimeSamples(sdf_LayerRefPtr_t const* _this, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListAllTimeSamples());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ListTimeSamplesForPath(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, std_DoubleSet_t** _result) {
    try {
        *_result = new std::set<double>((*_this)->ListTimeSamplesForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetBracketingTimeSamplesForPath(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamplesForPath(*path, time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetBracketingTimeSamples(sdf_LayerRefPtr_t* _this, double time, double* tLower, double* tUpper, bool* _result) {
    try {
        *_result = (*_this)->GetBracketingTimeSamples(time, tLower, tUpper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_GetNumTimeSamplesForPath(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, size_t* _result) {
    try {
        *_result = (*_this)->GetNumTimeSamplesForPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_QueryTimeSample(sdf_LayerRefPtr_t const* _this, sdf_Path_t const* path, double time, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->QueryTimeSample(*path, time, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_SetTimeSample(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        (*_this)->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_EraseTimeSample(sdf_LayerRefPtr_t* _this, sdf_Path_t const* path, double time) {
    try {
        (*_this)->EraseTimeSample(*path, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_dtor(sdf_LayerRefPtr_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerHandleVector_data(sdf_LayerHandleVector_t* _this, sdf_LayerHandle_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerHandleVector_data_const(sdf_LayerHandleVector_t const* _this, sdf_LayerHandle_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerHandleVector_empty(sdf_LayerHandleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_LayerHandleVector_size(sdf_LayerHandleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_LayerHandleVector_max_size(sdf_LayerHandleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_LayerHandleVector_capacity(sdf_LayerHandleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_LayerHandleVector_clear(sdf_LayerHandleVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_LayerHandleVector_pop_back(sdf_LayerHandleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_LayerHandleVector_op_index(sdf_LayerHandleVector_t const* _this, size_t __n, sdf_LayerHandle_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_LayerHandleVector_default(sdf_LayerHandleVector_t** _result) {
    *_result = new pxr::SdfLayerHandleVector();
    return 0;
}

int sdf_LayerHandleVector_dtor(sdf_LayerHandleVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerRefPtrVector_data(sdf_LayerRefPtrVector_t* _this, sdf_LayerRefPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerRefPtrVector_data_const(sdf_LayerRefPtrVector_t const* _this, sdf_LayerRefPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerRefPtrVector_empty(sdf_LayerRefPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_LayerRefPtrVector_size(sdf_LayerRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_LayerRefPtrVector_max_size(sdf_LayerRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_LayerRefPtrVector_capacity(sdf_LayerRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_LayerRefPtrVector_clear(sdf_LayerRefPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_LayerRefPtrVector_pop_back(sdf_LayerRefPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_LayerRefPtrVector_op_index(sdf_LayerRefPtrVector_t const* _this, size_t __n, sdf_LayerRefPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_LayerRefPtrVector_default(sdf_LayerRefPtrVector_t** _result) {
    *_result = new pxr::SdfLayerRefPtrVector();
    return 0;
}

int sdf_LayerRefPtrVector_dtor(sdf_LayerRefPtrVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerHandleSet_dtor(sdf_LayerHandleSet_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerOffset_GetOffset(sdf_LayerOffset_t const* _this, double* _result) {
    try {
        *_result = _this->GetOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_GetScale(sdf_LayerOffset_t const* _this, double* _result) {
    try {
        *_result = _this->GetScale();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_SetOffset(sdf_LayerOffset_t* _this, double newOffset) {
    try {
        _this->SetOffset(newOffset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_SetScale(sdf_LayerOffset_t* _this, double newScale) {
    try {
        _this->SetScale(newScale);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_IsIdentity(sdf_LayerOffset_t const* _this, bool* _result) {
    try {
        *_result = _this->IsIdentity();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_IsValid(sdf_LayerOffset_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_GetInverse(sdf_LayerOffset_t const* _this, sdf_LayerOffset_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffset(_this->GetInverse());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_GetHash(sdf_LayerOffset_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetHash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_op_eq(sdf_LayerOffset_t const* _this, sdf_LayerOffset_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_op_lt(sdf_LayerOffset_t const* _this, sdf_LayerOffset_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_op_mul_00(sdf_LayerOffset_t const* _this, sdf_LayerOffset_t const* rhs, sdf_LayerOffset_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffset(_this->operator*(*rhs));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_op_mul_01(sdf_LayerOffset_t const* _this, double rhs, double* _result) {
    try {
        *_result = _this->operator*(rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_op_mul_02(sdf_LayerOffset_t const* _this, sdf_TimeCode_t const* rhs, sdf_TimeCode_t* _result) {
    try {
        *_result = _this->operator*(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_ctor(double offset, double scale, sdf_LayerOffset_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffset(offset, scale);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_default(sdf_LayerOffset_t** _result) {
    try {
        *_result = new pxr::SdfLayerOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerOffset_dtor(sdf_LayerOffset_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerOffsetVector_data(sdf_LayerOffsetVector_t* _this, sdf_LayerOffset_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerOffsetVector_data_const(sdf_LayerOffsetVector_t const* _this, sdf_LayerOffset_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerOffsetVector_empty(sdf_LayerOffsetVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_LayerOffsetVector_size(sdf_LayerOffsetVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_LayerOffsetVector_max_size(sdf_LayerOffsetVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_LayerOffsetVector_capacity(sdf_LayerOffsetVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_LayerOffsetVector_clear(sdf_LayerOffsetVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_LayerOffsetVector_pop_back(sdf_LayerOffsetVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_LayerOffsetVector_op_index(sdf_LayerOffsetVector_t const* _this, size_t __n, sdf_LayerOffset_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_LayerOffsetVector_default(sdf_LayerOffsetVector_t** _result) {
    *_result = new pxr::SdfLayerOffsetVector();
    return 0;
}

int sdf_LayerOffsetVector_dtor(sdf_LayerOffsetVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerStateDelegate_IsDirty(sdf_LayerStateDelegate_t* _this, bool* _result) {
    try {
        *_result = _this->IsDirty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_SetField_00(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, tf_Token_t const* field, vt_Value_t const* value, vt_Value_t* oldValue) {
    try {
        _this->SetField(*path, *field, *value, oldValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_SetField_01(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, tf_Token_t const* field, sdf_AbstractDataConstValue_t const* value, vt_Value_t* oldValue) {
    try {
        _this->SetField(*path, *field, *value, oldValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_SetFieldDictValueByKey_00(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, tf_Token_t const* field, tf_Token_t const* keyPath, vt_Value_t const* value, vt_Value_t* oldValue) {
    try {
        _this->SetFieldDictValueByKey(*path, *field, *keyPath, *value, oldValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_SetFieldDictValueByKey_01(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, tf_Token_t const* field, tf_Token_t const* keyPath, sdf_AbstractDataConstValue_t const* value, vt_Value_t* oldValue) {
    try {
        _this->SetFieldDictValueByKey(*path, *field, *keyPath, *value, oldValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_SetTimeSample_00(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, double time, vt_Value_t const* value) {
    try {
        _this->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_SetTimeSample_01(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, double time, sdf_AbstractDataConstValue_t const* value) {
    try {
        _this->SetTimeSample(*path, time, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_CreateSpec(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, unsigned int specType, bool inert) {
    try {
        _this->CreateSpec(*path, static_cast<pxr::SdfSpecType>(specType), inert);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_DeleteSpec(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* path, bool inert) {
    try {
        _this->DeleteSpec(*path, inert);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_MoveSpec(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        _this->MoveSpec(*oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_PushChild_00(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* parentPath, tf_Token_t const* field, tf_Token_t const* value) {
    try {
        _this->PushChild(*parentPath, *field, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_PushChild_01(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* parentPath, tf_Token_t const* field, sdf_Path_t const* value) {
    try {
        _this->PushChild(*parentPath, *field, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_PopChild_00(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* parentPath, tf_Token_t const* field, tf_Token_t const* oldValue) {
    try {
        _this->PopChild(*parentPath, *field, *oldValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_PopChild_01(sdf_LayerStateDelegate_t* _this, sdf_Path_t const* parentPath, tf_Token_t const* field, sdf_Path_t const* oldValue) {
    try {
        _this->PopChild(*parentPath, *field, *oldValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerStateDelegate_dtor(sdf_LayerStateDelegate_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerTree_New(sdf_LayerHandle_t const* layer, sdf_LayerTreeHandleVector_t const* childTrees, sdf_LayerOffset_t const* cumulativeOffset, sdf_LayerTreeHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerTreeHandle(pxr::SdfLayerTree::New(*layer, *childTrees, *cumulativeOffset));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerTree_GetLayer(sdf_LayerTree_t const* _this, sdf_LayerHandle_t const** _result) {
    try {
        *_result = &_this->GetLayer();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerTree_GetOffset(sdf_LayerTree_t const* _this, sdf_LayerOffset_t const** _result) {
    try {
        *_result = &_this->GetOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerTree_GetChildTrees(sdf_LayerTree_t const* _this, sdf_LayerTreeHandleVector_t const** _result) {
    try {
        *_result = &_this->GetChildTrees();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerTree_dtor(sdf_LayerTree_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerTreeHandle_GetLayer(sdf_LayerTreeHandle_t const* _this, sdf_LayerHandle_t const** _result) {
    try {
        *_result = &(*_this)->GetLayer();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerTreeHandle_GetOffset(sdf_LayerTreeHandle_t const* _this, sdf_LayerOffset_t const** _result) {
    try {
        *_result = &(*_this)->GetOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerTreeHandle_GetChildTrees(sdf_LayerTreeHandle_t const* _this, sdf_LayerTreeHandleVector_t const** _result) {
    try {
        *_result = &(*_this)->GetChildTrees();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerTreeHandle_dtor(sdf_LayerTreeHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_LayerTreeHandleVector_data(sdf_LayerTreeHandleVector_t* _this, sdf_LayerTreeHandle_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerTreeHandleVector_data_const(sdf_LayerTreeHandleVector_t const* _this, sdf_LayerTreeHandle_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_LayerTreeHandleVector_empty(sdf_LayerTreeHandleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_LayerTreeHandleVector_size(sdf_LayerTreeHandleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_LayerTreeHandleVector_max_size(sdf_LayerTreeHandleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_LayerTreeHandleVector_capacity(sdf_LayerTreeHandleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_LayerTreeHandleVector_clear(sdf_LayerTreeHandleVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_LayerTreeHandleVector_pop_back(sdf_LayerTreeHandleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_LayerTreeHandleVector_op_index(sdf_LayerTreeHandleVector_t const* _this, size_t __n, sdf_LayerTreeHandle_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_LayerTreeHandleVector_default(sdf_LayerTreeHandleVector_t** _result) {
    *_result = new pxr::SdfLayerTreeHandleVector();
    return 0;
}

int sdf_LayerTreeHandleVector_dtor(sdf_LayerTreeHandleVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_StringListOp_HasKeys(sdf_StringListOp_t const* _this, bool* _result) {
    try {
        *_result = _this->HasKeys();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_IsExplicit(sdf_StringListOp_t const* _this, bool* _result) {
    try {
        *_result = _this->IsExplicit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetExplicitItems(sdf_StringListOp_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetExplicitItems();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetAddedItems(sdf_StringListOp_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetAddedItems();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetPrependedItems(sdf_StringListOp_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetPrependedItems();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetAppendedItems(sdf_StringListOp_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetAppendedItems();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetDeletedItems(sdf_StringListOp_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetDeletedItems();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetOrderedItems(sdf_StringListOp_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetOrderedItems();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetAppliedItems(sdf_StringListOp_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetAppliedItems());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_GetItems(sdf_StringListOp_t const* _this, unsigned int type, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetItems(static_cast<pxr::SdfListOpType>(type));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_SetExplicitItems(sdf_StringListOp_t* _this, std_StringVector_t const* items) {
    try {
        _this->SetExplicitItems(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_SetAddedItems(sdf_StringListOp_t* _this, std_StringVector_t const* items) {
    try {
        _this->SetAddedItems(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_SetPrependedItems(sdf_StringListOp_t* _this, std_StringVector_t const* items) {
    try {
        _this->SetPrependedItems(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_SetAppendedItems(sdf_StringListOp_t* _this, std_StringVector_t const* items) {
    try {
        _this->SetAppendedItems(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_SetDeletedItems(sdf_StringListOp_t* _this, std_StringVector_t const* items) {
    try {
        _this->SetDeletedItems(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_SetOrderedItems(sdf_StringListOp_t* _this, std_StringVector_t const* items) {
    try {
        _this->SetOrderedItems(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_SetItems(sdf_StringListOp_t* _this, std_StringVector_t const* items, unsigned int type) {
    try {
        _this->SetItems(*items, static_cast<pxr::SdfListOpType>(type));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_Clear(sdf_StringListOp_t* _this) {
    try {
        _this->Clear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_ClearAndMakeExplicit(sdf_StringListOp_t* _this) {
    try {
        _this->ClearAndMakeExplicit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_ReplaceOperations(sdf_StringListOp_t* _this, unsigned int op, size_t index, size_t n, std_StringVector_t const* newItems, bool* _result) {
    try {
        *_result = _this->ReplaceOperations(static_cast<pxr::SdfListOpType>(op), index, n, *newItems);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_ComposeOperations(sdf_StringListOp_t* _this, sdf_StringListOp_t const* stronger, unsigned int op) {
    try {
        _this->ComposeOperations(*stronger, static_cast<pxr::SdfListOpType>(op));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_default(sdf_StringListOp_t** _result) {
    try {
        *_result = new pxr::SdfListOp<std::string>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_StringListOp_dtor(sdf_StringListOp_t* _this) {
    delete _this;
    return 0;
}

int sdf_NamespaceEdit_Remove(sdf_Path_t const* currentPath, sdf_NamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEdit(pxr::SdfNamespaceEdit::Remove(*currentPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_Rename(sdf_Path_t const* currentPath, tf_Token_t const* name, sdf_NamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEdit(pxr::SdfNamespaceEdit::Rename(*currentPath, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_Reorder(sdf_Path_t const* currentPath, int index, sdf_NamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEdit(pxr::SdfNamespaceEdit::Reorder(*currentPath, index));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_Reparent(sdf_Path_t const* currentPath, sdf_Path_t const* newParentPath, int index, sdf_NamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEdit(pxr::SdfNamespaceEdit::Reparent(*currentPath, *newParentPath, index));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_ReparentAndRename(sdf_Path_t const* currentPath, sdf_Path_t const* newParentPath, tf_Token_t const* name, int index, sdf_NamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEdit(pxr::SdfNamespaceEdit::ReparentAndRename(*currentPath, *newParentPath, *name, index));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_default(sdf_NamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_from_paths(sdf_Path_t const* param00, sdf_Path_t const* param01, int param02, sdf_NamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEdit(*param00, *param01, param02);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_dtor(sdf_NamespaceEdit_t* _this) {
    delete _this;
    return 0;
}

int sdf_NamespaceEditVector_data(sdf_NamespaceEditVector_t* _this, sdf_NamespaceEdit_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_NamespaceEditVector_data_const(sdf_NamespaceEditVector_t const* _this, sdf_NamespaceEdit_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_NamespaceEditVector_empty(sdf_NamespaceEditVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_NamespaceEditVector_size(sdf_NamespaceEditVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_NamespaceEditVector_max_size(sdf_NamespaceEditVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_NamespaceEditVector_capacity(sdf_NamespaceEditVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_NamespaceEditVector_clear(sdf_NamespaceEditVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_NamespaceEditVector_pop_back(sdf_NamespaceEditVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_NamespaceEditVector_op_index(sdf_NamespaceEditVector_t const* _this, size_t __n, sdf_NamespaceEdit_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_NamespaceEditVector_default(sdf_NamespaceEditVector_t** _result) {
    *_result = new std::vector<pxr::SdfNamespaceEdit>();
    return 0;
}

int sdf_NamespaceEditVector_dtor(sdf_NamespaceEditVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_NamespaceEditDetail_default(sdf_NamespaceEditDetail_t** _result) {
    try {
        *_result = new pxr::SdfNamespaceEditDetail();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEditDetail_dtor(sdf_NamespaceEditDetail_t* _this) {
    delete _this;
    return 0;
}

int sdf_NamespaceEditDetailVector_data(sdf_NamespaceEditDetailVector_t* _this, sdf_NamespaceEditDetail_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_NamespaceEditDetailVector_data_const(sdf_NamespaceEditDetailVector_t const* _this, sdf_NamespaceEditDetail_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_NamespaceEditDetailVector_empty(sdf_NamespaceEditDetailVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_NamespaceEditDetailVector_size(sdf_NamespaceEditDetailVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_NamespaceEditDetailVector_max_size(sdf_NamespaceEditDetailVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_NamespaceEditDetailVector_capacity(sdf_NamespaceEditDetailVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_NamespaceEditDetailVector_clear(sdf_NamespaceEditDetailVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_NamespaceEditDetailVector_pop_back(sdf_NamespaceEditDetailVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_NamespaceEditDetailVector_op_index(sdf_NamespaceEditDetailVector_t const* _this, size_t __n, sdf_NamespaceEditDetail_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_NamespaceEditDetailVector_default(sdf_NamespaceEditDetailVector_t** _result) {
    *_result = new pxr::SdfNamespaceEditDetailVector();
    return 0;
}

int sdf_NamespaceEditDetailVector_dtor(sdf_NamespaceEditDetailVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_BatchNamespaceEdit_Add(sdf_BatchNamespaceEdit_t* _this, sdf_NamespaceEdit_t const* edit) {
    try {
        _this->Add(*edit);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_BatchNamespaceEdit_Add_from_paths(sdf_BatchNamespaceEdit_t* _this, sdf_Path_t const* currentPath, sdf_Path_t const* newPath, int index) {
    try {
        _this->Add(*currentPath, *newPath, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_BatchNamespaceEdit_GetEdits(sdf_BatchNamespaceEdit_t const* _this, sdf_NamespaceEditVector_t const** _result) {
    try {
        *_result = &_this->GetEdits();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_BatchNamespaceEdit_Process(sdf_BatchNamespaceEdit_t const* _this, sdf_NamespaceEditVector_t* processedEdits, void (*hasObjectAtPath)(sdf_Path_t const* param00, bool* _result), void (*canEdit)(sdf_NamespaceEdit_t const* param00, std_String_t* param01, bool* _result), sdf_NamespaceEditDetailVector_t* details, bool fixBackpointers, bool* _result) {
    try {
        std::function<bool (pxr::SdfPath const&)> hasObjectAtPath_wrapper = [&](pxr::SdfPath const& param00) {
        bool _result;
        hasObjectAtPath(&param00, &_result);
        return _result;
    };
        std::function<bool (pxr::SdfNamespaceEdit const&, std::string*)> canEdit_wrapper = [&](pxr::SdfNamespaceEdit const& param00, std::string* param01) {
        bool _result;
        canEdit(&param00, param01, &_result);
        return _result;
    };
        *_result = _this->Process(processedEdits, hasObjectAtPath_wrapper, canEdit_wrapper, details, fixBackpointers);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_BatchNamespaceEdit_default(sdf_BatchNamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfBatchNamespaceEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_BatchNamespaceEdit_from_edits(sdf_NamespaceEditVector_t const* edits, sdf_BatchNamespaceEdit_t** _result) {
    try {
        *_result = new pxr::SdfBatchNamespaceEdit(*edits);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_BatchNamespaceEdit_dtor(sdf_BatchNamespaceEdit_t* _this) {
    delete _this;
    return 0;
}

int sdf_Notice_dtor(sdf_Notice_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeBase_default(sdf_NoticeBase_t** _result) {
    *_result = new pxr::SdfNotice::Base();
    return 0;
}

int sdf_NoticeBase_dtor(sdf_NoticeBase_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeBaseLayersDidChange_GetLayers(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector(_this->GetLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_GetChangeListVec(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_LayerChangeListVec_t const** _result) {
    try {
        *_result = &_this->GetChangeListVec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_begin(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->begin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_cbegin(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->cbegin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_end(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->end());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_cend(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->cend());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_find(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_LayerHandle_t const* layer, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->find(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_count(sdf_NoticeBaseLayersDidChange_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = _this->count(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_GetSerialNumber(sdf_NoticeBaseLayersDidChange_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetSerialNumber();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_ctor(sdf_LayerChangeListVec_t const* changeVec, unsigned long serialNumber, sdf_NoticeBaseLayersDidChange_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange(*changeVec, serialNumber);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeBaseLayersDidChange_dtor(sdf_NoticeBaseLayersDidChange_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeBaseLayersDidChangeConstIterator_dtor(sdf_NoticeBaseLayersDidChangeConstIterator_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayersDidChangeSentPerLayer_GetLayers(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector(_this->GetLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_GetChangeListVec(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_LayerChangeListVec_t const** _result) {
    try {
        *_result = &_this->GetChangeListVec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_begin(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->begin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_cbegin(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->cbegin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_end(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->end());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_cend(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->cend());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_find(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_LayerHandle_t const* layer, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->find(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_count(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = _this->count(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_GetSerialNumber(sdf_NoticeLayersDidChangeSentPerLayer_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetSerialNumber();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_ctor(sdf_LayerChangeListVec_t const* changeVec, unsigned long serialNumber, sdf_NoticeLayersDidChangeSentPerLayer_t** _result) {
    try {
        *_result = new pxr::SdfNotice::LayersDidChangeSentPerLayer(*changeVec, serialNumber);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChangeSentPerLayer_dtor(sdf_NoticeLayersDidChangeSentPerLayer_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayersDidChange_GetLayers(sdf_NoticeLayersDidChange_t const* _this, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector(_this->GetLayers());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_GetChangeListVec(sdf_NoticeLayersDidChange_t const* _this, sdf_LayerChangeListVec_t const** _result) {
    try {
        *_result = &_this->GetChangeListVec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_begin(sdf_NoticeLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->begin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_cbegin(sdf_NoticeLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->cbegin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_end(sdf_NoticeLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->end());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_cend(sdf_NoticeLayersDidChange_t const* _this, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->cend());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_find(sdf_NoticeLayersDidChange_t const* _this, sdf_LayerHandle_t const* layer, sdf_NoticeBaseLayersDidChangeConstIterator_t** _result) {
    try {
        *_result = new pxr::SdfNotice::BaseLayersDidChange::const_iterator(_this->find(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_count(sdf_NoticeLayersDidChange_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = _this->count(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_GetSerialNumber(sdf_NoticeLayersDidChange_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetSerialNumber();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_ctor(sdf_LayerChangeListVec_t const* changeVec, unsigned long serialNumber, sdf_NoticeLayersDidChange_t** _result) {
    try {
        *_result = new pxr::SdfNotice::LayersDidChange(*changeVec, serialNumber);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayersDidChange_dtor(sdf_NoticeLayersDidChange_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayerInfoDidChange_key(sdf_NoticeLayerInfoDidChange_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->key();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerInfoDidChange_ctor(tf_Token_t const* key, sdf_NoticeLayerInfoDidChange_t** _result) {
    try {
        *_result = new pxr::SdfNotice::LayerInfoDidChange(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerInfoDidChange_dtor(sdf_NoticeLayerInfoDidChange_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayerIdentifierDidChange_GetOldIdentifier(sdf_NoticeLayerIdentifierDidChange_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetOldIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerIdentifierDidChange_GetNewIdentifier(sdf_NoticeLayerIdentifierDidChange_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetNewIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerIdentifierDidChange_ctor(std_String_t const* oldIdentifier, std_String_t const* newIdentifier, sdf_NoticeLayerIdentifierDidChange_t** _result) {
    try {
        *_result = new pxr::SdfNotice::LayerIdentifierDidChange(*oldIdentifier, *newIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerIdentifierDidChange_dtor(sdf_NoticeLayerIdentifierDidChange_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayerDidReplaceContent_dtor(sdf_NoticeLayerDidReplaceContent_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayerDidReloadContent_dtor(sdf_NoticeLayerDidReloadContent_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeDidSaveLayerToFile_dtor(sdf_NoticeDidSaveLayerToFile_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayerDirtinessChanged_dtor(sdf_NoticeLayerDirtinessChanged_t* _this) {
    delete _this;
    return 0;
}

int sdf_NoticeLayerMutenessChanged_GetLayerPath(sdf_NoticeLayerMutenessChanged_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetLayerPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerMutenessChanged_WasMuted(sdf_NoticeLayerMutenessChanged_t const* _this, bool* _result) {
    try {
        *_result = _this->WasMuted();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerMutenessChanged_ctor(std_String_t const* layerPath, bool wasMuted, sdf_NoticeLayerMutenessChanged_t** _result) {
    try {
        *_result = new pxr::SdfNotice::LayerMutenessChanged(*layerPath, wasMuted);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NoticeLayerMutenessChanged_dtor(sdf_NoticeLayerMutenessChanged_t* _this) {
    delete _this;
    return 0;
}

int sdf_Path_GetPathElementCount(sdf_Path_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetPathElementCount();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsAbsolutePath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAbsolutePath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsAbsoluteRootPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAbsoluteRootPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsPrimPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsAbsoluteRootOrPrimPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAbsoluteRootOrPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsRootPrimPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRootPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsPropertyPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPropertyPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsPrimPropertyPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPrimPropertyPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsNamespacedPropertyPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsNamespacedPropertyPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsPrimVariantSelectionPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPrimVariantSelectionPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsPrimOrPrimVariantSelectionPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPrimOrPrimVariantSelectionPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_ContainsPrimVariantSelection(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->ContainsPrimVariantSelection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_ContainsPropertyElements(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->ContainsPropertyElements();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_ContainsTargetPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->ContainsTargetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsRelationalAttributePath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRelationalAttributePath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsTargetPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTargetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsMapperPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMapperPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsMapperArgPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMapperArgPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsExpressionPath(sdf_Path_t const* _this, bool* _result) {
    try {
        *_result = _this->IsExpressionPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsEmpty(sdf_Path_t const* _this, bool* _result) {
    *_result = _this->IsEmpty();
    return 0;
}

int sdf_Path_GetAsToken(sdf_Path_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetAsToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetAsString(sdf_Path_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetAsString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetString(sdf_Path_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetString();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetText(sdf_Path_t const* _this, char const** _result) {
    try {
        *_result = _this->GetText();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetPrefixes(sdf_Path_t const* _this, sdf_PathVector_t** _result) {
    try {
        *_result = new pxr::SdfPathVector(_this->GetPrefixes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetPrefixes_up_to(sdf_Path_t const* _this, size_t numPrefixes, sdf_PathVector_t** _result) {
    try {
        *_result = new pxr::SdfPathVector(_this->GetPrefixes(numPrefixes));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetPrefixes_in(sdf_Path_t const* _this, sdf_PathVector_t* prefixes) {
    try {
        _this->GetPrefixes(prefixes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetPrefixes_in_up_to(sdf_Path_t const* _this, sdf_PathVector_t* prefixes, size_t numPrefixes) {
    try {
        _this->GetPrefixes(prefixes, numPrefixes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetName(sdf_Path_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetNameToken(sdf_Path_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetNameToken();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetElementString(sdf_Path_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetElementString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetElementToken(sdf_Path_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetElementToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_ReplaceName(sdf_Path_t const* _this, tf_Token_t const* newName, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->ReplaceName(*newName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetTargetPath(sdf_Path_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetTargetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetAllTargetPathsRecursively(sdf_Path_t const* _this, sdf_PathVector_t* result) {
    try {
        _this->GetAllTargetPathsRecursively(result);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_HasPrefix(sdf_Path_t const* _this, sdf_Path_t const* prefix, bool* _result) {
    try {
        *_result = _this->HasPrefix(*prefix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetParentPath(sdf_Path_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetParentPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetPrimPath(sdf_Path_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPrimPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetPrimOrPrimVariantSelectionPath(sdf_Path_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPrimOrPrimVariantSelectionPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetAbsoluteRootOrPrimPath(sdf_Path_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetAbsoluteRootOrPrimPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_StripAllVariantSelections(sdf_Path_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->StripAllVariantSelections());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendPath(sdf_Path_t const* _this, sdf_Path_t const* newSuffix, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendPath(*newSuffix));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendChild(sdf_Path_t const* _this, tf_Token_t const* childName, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendChild(*childName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendProperty(sdf_Path_t const* _this, tf_Token_t const* propName, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendProperty(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendVariantSelection(sdf_Path_t const* _this, std_String_t const* variantSet, std_String_t const* variant, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendVariantSelection(*variantSet, *variant));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendTarget(sdf_Path_t const* _this, sdf_Path_t const* targetPath, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendTarget(*targetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendRelationalAttribute(sdf_Path_t const* _this, tf_Token_t const* attrName, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendRelationalAttribute(*attrName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_ReplaceTargetPath(sdf_Path_t const* _this, sdf_Path_t const* newTargetPath, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->ReplaceTargetPath(*newTargetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendMapper(sdf_Path_t const* _this, sdf_Path_t const* targetPath, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendMapper(*targetPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendMapperArg(sdf_Path_t const* _this, tf_Token_t const* argName, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendMapperArg(*argName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendExpression(sdf_Path_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendExpression());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendElementString(sdf_Path_t const* _this, std_String_t const* element, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendElementString(*element));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AppendElementToken(sdf_Path_t const* _this, tf_Token_t const* elementTok, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->AppendElementToken(*elementTok));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_ReplacePrefix(sdf_Path_t const* _this, sdf_Path_t const* oldPrefix, sdf_Path_t const* newPrefix, bool fixTargetPaths, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->ReplacePrefix(*oldPrefix, *newPrefix, fixTargetPaths));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetCommonPrefix(sdf_Path_t const* _this, sdf_Path_t const* path, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetCommonPrefix(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_MakeAbsolutePath(sdf_Path_t const* _this, sdf_Path_t const* anchor, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->MakeAbsolutePath(*anchor));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_MakeRelativePath(sdf_Path_t const* _this, sdf_Path_t const* anchor, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->MakeRelativePath(*anchor));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_EmptyPath(sdf_Path_t const** _result) {
    try {
        *_result = &pxr::SdfPath::EmptyPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_AbsoluteRootPath(sdf_Path_t const** _result) {
    try {
        *_result = &pxr::SdfPath::AbsoluteRootPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_ReflexiveRelativePath(sdf_Path_t const** _result) {
    try {
        *_result = &pxr::SdfPath::ReflexiveRelativePath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsValidIdentifier(std_String_t const* name, bool* _result) {
    try {
        *_result = pxr::SdfPath::IsValidIdentifier(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsValidNamespacedIdentifier(std_String_t const* name, bool* _result) {
    try {
        *_result = pxr::SdfPath::IsValidNamespacedIdentifier(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_TokenizeIdentifier(std_String_t const* name, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(pxr::SdfPath::TokenizeIdentifier(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_TokenizeIdentifierAsTokens(std_String_t const* name, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(pxr::SdfPath::TokenizeIdentifierAsTokens(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_IsValidPathString(std_String_t const* pathString, std_String_t* errMsg, bool* _result) {
    try {
        *_result = pxr::SdfPath::IsValidPathString(*pathString, errMsg);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_GetConciseRelativePaths(sdf_PathVector_t const* paths, sdf_PathVector_t** _result) {
    try {
        *_result = new pxr::SdfPathVector(pxr::SdfPath::GetConciseRelativePaths(*paths));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_RemoveDescendentPaths(sdf_PathVector_t* paths) {
    try {
        pxr::SdfPath::RemoveDescendentPaths(paths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_RemoveAncestorPaths(sdf_PathVector_t* paths) {
    try {
        pxr::SdfPath::RemoveAncestorPaths(paths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_default(sdf_Path_t** _result) {
    *_result = new pxr::SdfPath();
    return 0;
}

int sdf_Path_from_string(char const* path, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Path_dtor(sdf_Path_t* _this) {
    delete _this;
    return 0;
}

int sdf_PathSet_dtor(sdf_PathSet_t* _this) {
    delete _this;
    return 0;
}

int sdf_PathVector_data(sdf_PathVector_t* _this, sdf_Path_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PathVector_data_const(sdf_PathVector_t const* _this, sdf_Path_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PathVector_empty(sdf_PathVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_PathVector_size(sdf_PathVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_PathVector_max_size(sdf_PathVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_PathVector_capacity(sdf_PathVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_PathVector_clear(sdf_PathVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_PathVector_pop_back(sdf_PathVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_PathVector_op_index(sdf_PathVector_t const* _this, size_t __n, sdf_Path_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_PathVector_default(sdf_PathVector_t** _result) {
    *_result = new pxr::SdfPathVector();
    return 0;
}

int sdf_PathVector_dtor(sdf_PathVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfPathExpression_MakeComplement_00(sdf_SdfPathExpression_t* right, sdf_SdfPathExpression_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression(pxr::SdfPathExpression::MakeComplement(*right));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_MakeComplement_01(sdf_SdfPathExpression_t const* right, sdf_SdfPathExpression_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression(pxr::SdfPathExpression::MakeComplement(*right));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_MakeOp_00(unsigned int op, sdf_SdfPathExpression_t* left, sdf_SdfPathExpression_t* right, sdf_SdfPathExpression_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression(pxr::SdfPathExpression::MakeOp(static_cast<pxr::SdfPathExpression::Op>(op), *left, *right));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_MakeOp_01(unsigned int op, sdf_SdfPathExpression_t const* left, sdf_SdfPathExpression_t const* right, sdf_SdfPathExpression_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression(pxr::SdfPathExpression::MakeOp(static_cast<pxr::SdfPathExpression::Op>(op), *left, *right));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_MakeAtom_01(sdf_ExpressionReference_t const* ref, sdf_SdfPathExpression_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression(pxr::SdfPathExpression::MakeAtom(*ref));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_MakeAtom_03(sdf_PathPattern_t const* pattern, sdf_SdfPathExpression_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression(pxr::SdfPathExpression::MakeAtom(*pattern));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_IsComplete(sdf_SdfPathExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->IsComplete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_IsEmpty(sdf_SdfPathExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_op_bool(sdf_SdfPathExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_GetParseError(sdf_SdfPathExpression_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetParseError();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_default(sdf_SdfPathExpression_t** _result) {
    *_result = new pxr::SdfPathExpression();
    return 0;
}

int sdf_SdfPathExpression_ctor_01(std_String_t const* expr, std_String_t const* parseContext, sdf_SdfPathExpression_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression(*expr, *parseContext);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfPathExpression_dtor(sdf_SdfPathExpression_t* _this) {
    delete _this;
    return 0;
}

int sdf_PathPattern_AppendChild_00(sdf_PathPattern_t* _this, std_String_t const* text, sdf_PredicateExpression_t* predExpr) {
    try {
        _this->AppendChild(*text, *predExpr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_AppendChild_01(sdf_PathPattern_t* _this, std_String_t const* text, sdf_PredicateExpression_t const* predExpr) {
    try {
        _this->AppendChild(*text, *predExpr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_AppendChild_02(sdf_PathPattern_t* _this, std_String_t const* text) {
    try {
        _this->AppendChild(*text);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_AppendProperty_00(sdf_PathPattern_t* _this, std_String_t const* text, sdf_PredicateExpression_t* predExpr) {
    try {
        _this->AppendProperty(*text, *predExpr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_AppendProperty_01(sdf_PathPattern_t* _this, std_String_t const* text, sdf_PredicateExpression_t const* predExpr) {
    try {
        _this->AppendProperty(*text, *predExpr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_AppendProperty_02(sdf_PathPattern_t* _this, std_String_t const* text) {
    try {
        _this->AppendProperty(*text);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_SetPrefix_00(sdf_PathPattern_t* _this, sdf_Path_t* p) {
    try {
        _this->SetPrefix(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_SetPrefix_01(sdf_PathPattern_t* _this, sdf_Path_t const* p) {
    try {
        _this->SetPrefix(*p);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_IsProperty(sdf_PathPattern_t const* _this, bool* _result) {
    try {
        *_result = _this->IsProperty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_op_bool(sdf_PathPattern_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_default(sdf_PathPattern_t** _result) {
    try {
        *_result = new pxr::SdfPathExpression::PathPattern();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PathPattern_dtor(sdf_PathPattern_t* _this) {
    delete _this;
    return 0;
}

int sdf_Component_IsStretch(sdf_Component_t const* _this, bool* _result) {
    try {
        *_result = _this->IsStretch();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Component_default(sdf_Component_t** _result) {
    *_result = new pxr::SdfPathExpression::PathPattern::Component();
    return 0;
}

int sdf_Component_dtor(sdf_Component_t* _this) {
    delete _this;
    return 0;
}

int sdf_ExpressionReference_default(sdf_ExpressionReference_t** _result) {
    *_result = new pxr::SdfPathExpression::ExpressionReference();
    return 0;
}

int sdf_ExpressionReference_dtor(sdf_ExpressionReference_t* _this) {
    delete _this;
    return 0;
}

int sdf_Payload_GetAssetPath(sdf_Payload_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetAssetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_SetAssetPath(sdf_Payload_t* _this, std_String_t const* assetPath) {
    try {
        _this->SetAssetPath(*assetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_GetPrimPath(sdf_Payload_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_SetPrimPath(sdf_Payload_t* _this, sdf_Path_t const* primPath) {
    try {
        _this->SetPrimPath(*primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_GetLayerOffset(sdf_Payload_t const* _this, sdf_LayerOffset_t const** _result) {
    try {
        *_result = &_this->GetLayerOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_SetLayerOffset(sdf_Payload_t* _this, sdf_LayerOffset_t const* layerOffset) {
    try {
        _this->SetLayerOffset(*layerOffset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_op_eq(sdf_Payload_t const* _this, sdf_Payload_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_op_lt(sdf_Payload_t const* _this, sdf_Payload_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_new(sdf_Payload_t** _result) {
    try {
        *_result = new pxr::SdfPayload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_dtor(sdf_Payload_t* _this) {
    delete _this;
    return 0;
}

int sdf_PayloadVector_data(sdf_PayloadVector_t* _this, sdf_Payload_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PayloadVector_data_const(sdf_PayloadVector_t const* _this, sdf_Payload_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PayloadVector_empty(sdf_PayloadVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_PayloadVector_size(sdf_PayloadVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_PayloadVector_max_size(sdf_PayloadVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_PayloadVector_capacity(sdf_PayloadVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_PayloadVector_clear(sdf_PayloadVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_PayloadVector_pop_back(sdf_PayloadVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_PayloadVector_op_index(sdf_PayloadVector_t const* _this, size_t __n, sdf_Payload_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_PayloadVector_default(sdf_PayloadVector_t** _result) {
    *_result = new pxr::SdfPayloadVector();
    return 0;
}

int sdf_PayloadVector_dtor(sdf_PayloadVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_PredicateExpression_GetText(sdf_PredicateExpression_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetText());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PredicateExpression_IsEmpty(sdf_PredicateExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PredicateExpression_op_bool(sdf_PredicateExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PredicateExpression_default(sdf_PredicateExpression_t** _result) {
    *_result = new pxr::SdfPredicateExpression();
    return 0;
}

int sdf_PredicateExpression_ctor_01(std_String_t const* expr, std_String_t const* context, sdf_PredicateExpression_t** _result) {
    try {
        *_result = new pxr::SdfPredicateExpression(*expr, *context);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PredicateExpression_dtor(sdf_PredicateExpression_t* _this) {
    delete _this;
    return 0;
}

int sdf_PredicateExpressionFnArg_Positional(vt_Value_t const* val, sdf_PredicateExpressionFnArg_t** _result) {
    try {
        *_result = new pxr::SdfPredicateExpression::FnArg(pxr::SdfPredicateExpression::FnArg::Positional(*val));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PredicateExpressionFnArg_Keyword(std_String_t const* name, vt_Value_t const* val, sdf_PredicateExpressionFnArg_t** _result) {
    try {
        *_result = new pxr::SdfPredicateExpression::FnArg(pxr::SdfPredicateExpression::FnArg::Keyword(*name, *val));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PredicateExpressionFnArg_default(sdf_PredicateExpressionFnArg_t** _result) {
    try {
        *_result = new pxr::SdfPredicateExpression::FnArg();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PredicateExpressionFnArg_dtor(sdf_PredicateExpressionFnArg_t* _this) {
    delete _this;
    return 0;
}

int sdf_PredicateExpressionFnCall_default(sdf_PredicateExpressionFnCall_t** _result) {
    *_result = new pxr::SdfPredicateExpression::FnCall();
    return 0;
}

int sdf_PredicateExpressionFnCall_dtor(sdf_PredicateExpressionFnCall_t* _this) {
    delete _this;
    return 0;
}

int sdf_PrimSpec_GetNameRoot(sdf_PrimSpec_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetNameRoot());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetNameParent(sdf_PrimSpec_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetNameParent());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetRealNameParent(sdf_PrimSpec_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetRealNameParent());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetNameChildren(sdf_PrimSpec_t const* _this, sdf_PrimSpecView_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecView(_this->GetNameChildren());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetNameChildren(sdf_PrimSpec_t* _this, sdf_PrimSpecHandleVector_t const* param00) {
    try {
        _this->SetNameChildren(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_InsertNameChild(sdf_PrimSpec_t* _this, sdf_PrimSpecHandle_t const* child, int index, bool* _result) {
    try {
        *_result = _this->InsertNameChild(*child, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_RemoveNameChild(sdf_PrimSpec_t* _this, sdf_PrimSpecHandle_t const* child, bool* _result) {
    try {
        *_result = _this->RemoveNameChild(*child);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetNameChildrenOrder(sdf_PrimSpec_t const* _this, sdf_NameOrderProxy_t** _result) {
    try {
        *_result = new pxr::SdfNameOrderProxy(_this->GetNameChildrenOrder());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasNameChildrenOrder(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasNameChildrenOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetNameChildrenOrder(sdf_PrimSpec_t* _this, tf_TokenVector_t const* names) {
    try {
        _this->SetNameChildrenOrder(*names);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_InsertInNameChildrenOrder(sdf_PrimSpec_t* _this, tf_Token_t const* name, int index) {
    try {
        _this->InsertInNameChildrenOrder(*name, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_RemoveFromNameChildrenOrder(sdf_PrimSpec_t* _this, tf_Token_t const* name) {
    try {
        _this->RemoveFromNameChildrenOrder(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_RemoveFromNameChildrenOrderByIndex(sdf_PrimSpec_t* _this, int index) {
    try {
        _this->RemoveFromNameChildrenOrderByIndex(index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ApplyNameChildrenOrder(sdf_PrimSpec_t const* _this, tf_TokenVector_t* vec) {
    try {
        _this->ApplyNameChildrenOrder(vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetProperties(sdf_PrimSpec_t const* _this, sdf_PropertySpecView_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecView(_this->GetProperties());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetProperties(sdf_PrimSpec_t* _this, sdf_PropertySpecHandleVector_t const* param00) {
    try {
        _this->SetProperties(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_InsertProperty(sdf_PrimSpec_t* _this, sdf_PropertySpecHandle_t const* property, int index, bool* _result) {
    try {
        *_result = _this->InsertProperty(*property, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_RemoveProperty(sdf_PrimSpec_t* _this, sdf_PropertySpecHandle_t const* property) {
    try {
        _this->RemoveProperty(*property);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetAttributes(sdf_PrimSpec_t const* _this, sdf_AttributeSpecView_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecView(_this->GetAttributes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetRelationships(sdf_PrimSpec_t const* _this, sdf_RelationshipSpecView_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecView(_this->GetRelationships());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPropertyOrder(sdf_PrimSpec_t const* _this, sdf_NameOrderProxy_t** _result) {
    try {
        *_result = new pxr::SdfNameOrderProxy(_this->GetPropertyOrder());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasPropertyOrder(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasPropertyOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetPropertyOrder(sdf_PrimSpec_t* _this, tf_TokenVector_t const* names) {
    try {
        _this->SetPropertyOrder(*names);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_InsertInPropertyOrder(sdf_PrimSpec_t* _this, tf_Token_t const* name, int index) {
    try {
        _this->InsertInPropertyOrder(*name, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_RemoveFromPropertyOrder(sdf_PrimSpec_t* _this, tf_Token_t const* name) {
    try {
        _this->RemoveFromPropertyOrder(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_RemoveFromPropertyOrderByIndex(sdf_PrimSpec_t* _this, int index) {
    try {
        _this->RemoveFromPropertyOrderByIndex(index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ApplyPropertyOrder(sdf_PrimSpec_t const* _this, tf_TokenVector_t* vec) {
    try {
        _this->ApplyPropertyOrder(vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetObjectAtPath(sdf_PrimSpec_t const* _this, sdf_Path_t const* path, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle(_this->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPrimAtPath(sdf_PrimSpec_t const* _this, sdf_Path_t const* path, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPropertyAtPath(sdf_PrimSpec_t const* _this, sdf_Path_t const* path, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle(_this->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetAttributeAtPath(sdf_PrimSpec_t const* _this, sdf_Path_t const* path, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle(_this->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetRelationshipAtPath(sdf_PrimSpec_t const* _this, sdf_Path_t const* path, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle(_this->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetTypeName(sdf_PrimSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetTypeName(sdf_PrimSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetTypeName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetComment(sdf_PrimSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetComment(sdf_PrimSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetDocumentation(sdf_PrimSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetDocumentation(sdf_PrimSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetActive(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->GetActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetActive(sdf_PrimSpec_t* _this, bool value) {
    try {
        _this->SetActive(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasActive(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearActive(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetHidden(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetHidden(sdf_PrimSpec_t* _this, bool value) {
    try {
        _this->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetKind(sdf_PrimSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetKind(sdf_PrimSpec_t* _this, tf_Token_t const* value) {
    try {
        _this->SetKind(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasKind(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasKind();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearKind(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearKind();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSymmetryFunction(sdf_PrimSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetSymmetryFunction(sdf_PrimSpec_t* _this, tf_Token_t const* functionName) {
    try {
        _this->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSymmetricPeer(sdf_PrimSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetSymmetricPeer(sdf_PrimSpec_t* _this, std_String_t const* peerName) {
    try {
        _this->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPrefix(sdf_PrimSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetPrefix(sdf_PrimSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSuffix(sdf_PrimSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetSuffix(sdf_PrimSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetCustomData(sdf_PrimSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetCustomData(sdf_PrimSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetAssetInfo(sdf_PrimSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetAssetInfo(sdf_PrimSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSpecifier(sdf_PrimSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecifier());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetSpecifier(sdf_PrimSpec_t* _this, unsigned int value) {
    try {
        _this->SetSpecifier(static_cast<pxr::SdfSpecifier>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPermission(sdf_PrimSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetPermission(sdf_PrimSpec_t* _this, unsigned int value) {
    try {
        _this->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPrefixSubstitutions(sdf_PrimSpec_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetPrefixSubstitutions());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetPrefixSubstitutions(sdf_PrimSpec_t* _this, vt_Dictionary_t const* prefixSubstitutions) {
    try {
        _this->SetPrefixSubstitutions(*prefixSubstitutions);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSuffixSubstitutions(sdf_PrimSpec_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetSuffixSubstitutions());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetSuffixSubstitutions(sdf_PrimSpec_t* _this, vt_Dictionary_t const* suffixSubstitutions) {
    try {
        _this->SetSuffixSubstitutions(*suffixSubstitutions);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetInstanceable(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->GetInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetInstanceable(sdf_PrimSpec_t* _this, bool instanceable) {
    try {
        _this->SetInstanceable(instanceable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasInstanceable(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearInstanceable(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPayloadList(sdf_PrimSpec_t const* _this, sdf_PayloadEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPayloadEditorProxy(_this->GetPayloadList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasPayloads(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasPayloads();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearPayloadList(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearPayloadList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetInheritPathList(sdf_PrimSpec_t const* _this, sdf_PathEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPathEditorProxy(_this->GetInheritPathList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasInheritPaths(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasInheritPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearInheritPathList(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearInheritPathList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSpecializesList(sdf_PrimSpec_t const* _this, sdf_PathEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPathEditorProxy(_this->GetSpecializesList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasSpecializes(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSpecializes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearSpecializesList(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearSpecializesList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetReferenceList(sdf_PrimSpec_t const* _this, sdf_ReferenceEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfReferenceEditorProxy(_this->GetReferenceList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasReferences(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasReferences();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearReferenceList(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearReferenceList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetVariantSetNameList(sdf_PrimSpec_t const* _this, sdf_NameEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfNameEditorProxy(_this->GetVariantSetNameList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasVariantSetNames(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasVariantSetNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetVariantNames(sdf_PrimSpec_t const* _this, std_String_t const* name, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetVariantNames(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_RemoveVariantSet(sdf_PrimSpec_t* _this, std_String_t const* name) {
    try {
        _this->RemoveVariantSet(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetVariantSelections(sdf_PrimSpec_t const* _this, sdf_VariantSelectionProxy_t** _result) {
    try {
        *_result = new pxr::SdfVariantSelectionProxy(_this->GetVariantSelections());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_BlockVariantSelection(sdf_PrimSpec_t* _this, std_String_t const* variantSetName) {
    try {
        _this->BlockVariantSelection(*variantSetName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetRelocates(sdf_PrimSpec_t const* _this, sdf_RelocatesMapProxy_t** _result) {
    try {
        *_result = new pxr::SdfRelocatesMapProxy(_this->GetRelocates());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetRelocates(sdf_PrimSpec_t* _this, sdf_RelocatesMap_t const* newMap) {
    try {
        _this->SetRelocates(*newMap);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasRelocates(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasRelocates();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearRelocates(sdf_PrimSpec_t* _this) {
    try {
        _this->ClearRelocates();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_New(sdf_LayerHandle_t const* parentLayer, std_String_t const* name, unsigned int spec, std_String_t const* typeName, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(pxr::SdfPrimSpec::New(*parentLayer, *name, static_cast<pxr::SdfSpecifier>(spec), *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_New_under_parent(sdf_PrimSpecHandle_t const* parentPrim, std_String_t const* name, unsigned int spec, std_String_t const* typeName, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(pxr::SdfPrimSpec::New(*parentPrim, *name, static_cast<pxr::SdfSpecifier>(spec), *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_IsValidName(std_String_t const* name, bool* _result) {
    try {
        *_result = pxr::SdfPrimSpec::IsValidName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetName(sdf_PrimSpec_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetNameToken(sdf_PrimSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_CanSetName(sdf_PrimSpec_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = _this->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetName(sdf_PrimSpec_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = _this->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSchema(sdf_PrimSpec_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetSpecType(sdf_PrimSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_IsDormant(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetLayer(sdf_PrimSpec_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetPath(sdf_PrimSpec_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_PermissionToEdit(sdf_PrimSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ListInfoKeys(sdf_PrimSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetMetaDataInfoKeys(sdf_PrimSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetMetaDataDisplayGroup(sdf_PrimSpec_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetInfo(sdf_PrimSpec_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetInfo(sdf_PrimSpec_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        _this->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetInfoDictionaryValue(sdf_PrimSpec_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        _this->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasInfo(sdf_PrimSpec_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearInfo(sdf_PrimSpec_t* _this, tf_Token_t const* key) {
    try {
        _this->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetTypeForInfo(sdf_PrimSpec_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetFallbackForInfo(sdf_PrimSpec_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_IsInert(sdf_PrimSpec_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = _this->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ListFields(sdf_PrimSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_HasField_00(sdf_PrimSpec_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_GetField(sdf_PrimSpec_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_SetField_00(sdf_PrimSpec_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_ClearField(sdf_PrimSpec_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_op_eq(sdf_PrimSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_op_lt(sdf_PrimSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpec_dtor(sdf_PrimSpec_t* _this) {
    delete _this;
    return 0;
}

int sdf_PrimSpecHandle_GetNameRoot(sdf_PrimSpecHandle_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetNameRoot());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetNameParent(sdf_PrimSpecHandle_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetNameParent());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetRealNameParent(sdf_PrimSpecHandle_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetRealNameParent());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetNameChildren(sdf_PrimSpecHandle_t const* _this, sdf_PrimSpecView_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecView((*_this)->GetNameChildren());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetNameChildren(sdf_PrimSpecHandle_t* _this, sdf_PrimSpecHandleVector_t const* param00) {
    try {
        (*_this)->SetNameChildren(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_InsertNameChild(sdf_PrimSpecHandle_t* _this, sdf_PrimSpecHandle_t const* child, int index, bool* _result) {
    try {
        *_result = (*_this)->InsertNameChild(*child, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_RemoveNameChild(sdf_PrimSpecHandle_t* _this, sdf_PrimSpecHandle_t const* child, bool* _result) {
    try {
        *_result = (*_this)->RemoveNameChild(*child);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetNameChildrenOrder(sdf_PrimSpecHandle_t const* _this, sdf_NameOrderProxy_t** _result) {
    try {
        *_result = new pxr::SdfNameOrderProxy((*_this)->GetNameChildrenOrder());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasNameChildrenOrder(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasNameChildrenOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetNameChildrenOrder(sdf_PrimSpecHandle_t* _this, tf_TokenVector_t const* names) {
    try {
        (*_this)->SetNameChildrenOrder(*names);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_InsertInNameChildrenOrder(sdf_PrimSpecHandle_t* _this, tf_Token_t const* name, int index) {
    try {
        (*_this)->InsertInNameChildrenOrder(*name, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_RemoveFromNameChildrenOrder(sdf_PrimSpecHandle_t* _this, tf_Token_t const* name) {
    try {
        (*_this)->RemoveFromNameChildrenOrder(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_RemoveFromNameChildrenOrderByIndex(sdf_PrimSpecHandle_t* _this, int index) {
    try {
        (*_this)->RemoveFromNameChildrenOrderByIndex(index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ApplyNameChildrenOrder(sdf_PrimSpecHandle_t const* _this, tf_TokenVector_t* vec) {
    try {
        (*_this)->ApplyNameChildrenOrder(vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetProperties(sdf_PrimSpecHandle_t const* _this, sdf_PropertySpecView_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecView((*_this)->GetProperties());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetProperties(sdf_PrimSpecHandle_t* _this, sdf_PropertySpecHandleVector_t const* param00) {
    try {
        (*_this)->SetProperties(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_InsertProperty(sdf_PrimSpecHandle_t* _this, sdf_PropertySpecHandle_t const* property, int index, bool* _result) {
    try {
        *_result = (*_this)->InsertProperty(*property, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_RemoveProperty(sdf_PrimSpecHandle_t* _this, sdf_PropertySpecHandle_t const* property) {
    try {
        (*_this)->RemoveProperty(*property);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetAttributes(sdf_PrimSpecHandle_t const* _this, sdf_AttributeSpecView_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecView((*_this)->GetAttributes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetRelationships(sdf_PrimSpecHandle_t const* _this, sdf_RelationshipSpecView_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecView((*_this)->GetRelationships());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPropertyOrder(sdf_PrimSpecHandle_t const* _this, sdf_NameOrderProxy_t** _result) {
    try {
        *_result = new pxr::SdfNameOrderProxy((*_this)->GetPropertyOrder());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasPropertyOrder(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasPropertyOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetPropertyOrder(sdf_PrimSpecHandle_t* _this, tf_TokenVector_t const* names) {
    try {
        (*_this)->SetPropertyOrder(*names);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_InsertInPropertyOrder(sdf_PrimSpecHandle_t* _this, tf_Token_t const* name, int index) {
    try {
        (*_this)->InsertInPropertyOrder(*name, index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_RemoveFromPropertyOrder(sdf_PrimSpecHandle_t* _this, tf_Token_t const* name) {
    try {
        (*_this)->RemoveFromPropertyOrder(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_RemoveFromPropertyOrderByIndex(sdf_PrimSpecHandle_t* _this, int index) {
    try {
        (*_this)->RemoveFromPropertyOrderByIndex(index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ApplyPropertyOrder(sdf_PrimSpecHandle_t const* _this, tf_TokenVector_t* vec) {
    try {
        (*_this)->ApplyPropertyOrder(vec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetObjectAtPath(sdf_PrimSpecHandle_t const* _this, sdf_Path_t const* path, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle((*_this)->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPrimAtPath(sdf_PrimSpecHandle_t const* _this, sdf_Path_t const* path, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle((*_this)->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPropertyAtPath(sdf_PrimSpecHandle_t const* _this, sdf_Path_t const* path, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle((*_this)->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetAttributeAtPath(sdf_PrimSpecHandle_t const* _this, sdf_Path_t const* path, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle((*_this)->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetRelationshipAtPath(sdf_PrimSpecHandle_t const* _this, sdf_Path_t const* path, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle((*_this)->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetTypeName(sdf_PrimSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetTypeName(sdf_PrimSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetTypeName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetComment(sdf_PrimSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetComment(sdf_PrimSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetDocumentation(sdf_PrimSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetDocumentation(sdf_PrimSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetActive(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetActive(sdf_PrimSpecHandle_t* _this, bool value) {
    try {
        (*_this)->SetActive(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasActive(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearActive(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetHidden(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetHidden(sdf_PrimSpecHandle_t* _this, bool value) {
    try {
        (*_this)->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetKind(sdf_PrimSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetKind(sdf_PrimSpecHandle_t* _this, tf_Token_t const* value) {
    try {
        (*_this)->SetKind(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasKind(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasKind();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearKind(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearKind();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSymmetryFunction(sdf_PrimSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetSymmetryFunction(sdf_PrimSpecHandle_t* _this, tf_Token_t const* functionName) {
    try {
        (*_this)->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSymmetricPeer(sdf_PrimSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetSymmetricPeer(sdf_PrimSpecHandle_t* _this, std_String_t const* peerName) {
    try {
        (*_this)->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPrefix(sdf_PrimSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetPrefix(sdf_PrimSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSuffix(sdf_PrimSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetSuffix(sdf_PrimSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetCustomData(sdf_PrimSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetCustomData(sdf_PrimSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetAssetInfo(sdf_PrimSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetAssetInfo(sdf_PrimSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSpecifier(sdf_PrimSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecifier());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetSpecifier(sdf_PrimSpecHandle_t* _this, unsigned int value) {
    try {
        (*_this)->SetSpecifier(static_cast<pxr::SdfSpecifier>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPermission(sdf_PrimSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetPermission(sdf_PrimSpecHandle_t* _this, unsigned int value) {
    try {
        (*_this)->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPrefixSubstitutions(sdf_PrimSpecHandle_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary((*_this)->GetPrefixSubstitutions());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetPrefixSubstitutions(sdf_PrimSpecHandle_t* _this, vt_Dictionary_t const* prefixSubstitutions) {
    try {
        (*_this)->SetPrefixSubstitutions(*prefixSubstitutions);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSuffixSubstitutions(sdf_PrimSpecHandle_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary((*_this)->GetSuffixSubstitutions());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetSuffixSubstitutions(sdf_PrimSpecHandle_t* _this, vt_Dictionary_t const* suffixSubstitutions) {
    try {
        (*_this)->SetSuffixSubstitutions(*suffixSubstitutions);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetInstanceable(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetInstanceable(sdf_PrimSpecHandle_t* _this, bool instanceable) {
    try {
        (*_this)->SetInstanceable(instanceable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasInstanceable(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearInstanceable(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPayloadList(sdf_PrimSpecHandle_t const* _this, sdf_PayloadEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPayloadEditorProxy((*_this)->GetPayloadList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasPayloads(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasPayloads();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearPayloadList(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearPayloadList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetInheritPathList(sdf_PrimSpecHandle_t const* _this, sdf_PathEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPathEditorProxy((*_this)->GetInheritPathList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasInheritPaths(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasInheritPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearInheritPathList(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearInheritPathList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSpecializesList(sdf_PrimSpecHandle_t const* _this, sdf_PathEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPathEditorProxy((*_this)->GetSpecializesList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasSpecializes(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasSpecializes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearSpecializesList(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearSpecializesList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetReferenceList(sdf_PrimSpecHandle_t const* _this, sdf_ReferenceEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfReferenceEditorProxy((*_this)->GetReferenceList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasReferences(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasReferences();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearReferenceList(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearReferenceList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetVariantSetNameList(sdf_PrimSpecHandle_t const* _this, sdf_NameEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfNameEditorProxy((*_this)->GetVariantSetNameList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasVariantSetNames(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasVariantSetNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetVariantNames(sdf_PrimSpecHandle_t const* _this, std_String_t const* name, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>((*_this)->GetVariantNames(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_RemoveVariantSet(sdf_PrimSpecHandle_t* _this, std_String_t const* name) {
    try {
        (*_this)->RemoveVariantSet(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetVariantSelections(sdf_PrimSpecHandle_t const* _this, sdf_VariantSelectionProxy_t** _result) {
    try {
        *_result = new pxr::SdfVariantSelectionProxy((*_this)->GetVariantSelections());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_BlockVariantSelection(sdf_PrimSpecHandle_t* _this, std_String_t const* variantSetName) {
    try {
        (*_this)->BlockVariantSelection(*variantSetName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetRelocates(sdf_PrimSpecHandle_t const* _this, sdf_RelocatesMapProxy_t** _result) {
    try {
        *_result = new pxr::SdfRelocatesMapProxy((*_this)->GetRelocates());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetRelocates(sdf_PrimSpecHandle_t* _this, sdf_RelocatesMap_t const* newMap) {
    try {
        (*_this)->SetRelocates(*newMap);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasRelocates(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasRelocates();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearRelocates(sdf_PrimSpecHandle_t* _this) {
    try {
        (*_this)->ClearRelocates();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetName(sdf_PrimSpecHandle_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetNameToken(sdf_PrimSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_CanSetName(sdf_PrimSpecHandle_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = (*_this)->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetName(sdf_PrimSpecHandle_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = (*_this)->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSchema(sdf_PrimSpecHandle_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &(*_this)->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetSpecType(sdf_PrimSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_IsDormant(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetLayer(sdf_PrimSpecHandle_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle((*_this)->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetPath(sdf_PrimSpecHandle_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath((*_this)->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_PermissionToEdit(sdf_PrimSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ListInfoKeys(sdf_PrimSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetMetaDataInfoKeys(sdf_PrimSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetMetaDataDisplayGroup(sdf_PrimSpecHandle_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetInfo(sdf_PrimSpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetInfo(sdf_PrimSpecHandle_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        (*_this)->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetInfoDictionaryValue(sdf_PrimSpecHandle_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        (*_this)->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasInfo(sdf_PrimSpecHandle_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearInfo(sdf_PrimSpecHandle_t* _this, tf_Token_t const* key) {
    try {
        (*_this)->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetTypeForInfo(sdf_PrimSpecHandle_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetFallbackForInfo(sdf_PrimSpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &(*_this)->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_IsInert(sdf_PrimSpecHandle_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = (*_this)->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ListFields(sdf_PrimSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_HasField_00(sdf_PrimSpecHandle_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_GetField(sdf_PrimSpecHandle_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_SetField_00(sdf_PrimSpecHandle_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = (*_this)->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_ClearField(sdf_PrimSpecHandle_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_op_eq(sdf_PrimSpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_op_lt(sdf_PrimSpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PrimSpecHandle_dtor(sdf_PrimSpecHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_PrimSpecHandleVector_data(sdf_PrimSpecHandleVector_t* _this, sdf_PrimSpecHandle_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PrimSpecHandleVector_data_const(sdf_PrimSpecHandleVector_t const* _this, sdf_PrimSpecHandle_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PrimSpecHandleVector_empty(sdf_PrimSpecHandleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_PrimSpecHandleVector_size(sdf_PrimSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_PrimSpecHandleVector_max_size(sdf_PrimSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_PrimSpecHandleVector_capacity(sdf_PrimSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_PrimSpecHandleVector_clear(sdf_PrimSpecHandleVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_PrimSpecHandleVector_pop_back(sdf_PrimSpecHandleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_PrimSpecHandleVector_op_index(sdf_PrimSpecHandleVector_t const* _this, size_t __n, sdf_PrimSpecHandle_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_PrimSpecHandleVector_default(sdf_PrimSpecHandleVector_t** _result) {
    *_result = new pxr::SdfPrimSpecHandleVector();
    return 0;
}

int sdf_PrimSpecHandleVector_dtor(sdf_PrimSpecHandleVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_PrimSpecHandleOffsetPair_dtor(sdf_PrimSpecHandleOffsetPair_t* _this) {
    delete _this;
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_data(sdf_PrimSpecHandleOffsetPairVector_t* _this, sdf_PrimSpecHandleOffsetPair_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_data_const(sdf_PrimSpecHandleOffsetPairVector_t const* _this, sdf_PrimSpecHandleOffsetPair_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_empty(sdf_PrimSpecHandleOffsetPairVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_size(sdf_PrimSpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_max_size(sdf_PrimSpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_capacity(sdf_PrimSpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_clear(sdf_PrimSpecHandleOffsetPairVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_pop_back(sdf_PrimSpecHandleOffsetPairVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_op_index(sdf_PrimSpecHandleOffsetPairVector_t const* _this, size_t __n, sdf_PrimSpecHandleOffsetPair_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_default(sdf_PrimSpecHandleOffsetPairVector_t** _result) {
    *_result = new std::vector<std::pair<pxr::SdfPrimSpecHandle, pxr::SdfLayerOffset>>();
    return 0;
}

int sdf_PrimSpecHandleOffsetPairVector_dtor(sdf_PrimSpecHandleOffsetPairVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_PrimSpecView_dtor(sdf_PrimSpecView_t* _this) {
    delete _this;
    return 0;
}

int sdf_PropertySpec_GetName(sdf_PropertySpec_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetNameToken(sdf_PropertySpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_CanSetName(sdf_PropertySpec_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = _this->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetName(sdf_PropertySpec_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = _this->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_IsValidName(std_String_t const* name, bool* _result) {
    try {
        *_result = pxr::SdfPropertySpec::IsValidName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetOwner(sdf_PropertySpec_t const* _this, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle(_this->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetCustomData(sdf_PropertySpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetAssetInfo(sdf_PropertySpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetCustomData(sdf_PropertySpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetAssetInfo(sdf_PropertySpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetDisplayGroup(sdf_PropertySpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetDisplayGroup(sdf_PropertySpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDisplayGroup(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetDisplayName(sdf_PropertySpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetDisplayName(sdf_PropertySpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDisplayName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetDocumentation(sdf_PropertySpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetDocumentation(sdf_PropertySpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetHidden(sdf_PropertySpec_t const* _this, bool* _result) {
    try {
        *_result = _this->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetHidden(sdf_PropertySpec_t* _this, bool value) {
    try {
        _this->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetPermission(sdf_PropertySpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetPermission(sdf_PropertySpec_t* _this, unsigned int value) {
    try {
        _this->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetPrefix(sdf_PropertySpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetPrefix(sdf_PropertySpec_t* _this, std_String_t const* value) {
    try {
        _this->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetSuffix(sdf_PropertySpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetSuffix(sdf_PropertySpec_t* _this, std_String_t const* value) {
    try {
        _this->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetSymmetricPeer(sdf_PropertySpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetSymmetricPeer(sdf_PropertySpec_t* _this, std_String_t const* peerName) {
    try {
        _this->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetSymmetryArguments(sdf_PropertySpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetSymmetryArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetSymmetryArgument(sdf_PropertySpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetSymmetryArgument(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetSymmetryFunction(sdf_PropertySpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetSymmetryFunction(sdf_PropertySpec_t* _this, tf_Token_t const* functionName) {
    try {
        _this->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetTimeSampleMap(sdf_PropertySpec_t const* _this, sdf_TimeSampleMap_t** _result) {
    try {
        *_result = new pxr::SdfTimeSampleMap(_this->GetTimeSampleMap());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetValueType(sdf_PropertySpec_t const* _this, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetValueType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetTypeName(sdf_PropertySpec_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetDefaultValue(sdf_PropertySpec_t const* _this, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetDefaultValue());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetDefaultValue(sdf_PropertySpec_t* _this, vt_Value_t const* defaultValue, bool* _result) {
    try {
        *_result = _this->SetDefaultValue(*defaultValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_HasDefaultValue(sdf_PropertySpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_ClearDefaultValue(sdf_PropertySpec_t* _this) {
    try {
        _this->ClearDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetComment(sdf_PropertySpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetComment(sdf_PropertySpec_t* _this, std_String_t const* value) {
    try {
        _this->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_IsCustom(sdf_PropertySpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetCustom(sdf_PropertySpec_t* _this, bool custom) {
    try {
        _this->SetCustom(custom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetVariability(sdf_PropertySpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_HasOnlyRequiredFields(sdf_PropertySpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasOnlyRequiredFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetSchema(sdf_PropertySpec_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetSpecType(sdf_PropertySpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_IsDormant(sdf_PropertySpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetLayer(sdf_PropertySpec_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetPath(sdf_PropertySpec_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_PermissionToEdit(sdf_PropertySpec_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_ListInfoKeys(sdf_PropertySpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetMetaDataInfoKeys(sdf_PropertySpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetMetaDataDisplayGroup(sdf_PropertySpec_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetInfo(sdf_PropertySpec_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetInfo(sdf_PropertySpec_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        _this->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetInfoDictionaryValue(sdf_PropertySpec_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        _this->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_HasInfo(sdf_PropertySpec_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_ClearInfo(sdf_PropertySpec_t* _this, tf_Token_t const* key) {
    try {
        _this->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetTypeForInfo(sdf_PropertySpec_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetFallbackForInfo(sdf_PropertySpec_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_IsInert(sdf_PropertySpec_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = _this->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_ListFields(sdf_PropertySpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_HasField_00(sdf_PropertySpec_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_GetField(sdf_PropertySpec_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_SetField_00(sdf_PropertySpec_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_ClearField(sdf_PropertySpec_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_op_eq(sdf_PropertySpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_op_lt(sdf_PropertySpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_default(sdf_PropertySpec_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpec_dtor(sdf_PropertySpec_t* _this) {
    delete _this;
    return 0;
}

int sdf_PropertySpecHandle_GetName(sdf_PropertySpecHandle_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetNameToken(sdf_PropertySpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_CanSetName(sdf_PropertySpecHandle_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = (*_this)->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetName(sdf_PropertySpecHandle_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = (*_this)->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetOwner(sdf_PropertySpecHandle_t const* _this, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle((*_this)->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetCustomData(sdf_PropertySpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetAssetInfo(sdf_PropertySpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetCustomData(sdf_PropertySpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetAssetInfo(sdf_PropertySpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetDisplayGroup(sdf_PropertySpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetDisplayGroup(sdf_PropertySpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDisplayGroup(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetDisplayName(sdf_PropertySpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetDisplayName(sdf_PropertySpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDisplayName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetDocumentation(sdf_PropertySpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetDocumentation(sdf_PropertySpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetHidden(sdf_PropertySpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetHidden(sdf_PropertySpecHandle_t* _this, bool value) {
    try {
        (*_this)->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetPermission(sdf_PropertySpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetPermission(sdf_PropertySpecHandle_t* _this, unsigned int value) {
    try {
        (*_this)->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetPrefix(sdf_PropertySpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetPrefix(sdf_PropertySpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetSuffix(sdf_PropertySpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetSuffix(sdf_PropertySpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetSymmetricPeer(sdf_PropertySpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetSymmetricPeer(sdf_PropertySpecHandle_t* _this, std_String_t const* peerName) {
    try {
        (*_this)->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetSymmetryArguments(sdf_PropertySpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetSymmetryArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetSymmetryArgument(sdf_PropertySpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetSymmetryArgument(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetSymmetryFunction(sdf_PropertySpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetSymmetryFunction(sdf_PropertySpecHandle_t* _this, tf_Token_t const* functionName) {
    try {
        (*_this)->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetTimeSampleMap(sdf_PropertySpecHandle_t const* _this, sdf_TimeSampleMap_t** _result) {
    try {
        *_result = new pxr::SdfTimeSampleMap((*_this)->GetTimeSampleMap());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetValueType(sdf_PropertySpecHandle_t const* _this, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetValueType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetTypeName(sdf_PropertySpecHandle_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName((*_this)->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetDefaultValue(sdf_PropertySpecHandle_t const* _this, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetDefaultValue());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetDefaultValue(sdf_PropertySpecHandle_t* _this, vt_Value_t const* defaultValue, bool* _result) {
    try {
        *_result = (*_this)->SetDefaultValue(*defaultValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_HasDefaultValue(sdf_PropertySpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_ClearDefaultValue(sdf_PropertySpecHandle_t* _this) {
    try {
        (*_this)->ClearDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetComment(sdf_PropertySpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetComment(sdf_PropertySpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_IsCustom(sdf_PropertySpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetCustom(sdf_PropertySpecHandle_t* _this, bool custom) {
    try {
        (*_this)->SetCustom(custom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetVariability(sdf_PropertySpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_HasOnlyRequiredFields(sdf_PropertySpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasOnlyRequiredFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetSchema(sdf_PropertySpecHandle_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &(*_this)->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetSpecType(sdf_PropertySpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_IsDormant(sdf_PropertySpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetLayer(sdf_PropertySpecHandle_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle((*_this)->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetPath(sdf_PropertySpecHandle_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath((*_this)->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_PermissionToEdit(sdf_PropertySpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_ListInfoKeys(sdf_PropertySpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetMetaDataInfoKeys(sdf_PropertySpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetMetaDataDisplayGroup(sdf_PropertySpecHandle_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetInfo(sdf_PropertySpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetInfo(sdf_PropertySpecHandle_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        (*_this)->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetInfoDictionaryValue(sdf_PropertySpecHandle_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        (*_this)->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_HasInfo(sdf_PropertySpecHandle_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_ClearInfo(sdf_PropertySpecHandle_t* _this, tf_Token_t const* key) {
    try {
        (*_this)->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetTypeForInfo(sdf_PropertySpecHandle_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetFallbackForInfo(sdf_PropertySpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &(*_this)->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_IsInert(sdf_PropertySpecHandle_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = (*_this)->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_ListFields(sdf_PropertySpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_HasField_00(sdf_PropertySpecHandle_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_GetField(sdf_PropertySpecHandle_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_SetField_00(sdf_PropertySpecHandle_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = (*_this)->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_ClearField(sdf_PropertySpecHandle_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_op_eq(sdf_PropertySpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_op_lt(sdf_PropertySpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_PropertySpecHandle_dtor(sdf_PropertySpecHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_PropertySpecHandleVector_data(sdf_PropertySpecHandleVector_t* _this, sdf_PropertySpecHandle_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PropertySpecHandleVector_data_const(sdf_PropertySpecHandleVector_t const* _this, sdf_PropertySpecHandle_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PropertySpecHandleVector_empty(sdf_PropertySpecHandleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_PropertySpecHandleVector_size(sdf_PropertySpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_PropertySpecHandleVector_max_size(sdf_PropertySpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_PropertySpecHandleVector_capacity(sdf_PropertySpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_PropertySpecHandleVector_clear(sdf_PropertySpecHandleVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_PropertySpecHandleVector_pop_back(sdf_PropertySpecHandleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_PropertySpecHandleVector_op_index(sdf_PropertySpecHandleVector_t const* _this, size_t __n, sdf_PropertySpecHandle_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_PropertySpecHandleVector_default(sdf_PropertySpecHandleVector_t** _result) {
    *_result = new pxr::SdfPropertySpecHandleVector();
    return 0;
}

int sdf_PropertySpecHandleVector_dtor(sdf_PropertySpecHandleVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_PropertySpecHandleOffsetPair_dtor(sdf_PropertySpecHandleOffsetPair_t* _this) {
    delete _this;
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_data(sdf_PropertySpecHandleOffsetPairVector_t* _this, sdf_PropertySpecHandleOffsetPair_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_data_const(sdf_PropertySpecHandleOffsetPairVector_t const* _this, sdf_PropertySpecHandleOffsetPair_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_empty(sdf_PropertySpecHandleOffsetPairVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_size(sdf_PropertySpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_max_size(sdf_PropertySpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_capacity(sdf_PropertySpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_clear(sdf_PropertySpecHandleOffsetPairVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_pop_back(sdf_PropertySpecHandleOffsetPairVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_op_index(sdf_PropertySpecHandleOffsetPairVector_t const* _this, size_t __n, sdf_PropertySpecHandleOffsetPair_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_default(sdf_PropertySpecHandleOffsetPairVector_t** _result) {
    *_result = new std::vector<std::pair<pxr::SdfPropertySpecHandle, pxr::SdfLayerOffset>>();
    return 0;
}

int sdf_PropertySpecHandleOffsetPairVector_dtor(sdf_PropertySpecHandleOffsetPairVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_PropertySpecView_dtor(sdf_PropertySpecView_t* _this) {
    delete _this;
    return 0;
}

int sdf_DictionaryProxy_dtor(sdf_DictionaryProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_NameOrderProxy_dtor(sdf_NameOrderProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_SubLayerProxy_dtor(sdf_SubLayerProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_NameEditorProxy_dtor(sdf_NameEditorProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_PathEditorProxy_dtor(sdf_PathEditorProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_PayloadEditorProxy_dtor(sdf_PayloadEditorProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_ReferenceEditorProxy_dtor(sdf_ReferenceEditorProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantSelectionProxy_dtor(sdf_VariantSelectionProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_RelocatesMapProxy_dtor(sdf_RelocatesMapProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantSetsProxy_dtor(sdf_VariantSetsProxy_t* _this) {
    delete _this;
    return 0;
}

int sdf_Reference_GetAssetPath(sdf_Reference_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetAssetPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_SetAssetPath(sdf_Reference_t* _this, std_String_t const* assetPath) {
    try {
        _this->SetAssetPath(*assetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_GetPrimPath(sdf_Reference_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_SetPrimPath(sdf_Reference_t* _this, sdf_Path_t const* primPath) {
    try {
        _this->SetPrimPath(*primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_GetLayerOffset(sdf_Reference_t const* _this, sdf_LayerOffset_t const** _result) {
    try {
        *_result = &_this->GetLayerOffset();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_SetLayerOffset(sdf_Reference_t* _this, sdf_LayerOffset_t const* layerOffset) {
    try {
        _this->SetLayerOffset(*layerOffset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_GetCustomData(sdf_Reference_t const* _this, vt_Dictionary_t const** _result) {
    try {
        *_result = &_this->GetCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_SetCustomData(sdf_Reference_t* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetCustomData(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_SetCustomData_value(sdf_Reference_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_SwapCustomData(sdf_Reference_t* _this, vt_Dictionary_t* customData) {
    try {
        _this->SwapCustomData(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_IsInternal(sdf_Reference_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInternal();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_op_eq(sdf_Reference_t const* _this, sdf_Reference_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_op_lt(sdf_Reference_t const* _this, sdf_Reference_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_dtor(sdf_Reference_t* _this) {
    delete _this;
    return 0;
}

int sdf_ReferenceVector_data(sdf_ReferenceVector_t* _this, sdf_Reference_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_ReferenceVector_data_const(sdf_ReferenceVector_t const* _this, sdf_Reference_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_ReferenceVector_empty(sdf_ReferenceVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_ReferenceVector_size(sdf_ReferenceVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_ReferenceVector_max_size(sdf_ReferenceVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_ReferenceVector_capacity(sdf_ReferenceVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_ReferenceVector_clear(sdf_ReferenceVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_ReferenceVector_pop_back(sdf_ReferenceVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_ReferenceVector_op_index(sdf_ReferenceVector_t const* _this, size_t __n, sdf_Reference_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_ReferenceVector_default(sdf_ReferenceVector_t** _result) {
    *_result = new pxr::SdfReferenceVector();
    return 0;
}

int sdf_ReferenceVector_dtor(sdf_ReferenceVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_RelationshipSpec_New(sdf_PrimSpecHandle_t const* owner, std_String_t const* name, bool custom, unsigned int variability, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle(pxr::SdfRelationshipSpec::New(*owner, *name, custom, static_cast<pxr::SdfVariability>(variability)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetNoLoadHint(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->GetNoLoadHint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetNoLoadHint(sdf_RelationshipSpec_t* _this, bool noload) {
    try {
        _this->SetNoLoadHint(noload);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetTargetPathList(sdf_RelationshipSpec_t const* _this, sdf_PathEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPathEditorProxy(_this->GetTargetPathList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_HasTargetPathList(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasTargetPathList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_ClearTargetPathList(sdf_RelationshipSpec_t const* _this) {
    try {
        _this->ClearTargetPathList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_ReplaceTargetPath(sdf_RelationshipSpec_t* _this, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        _this->ReplaceTargetPath(*oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_RemoveTargetPath(sdf_RelationshipSpec_t* _this, sdf_Path_t const* path, bool preserveTargetOrder) {
    try {
        _this->RemoveTargetPath(*path, preserveTargetOrder);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetName(sdf_RelationshipSpec_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetNameToken(sdf_RelationshipSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_CanSetName(sdf_RelationshipSpec_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = _this->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetName(sdf_RelationshipSpec_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = _this->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetOwner(sdf_RelationshipSpec_t const* _this, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle(_this->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetCustomData(sdf_RelationshipSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetAssetInfo(sdf_RelationshipSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetCustomData(sdf_RelationshipSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetAssetInfo(sdf_RelationshipSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetDisplayGroup(sdf_RelationshipSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetDisplayGroup(sdf_RelationshipSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDisplayGroup(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetDisplayName(sdf_RelationshipSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetDisplayName(sdf_RelationshipSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDisplayName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetDocumentation(sdf_RelationshipSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetDocumentation(sdf_RelationshipSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetHidden(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetHidden(sdf_RelationshipSpec_t* _this, bool value) {
    try {
        _this->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetPermission(sdf_RelationshipSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetPermission(sdf_RelationshipSpec_t* _this, unsigned int value) {
    try {
        _this->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetPrefix(sdf_RelationshipSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetPrefix(sdf_RelationshipSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetSuffix(sdf_RelationshipSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetSuffix(sdf_RelationshipSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetSymmetricPeer(sdf_RelationshipSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetSymmetricPeer(sdf_RelationshipSpec_t* _this, std_String_t const* peerName) {
    try {
        _this->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetSymmetryArguments(sdf_RelationshipSpec_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy(_this->GetSymmetryArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetSymmetryArgument(sdf_RelationshipSpec_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        _this->SetSymmetryArgument(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetSymmetryFunction(sdf_RelationshipSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetSymmetryFunction(sdf_RelationshipSpec_t* _this, tf_Token_t const* functionName) {
    try {
        _this->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetTimeSampleMap(sdf_RelationshipSpec_t const* _this, sdf_TimeSampleMap_t** _result) {
    try {
        *_result = new pxr::SdfTimeSampleMap(_this->GetTimeSampleMap());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetValueType(sdf_RelationshipSpec_t const* _this, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetValueType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetTypeName(sdf_RelationshipSpec_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetDefaultValue(sdf_RelationshipSpec_t const* _this, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetDefaultValue());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetDefaultValue(sdf_RelationshipSpec_t* _this, vt_Value_t const* defaultValue, bool* _result) {
    try {
        *_result = _this->SetDefaultValue(*defaultValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_HasDefaultValue(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_ClearDefaultValue(sdf_RelationshipSpec_t* _this) {
    try {
        _this->ClearDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetComment(sdf_RelationshipSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetComment(sdf_RelationshipSpec_t* _this, std_String_t const* value) {
    try {
        _this->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_IsCustom(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetCustom(sdf_RelationshipSpec_t* _this, bool custom) {
    try {
        _this->SetCustom(custom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetVariability(sdf_RelationshipSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_HasOnlyRequiredFields(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->HasOnlyRequiredFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetSchema(sdf_RelationshipSpec_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetSpecType(sdf_RelationshipSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_IsDormant(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetLayer(sdf_RelationshipSpec_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetPath(sdf_RelationshipSpec_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_PermissionToEdit(sdf_RelationshipSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_ListInfoKeys(sdf_RelationshipSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetMetaDataInfoKeys(sdf_RelationshipSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetMetaDataDisplayGroup(sdf_RelationshipSpec_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetInfo(sdf_RelationshipSpec_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetInfo(sdf_RelationshipSpec_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        _this->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetInfoDictionaryValue(sdf_RelationshipSpec_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        _this->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_HasInfo(sdf_RelationshipSpec_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_ClearInfo(sdf_RelationshipSpec_t* _this, tf_Token_t const* key) {
    try {
        _this->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetTypeForInfo(sdf_RelationshipSpec_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetFallbackForInfo(sdf_RelationshipSpec_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_IsInert(sdf_RelationshipSpec_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = _this->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_ListFields(sdf_RelationshipSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_HasField_00(sdf_RelationshipSpec_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_GetField(sdf_RelationshipSpec_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_SetField_00(sdf_RelationshipSpec_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_ClearField(sdf_RelationshipSpec_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_op_eq(sdf_RelationshipSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_op_lt(sdf_RelationshipSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpec_dtor(sdf_RelationshipSpec_t* _this) {
    delete _this;
    return 0;
}

int sdf_RelationshipSpecHandle_GetNoLoadHint(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetNoLoadHint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetNoLoadHint(sdf_RelationshipSpecHandle_t* _this, bool noload) {
    try {
        (*_this)->SetNoLoadHint(noload);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetTargetPathList(sdf_RelationshipSpecHandle_t const* _this, sdf_PathEditorProxy_t** _result) {
    try {
        *_result = new pxr::SdfPathEditorProxy((*_this)->GetTargetPathList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_HasTargetPathList(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasTargetPathList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_ClearTargetPathList(sdf_RelationshipSpecHandle_t const* _this) {
    try {
        (*_this)->ClearTargetPathList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_ReplaceTargetPath(sdf_RelationshipSpecHandle_t* _this, sdf_Path_t const* oldPath, sdf_Path_t const* newPath) {
    try {
        (*_this)->ReplaceTargetPath(*oldPath, *newPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_RemoveTargetPath(sdf_RelationshipSpecHandle_t* _this, sdf_Path_t const* path, bool preserveTargetOrder) {
    try {
        (*_this)->RemoveTargetPath(*path, preserveTargetOrder);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetName(sdf_RelationshipSpecHandle_t const* _this, std_String_t const** _result) {
    try {
        *_result = &(*_this)->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetNameToken(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_CanSetName(sdf_RelationshipSpecHandle_t const* _this, std_String_t const* newName, std_String_t* whyNot, bool* _result) {
    try {
        *_result = (*_this)->CanSetName(*newName, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetName(sdf_RelationshipSpecHandle_t* _this, std_String_t const* newName, bool validate, bool* _result) {
    try {
        *_result = (*_this)->SetName(*newName, validate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetOwner(sdf_RelationshipSpecHandle_t const* _this, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle((*_this)->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetCustomData(sdf_RelationshipSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetAssetInfo(sdf_RelationshipSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetCustomData(sdf_RelationshipSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetCustomData(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetAssetInfo(sdf_RelationshipSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetAssetInfo(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetDisplayGroup(sdf_RelationshipSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetDisplayGroup(sdf_RelationshipSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDisplayGroup(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetDisplayName(sdf_RelationshipSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetDisplayName(sdf_RelationshipSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDisplayName(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetDocumentation(sdf_RelationshipSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetDocumentation(sdf_RelationshipSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetDocumentation(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetHidden(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->GetHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetHidden(sdf_RelationshipSpecHandle_t* _this, bool value) {
    try {
        (*_this)->SetHidden(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetPermission(sdf_RelationshipSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetPermission());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetPermission(sdf_RelationshipSpecHandle_t* _this, unsigned int value) {
    try {
        (*_this)->SetPermission(static_cast<pxr::SdfPermission>(value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetPrefix(sdf_RelationshipSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetPrefix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetPrefix(sdf_RelationshipSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetPrefix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetSuffix(sdf_RelationshipSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSuffix());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetSuffix(sdf_RelationshipSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetSuffix(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetSymmetricPeer(sdf_RelationshipSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetSymmetricPeer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetSymmetricPeer(sdf_RelationshipSpecHandle_t* _this, std_String_t const* peerName) {
    try {
        (*_this)->SetSymmetricPeer(*peerName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetSymmetryArguments(sdf_RelationshipSpecHandle_t const* _this, sdf_DictionaryProxy_t** _result) {
    try {
        *_result = new pxr::SdfDictionaryProxy((*_this)->GetSymmetryArguments());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetSymmetryArgument(sdf_RelationshipSpecHandle_t* _this, std_String_t const* name, vt_Value_t const* value) {
    try {
        (*_this)->SetSymmetryArgument(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetSymmetryFunction(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetSymmetryFunction());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetSymmetryFunction(sdf_RelationshipSpecHandle_t* _this, tf_Token_t const* functionName) {
    try {
        (*_this)->SetSymmetryFunction(*functionName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetTimeSampleMap(sdf_RelationshipSpecHandle_t const* _this, sdf_TimeSampleMap_t** _result) {
    try {
        *_result = new pxr::SdfTimeSampleMap((*_this)->GetTimeSampleMap());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetValueType(sdf_RelationshipSpecHandle_t const* _this, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetValueType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetTypeName(sdf_RelationshipSpecHandle_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName((*_this)->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetDefaultValue(sdf_RelationshipSpecHandle_t const* _this, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetDefaultValue());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetDefaultValue(sdf_RelationshipSpecHandle_t* _this, vt_Value_t const* defaultValue, bool* _result) {
    try {
        *_result = (*_this)->SetDefaultValue(*defaultValue);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_HasDefaultValue(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_ClearDefaultValue(sdf_RelationshipSpecHandle_t* _this) {
    try {
        (*_this)->ClearDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetComment(sdf_RelationshipSpecHandle_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetComment());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetComment(sdf_RelationshipSpecHandle_t* _this, std_String_t const* value) {
    try {
        (*_this)->SetComment(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_IsCustom(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetCustom(sdf_RelationshipSpecHandle_t* _this, bool custom) {
    try {
        (*_this)->SetCustom(custom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetVariability(sdf_RelationshipSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_HasOnlyRequiredFields(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasOnlyRequiredFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetSchema(sdf_RelationshipSpecHandle_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &(*_this)->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetSpecType(sdf_RelationshipSpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_IsDormant(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetLayer(sdf_RelationshipSpecHandle_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle((*_this)->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetPath(sdf_RelationshipSpecHandle_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath((*_this)->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_PermissionToEdit(sdf_RelationshipSpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_ListInfoKeys(sdf_RelationshipSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetMetaDataInfoKeys(sdf_RelationshipSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetMetaDataDisplayGroup(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetInfo(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetInfo(sdf_RelationshipSpecHandle_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        (*_this)->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetInfoDictionaryValue(sdf_RelationshipSpecHandle_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        (*_this)->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_HasInfo(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_ClearInfo(sdf_RelationshipSpecHandle_t* _this, tf_Token_t const* key) {
    try {
        (*_this)->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetTypeForInfo(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetFallbackForInfo(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &(*_this)->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_IsInert(sdf_RelationshipSpecHandle_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = (*_this)->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_ListFields(sdf_RelationshipSpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_HasField_00(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_GetField(sdf_RelationshipSpecHandle_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_SetField_00(sdf_RelationshipSpecHandle_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = (*_this)->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_ClearField(sdf_RelationshipSpecHandle_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_op_eq(sdf_RelationshipSpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_op_lt(sdf_RelationshipSpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_RelationshipSpecHandle_dtor(sdf_RelationshipSpecHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_RelationshipSpecHandleVector_data(sdf_RelationshipSpecHandleVector_t* _this, sdf_RelationshipSpecHandle_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_RelationshipSpecHandleVector_data_const(sdf_RelationshipSpecHandleVector_t const* _this, sdf_RelationshipSpecHandle_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_RelationshipSpecHandleVector_empty(sdf_RelationshipSpecHandleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_RelationshipSpecHandleVector_size(sdf_RelationshipSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_RelationshipSpecHandleVector_max_size(sdf_RelationshipSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_RelationshipSpecHandleVector_capacity(sdf_RelationshipSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_RelationshipSpecHandleVector_clear(sdf_RelationshipSpecHandleVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_RelationshipSpecHandleVector_pop_back(sdf_RelationshipSpecHandleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_RelationshipSpecHandleVector_op_index(sdf_RelationshipSpecHandleVector_t const* _this, size_t __n, sdf_RelationshipSpecHandle_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_RelationshipSpecHandleVector_default(sdf_RelationshipSpecHandleVector_t** _result) {
    *_result = new pxr::SdfRelationshipSpecHandleVector();
    return 0;
}

int sdf_RelationshipSpecHandleVector_dtor(sdf_RelationshipSpecHandleVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_RelationshipSpecView_dtor(sdf_RelationshipSpecView_t* _this) {
    delete _this;
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPair_dtor(sdf_RelationshipSpecHandleOffsetPair_t* _this) {
    delete _this;
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_data(sdf_RelationshipSpecHandleOffsetPairVector_t* _this, sdf_RelationshipSpecHandleOffsetPair_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_data_const(sdf_RelationshipSpecHandleOffsetPairVector_t const* _this, sdf_RelationshipSpecHandleOffsetPair_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_empty(sdf_RelationshipSpecHandleOffsetPairVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_size(sdf_RelationshipSpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_max_size(sdf_RelationshipSpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_capacity(sdf_RelationshipSpecHandleOffsetPairVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_clear(sdf_RelationshipSpecHandleOffsetPairVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_pop_back(sdf_RelationshipSpecHandleOffsetPairVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_op_index(sdf_RelationshipSpecHandleOffsetPairVector_t const* _this, size_t __n, sdf_RelationshipSpecHandleOffsetPair_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_default(sdf_RelationshipSpecHandleOffsetPairVector_t** _result) {
    *_result = new std::vector<std::pair<pxr::SdfRelationshipSpecHandle, pxr::SdfLayerOffset>>();
    return 0;
}

int sdf_RelationshipSpecHandleOffsetPairVector_dtor(sdf_RelationshipSpecHandleOffsetPairVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfSchemaBase_GetFieldDefinition(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* fieldKey, sdf_FieldDefinition_t const** _result) {
    try {
        *_result = _this->GetFieldDefinition(*fieldKey);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_GetSpecDefinition(sdf_SdfSchemaBase_t const* _this, unsigned int specType, sdf_SpecDefinition_t const** _result) {
    try {
        *_result = _this->GetSpecDefinition(static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsRegistered(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* fieldKey, vt_Value_t* fallback, bool* _result) {
    try {
        *_result = _this->IsRegistered(*fieldKey, fallback);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_HoldsChildren(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* fieldKey, bool* _result) {
    try {
        *_result = _this->HoldsChildren(*fieldKey);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_GetFallback(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* fieldKey, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallback(*fieldKey);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_CastToTypeOf(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* fieldKey, vt_Value_t const* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->CastToTypeOf(*fieldKey, *value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidFieldForSpec(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* fieldKey, unsigned int specType, bool* _result) {
    try {
        *_result = _this->IsValidFieldForSpec(*fieldKey, static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_GetFields(sdf_SdfSchemaBase_t const* _this, unsigned int specType, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetFields(static_cast<pxr::SdfSpecType>(specType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_GetMetadataFields(sdf_SdfSchemaBase_t const* _this, unsigned int specType, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetadataFields(static_cast<pxr::SdfSpecType>(specType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_GetMetadataFieldDisplayGroup(sdf_SdfSchemaBase_t const* _this, unsigned int specType, tf_Token_t const* metadataField, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetadataFieldDisplayGroup(static_cast<pxr::SdfSpecType>(specType), *metadataField));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_GetRequiredFields(sdf_SdfSchemaBase_t const* _this, unsigned int specType, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetRequiredFields(static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsRequiredFieldName(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* fieldName, bool* _result) {
    try {
        *_result = _this->IsRequiredFieldName(*fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidAttributeConnectionPath(sdf_Path_t const* path, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidAttributeConnectionPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidIdentifier(std_String_t const* name, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidIdentifier(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidNamespacedIdentifier(std_String_t const* name, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidNamespacedIdentifier(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidInheritPath(sdf_Path_t const* path, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidInheritPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidPayload(sdf_Payload_t const* payload, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidPayload(*payload));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidReference(sdf_Reference_t const* ref, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidReference(*ref));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidRelationshipTargetPath(sdf_Path_t const* path, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidRelationshipTargetPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidRelocatesPath(sdf_Path_t const* path, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidRelocatesPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidSpecializesPath(sdf_Path_t const* path, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidSpecializesPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidSubLayer(std_String_t const* sublayer, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidSubLayer(*sublayer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidVariantIdentifier(std_String_t const* name, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidVariantIdentifier(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidVariantSelection(std_String_t const* sel, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(pxr::SdfSchemaBase::IsValidVariantSelection(*sel));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_IsValidValue(sdf_SdfSchemaBase_t const* _this, vt_Value_t const* value, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(_this->IsValidValue(*value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_GetAllTypes(sdf_SdfSchemaBase_t const* _this, sdf_ValueTypeNameVector_t** _result) {
    try {
        *_result = new std::vector<pxr::SdfValueTypeName>(_this->GetAllTypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_FindType_00(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_FindType_01(sdf_SdfSchemaBase_t const* _this, char const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_FindType_02(sdf_SdfSchemaBase_t const* _this, std_String_t const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_FindType_03(sdf_SdfSchemaBase_t const* _this, tf_Type_t const* type, tf_Token_t const* role, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*type, *role));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_FindType_04(sdf_SdfSchemaBase_t const* _this, vt_Value_t const* value, tf_Token_t const* role, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*value, *role));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchemaBase_FindOrCreateType(sdf_SdfSchemaBase_t const* _this, tf_Token_t const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindOrCreateType(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_FieldDefinition_dtor(sdf_FieldDefinition_t* _this) {
    delete _this;
    return 0;
}

int sdf_SpecDefinition_GetFields(sdf_SpecDefinition_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecDefinition_GetRequiredFields(sdf_SpecDefinition_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetRequiredFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecDefinition_GetMetadataFields(sdf_SpecDefinition_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetadataFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecDefinition_IsValidField(sdf_SpecDefinition_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->IsValidField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecDefinition_IsMetadataField(sdf_SpecDefinition_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->IsMetadataField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecDefinition_GetMetadataFieldDisplayGroup(sdf_SpecDefinition_t const* _this, tf_Token_t const* name, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetadataFieldDisplayGroup(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecDefinition_IsRequiredField(sdf_SpecDefinition_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->IsRequiredField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecDefinition_dtor(sdf_SpecDefinition_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfSchema_GetInstance(sdf_SdfSchema_t const** _result) {
    try {
        *_result = &pxr::SdfSchema::GetInstance();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetFieldDefinition(sdf_SdfSchema_t const* _this, tf_Token_t const* fieldKey, sdf_FieldDefinition_t const** _result) {
    try {
        *_result = _this->GetFieldDefinition(*fieldKey);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetSpecDefinition(sdf_SdfSchema_t const* _this, unsigned int specType, sdf_SpecDefinition_t const** _result) {
    try {
        *_result = _this->GetSpecDefinition(static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_IsRegistered(sdf_SdfSchema_t const* _this, tf_Token_t const* fieldKey, vt_Value_t* fallback, bool* _result) {
    try {
        *_result = _this->IsRegistered(*fieldKey, fallback);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_HoldsChildren(sdf_SdfSchema_t const* _this, tf_Token_t const* fieldKey, bool* _result) {
    try {
        *_result = _this->HoldsChildren(*fieldKey);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetFallback(sdf_SdfSchema_t const* _this, tf_Token_t const* fieldKey, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallback(*fieldKey);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_CastToTypeOf(sdf_SdfSchema_t const* _this, tf_Token_t const* fieldKey, vt_Value_t const* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->CastToTypeOf(*fieldKey, *value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_IsValidFieldForSpec(sdf_SdfSchema_t const* _this, tf_Token_t const* fieldKey, unsigned int specType, bool* _result) {
    try {
        *_result = _this->IsValidFieldForSpec(*fieldKey, static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetFields(sdf_SdfSchema_t const* _this, unsigned int specType, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetFields(static_cast<pxr::SdfSpecType>(specType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetMetadataFields(sdf_SdfSchema_t const* _this, unsigned int specType, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetadataFields(static_cast<pxr::SdfSpecType>(specType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetMetadataFieldDisplayGroup(sdf_SdfSchema_t const* _this, unsigned int specType, tf_Token_t const* metadataField, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetadataFieldDisplayGroup(static_cast<pxr::SdfSpecType>(specType), *metadataField));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetRequiredFields(sdf_SdfSchema_t const* _this, unsigned int specType, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetRequiredFields(static_cast<pxr::SdfSpecType>(specType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_IsRequiredFieldName(sdf_SdfSchema_t const* _this, tf_Token_t const* fieldName, bool* _result) {
    try {
        *_result = _this->IsRequiredFieldName(*fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_IsValidValue(sdf_SdfSchema_t const* _this, vt_Value_t const* value, sdf_Allowed_t** _result) {
    try {
        *_result = new pxr::SdfAllowed(_this->IsValidValue(*value));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_GetAllTypes(sdf_SdfSchema_t const* _this, sdf_ValueTypeNameVector_t** _result) {
    try {
        *_result = new std::vector<pxr::SdfValueTypeName>(_this->GetAllTypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_FindType_00(sdf_SdfSchema_t const* _this, tf_Token_t const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_FindType_01(sdf_SdfSchema_t const* _this, char const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_FindType_02(sdf_SdfSchema_t const* _this, std_String_t const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_FindType_03(sdf_SdfSchema_t const* _this, tf_Type_t const* type, tf_Token_t const* role, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*type, *role));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_FindType_04(sdf_SdfSchema_t const* _this, vt_Value_t const* value, tf_Token_t const* role, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindType(*value, *role));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSchema_FindOrCreateType(sdf_SdfSchema_t const* _this, tf_Token_t const* typeName, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->FindOrCreateType(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SchemaBaseFieldDefinitionInfoVec_data(sdf_SchemaBaseFieldDefinitionInfoVec_t* _this, js_TokenValuePair_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_data_const(sdf_SchemaBaseFieldDefinitionInfoVec_t const* _this, js_TokenValuePair_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_empty(sdf_SchemaBaseFieldDefinitionInfoVec_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_size(sdf_SchemaBaseFieldDefinitionInfoVec_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_max_size(sdf_SchemaBaseFieldDefinitionInfoVec_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_capacity(sdf_SchemaBaseFieldDefinitionInfoVec_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_clear(sdf_SchemaBaseFieldDefinitionInfoVec_t* _this) {
    _this->clear();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_pop_back(sdf_SchemaBaseFieldDefinitionInfoVec_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_op_index(sdf_SchemaBaseFieldDefinitionInfoVec_t const* _this, size_t __n, js_TokenValuePair_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_default(sdf_SchemaBaseFieldDefinitionInfoVec_t** _result) {
    *_result = new pxr::SdfSchemaBase::FieldDefinition::InfoVec();
    return 0;
}

int sdf_SchemaBaseFieldDefinitionInfoVec_dtor(sdf_SchemaBaseFieldDefinitionInfoVec_t* _this) {
    delete _this;
    return 0;
}

int sdf_SdfSpec_GetSchema(sdf_SdfSpec_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetSpecType(sdf_SdfSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_IsDormant(sdf_SdfSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetLayer(sdf_SdfSpec_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetPath(sdf_SdfSpec_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_PermissionToEdit(sdf_SdfSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_ListInfoKeys(sdf_SdfSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetMetaDataInfoKeys(sdf_SdfSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetMetaDataDisplayGroup(sdf_SdfSpec_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetInfo(sdf_SdfSpec_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_SetInfo(sdf_SdfSpec_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        _this->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_SetInfoDictionaryValue(sdf_SdfSpec_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        _this->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_HasInfo(sdf_SdfSpec_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_ClearInfo(sdf_SdfSpec_t* _this, tf_Token_t const* key) {
    try {
        _this->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetTypeForInfo(sdf_SdfSpec_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetFallbackForInfo(sdf_SdfSpec_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_IsInert(sdf_SdfSpec_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = _this->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_ListFields(sdf_SdfSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_HasField_00(sdf_SdfSpec_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_GetField(sdf_SdfSpec_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_SetField_00(sdf_SdfSpec_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_ClearField(sdf_SdfSpec_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_op_eq(sdf_SdfSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_op_lt(sdf_SdfSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_default(sdf_SdfSpec_t** _result) {
    try {
        *_result = new pxr::SdfSpec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SdfSpec_dtor(sdf_SdfSpec_t* _this) {
    delete _this;
    return 0;
}

int sdf_SpecHandle_GetSchema(sdf_SpecHandle_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &(*_this)->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetSpecType(sdf_SpecHandle_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_IsDormant(sdf_SpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetLayer(sdf_SpecHandle_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle((*_this)->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetPath(sdf_SpecHandle_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath((*_this)->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_PermissionToEdit(sdf_SpecHandle_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_ListInfoKeys(sdf_SpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetMetaDataInfoKeys(sdf_SpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetMetaDataDisplayGroup(sdf_SpecHandle_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetInfo(sdf_SpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_SetInfo(sdf_SpecHandle_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        (*_this)->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_SetInfoDictionaryValue(sdf_SpecHandle_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        (*_this)->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_HasInfo(sdf_SpecHandle_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_ClearInfo(sdf_SpecHandle_t* _this, tf_Token_t const* key) {
    try {
        (*_this)->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetTypeForInfo(sdf_SpecHandle_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType((*_this)->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetFallbackForInfo(sdf_SpecHandle_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &(*_this)->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_IsInert(sdf_SpecHandle_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = (*_this)->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_ListFields(sdf_SpecHandle_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_HasField_00(sdf_SpecHandle_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_GetField(sdf_SpecHandle_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue((*_this)->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_SetField_00(sdf_SpecHandle_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = (*_this)->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_ClearField(sdf_SpecHandle_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = (*_this)->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_op_eq(sdf_SpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_op_lt(sdf_SpecHandle_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = (*_this)->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_SpecHandle_dtor(sdf_SpecHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_TimeCode_from_time(double param00, sdf_TimeCode_t* _result) {
    new (_result) pxr::SdfTimeCode(param00);
    return 0;
}

int sdf_RelocatesMap_dtor(sdf_RelocatesMap_t* _this) {
    delete _this;
    return 0;
}

int sdf_TimeSampleMap_dtor(sdf_TimeSampleMap_t* _this) {
    delete _this;
    return 0;
}

int sdf_ValueBlock_dtor(sdf_ValueBlock_t* _this) {
    delete _this;
    return 0;
}

int sdf_ValueTypeName_GetAsToken(sdf_ValueTypeName_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetAsToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetType(sdf_ValueTypeName_t const* _this, tf_Type_t const** _result) {
    try {
        *_result = &_this->GetType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetRole(sdf_ValueTypeName_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetRole();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetDefaultValue(sdf_ValueTypeName_t const* _this, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetDefaultUnit(sdf_ValueTypeName_t const* _this, tf_Enum_t const** _result) {
    try {
        *_result = &_this->GetDefaultUnit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetScalarType(sdf_ValueTypeName_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetScalarType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetArrayType(sdf_ValueTypeName_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetArrayType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_IsScalar(sdf_ValueTypeName_t const* _this, bool* _result) {
    try {
        *_result = _this->IsScalar();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_IsArray(sdf_ValueTypeName_t const* _this, bool* _result) {
    try {
        *_result = _this->IsArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetDimensions(sdf_ValueTypeName_t const* _this, sdf_TupleDimensions_t* _result) {
    try {
        *_result = _this->GetDimensions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetAliasesAsTokens(sdf_ValueTypeName_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetAliasesAsTokens());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_new(sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_dtor(sdf_ValueTypeName_t* _this) {
    delete _this;
    return 0;
}

int sdf_ValueTypeNameVector_data(sdf_ValueTypeNameVector_t* _this, sdf_ValueTypeName_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_ValueTypeNameVector_data_const(sdf_ValueTypeNameVector_t const* _this, sdf_ValueTypeName_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_ValueTypeNameVector_empty(sdf_ValueTypeNameVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_ValueTypeNameVector_size(sdf_ValueTypeNameVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_ValueTypeNameVector_max_size(sdf_ValueTypeNameVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_ValueTypeNameVector_capacity(sdf_ValueTypeNameVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_ValueTypeNameVector_clear(sdf_ValueTypeNameVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_ValueTypeNameVector_pop_back(sdf_ValueTypeNameVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_ValueTypeNameVector_op_index(sdf_ValueTypeNameVector_t const* _this, size_t __n, sdf_ValueTypeName_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_ValueTypeNameVector_default(sdf_ValueTypeNameVector_t** _result) {
    *_result = new std::vector<pxr::SdfValueTypeName>();
    return 0;
}

int sdf_ValueTypeNameVector_dtor(sdf_ValueTypeNameVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariableExpression_IsExpression(std_String_t const* s, bool* _result) {
    try {
        *_result = pxr::SdfVariableExpression::IsExpression(*s);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariableExpression_IsValidVariableType(vt_Value_t const* value, bool* _result) {
    try {
        *_result = pxr::SdfVariableExpression::IsValidVariableType(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariableExpression_op_bool(sdf_VariableExpression_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariableExpression_GetString(sdf_VariableExpression_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetString();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariableExpression_GetErrors(sdf_VariableExpression_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetErrors();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariableExpression_Evaluate(sdf_VariableExpression_t const* _this, vt_Dictionary_t const* variables, sdf_VariableExpressionResult_t** _result) {
    try {
        *_result = new pxr::SdfVariableExpression::Result(_this->Evaluate(*variables));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariableExpression_default(sdf_VariableExpression_t** _result) {
    try {
        *_result = new pxr::SdfVariableExpression();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariableExpression_dtor(sdf_VariableExpression_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariableExpressionResult_dtor(sdf_VariableExpressionResult_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantSetSpec_New_00(sdf_PrimSpecHandle_t const* prim, std_String_t const* name, sdf_VariantSetSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfVariantSetSpecHandle(pxr::SdfVariantSetSpec::New(*prim, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_New_01(sdf_VariantSpecHandle_t const* prim, std_String_t const* name, sdf_VariantSetSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfVariantSetSpecHandle(pxr::SdfVariantSetSpec::New(*prim, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetName(sdf_VariantSetSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetNameToken(sdf_VariantSetSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetOwner(sdf_VariantSetSpec_t const* _this, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle(_this->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetVariants(sdf_VariantSetSpec_t const* _this, sdf_VariantView_t** _result) {
    try {
        *_result = new pxr::SdfVariantView(_this->GetVariants());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetVariantList(sdf_VariantSetSpec_t const* _this, sdf_VariantSpecHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfVariantSpecHandleVector(_this->GetVariantList());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_RemoveVariant(sdf_VariantSetSpec_t* _this, sdf_VariantSpecHandle_t const* variant) {
    try {
        _this->RemoveVariant(*variant);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetSchema(sdf_VariantSetSpec_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetSpecType(sdf_VariantSetSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_IsDormant(sdf_VariantSetSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetLayer(sdf_VariantSetSpec_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetPath(sdf_VariantSetSpec_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_PermissionToEdit(sdf_VariantSetSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_ListInfoKeys(sdf_VariantSetSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetMetaDataInfoKeys(sdf_VariantSetSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetMetaDataDisplayGroup(sdf_VariantSetSpec_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetInfo(sdf_VariantSetSpec_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_SetInfo(sdf_VariantSetSpec_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        _this->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_SetInfoDictionaryValue(sdf_VariantSetSpec_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        _this->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_HasInfo(sdf_VariantSetSpec_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_ClearInfo(sdf_VariantSetSpec_t* _this, tf_Token_t const* key) {
    try {
        _this->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetTypeForInfo(sdf_VariantSetSpec_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetFallbackForInfo(sdf_VariantSetSpec_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_IsInert(sdf_VariantSetSpec_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = _this->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_ListFields(sdf_VariantSetSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_HasField_00(sdf_VariantSetSpec_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_GetField(sdf_VariantSetSpec_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_SetField_00(sdf_VariantSetSpec_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_ClearField(sdf_VariantSetSpec_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_op_eq(sdf_VariantSetSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_op_lt(sdf_VariantSetSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_default(sdf_VariantSetSpec_t** _result) {
    try {
        *_result = new pxr::SdfVariantSetSpec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSetSpec_dtor(sdf_VariantSetSpec_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantSetSpecHandle_dtor(sdf_VariantSetSpecHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantSpec_New(sdf_VariantSetSpecHandle_t const* owner, std_String_t const* name, sdf_VariantSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfVariantSpecHandle(pxr::SdfVariantSpec::New(*owner, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetName(sdf_VariantSpec_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetNameToken(sdf_VariantSpec_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetOwner(sdf_VariantSpec_t const* _this, sdf_VariantSetSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfVariantSetSpecHandle(_this->GetOwner());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetPrimSpec(sdf_VariantSpec_t const* _this, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetPrimSpec());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetVariantSets(sdf_VariantSpec_t const* _this, sdf_VariantSetsProxy_t** _result) {
    try {
        *_result = new pxr::SdfVariantSetsProxy(_this->GetVariantSets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetVariantNames(sdf_VariantSpec_t const* _this, std_String_t const* name, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetVariantNames(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetSchema(sdf_VariantSpec_t const* _this, sdf_SdfSchemaBase_t const** _result) {
    try {
        *_result = &_this->GetSchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetSpecType(sdf_VariantSpec_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_IsDormant(sdf_VariantSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDormant();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetLayer(sdf_VariantSpec_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetPath(sdf_VariantSpec_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_PermissionToEdit(sdf_VariantSpec_t const* _this, bool* _result) {
    try {
        *_result = _this->PermissionToEdit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_ListInfoKeys(sdf_VariantSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetMetaDataInfoKeys(sdf_VariantSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetMetaDataInfoKeys());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetMetaDataDisplayGroup(sdf_VariantSpec_t const* _this, tf_Token_t const* key, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMetaDataDisplayGroup(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetInfo(sdf_VariantSpec_t const* _this, tf_Token_t const* key, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_SetInfo(sdf_VariantSpec_t* _this, tf_Token_t const* key, vt_Value_t const* value) {
    try {
        _this->SetInfo(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_SetInfoDictionaryValue(sdf_VariantSpec_t* _this, tf_Token_t const* dictionaryKey, tf_Token_t const* entryKey, vt_Value_t const* value) {
    try {
        _this->SetInfoDictionaryValue(*dictionaryKey, *entryKey, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_HasInfo(sdf_VariantSpec_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_ClearInfo(sdf_VariantSpec_t* _this, tf_Token_t const* key) {
    try {
        _this->ClearInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetTypeForInfo(sdf_VariantSpec_t const* _this, tf_Token_t const* key, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetTypeForInfo(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetFallbackForInfo(sdf_VariantSpec_t const* _this, tf_Token_t const* key, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetFallbackForInfo(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_IsInert(sdf_VariantSpec_t const* _this, bool ignoreChildren, bool* _result) {
    try {
        *_result = _this->IsInert(ignoreChildren);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_ListFields(sdf_VariantSpec_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_HasField_00(sdf_VariantSpec_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_GetField(sdf_VariantSpec_t const* _this, tf_Token_t const* name, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetField(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_SetField_00(sdf_VariantSpec_t* _this, tf_Token_t const* name, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetField(*name, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_ClearField(sdf_VariantSpec_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->ClearField(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_op_eq(sdf_VariantSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_op_lt(sdf_VariantSpec_t const* _this, sdf_SdfSpec_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator<(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_default(sdf_VariantSpec_t** _result) {
    try {
        *_result = new pxr::SdfVariantSpec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_VariantSpec_dtor(sdf_VariantSpec_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantSpecHandle_dtor(sdf_VariantSpecHandle_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantSpecHandleVector_data(sdf_VariantSpecHandleVector_t* _this, sdf_VariantSpecHandle_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_VariantSpecHandleVector_data_const(sdf_VariantSpecHandleVector_t const* _this, sdf_VariantSpecHandle_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdf_VariantSpecHandleVector_empty(sdf_VariantSpecHandleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdf_VariantSpecHandleVector_size(sdf_VariantSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdf_VariantSpecHandleVector_max_size(sdf_VariantSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdf_VariantSpecHandleVector_capacity(sdf_VariantSpecHandleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdf_VariantSpecHandleVector_clear(sdf_VariantSpecHandleVector_t* _this) {
    _this->clear();
    return 0;
}

int sdf_VariantSpecHandleVector_pop_back(sdf_VariantSpecHandleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdf_VariantSpecHandleVector_op_index(sdf_VariantSpecHandleVector_t const* _this, size_t __n, sdf_VariantSpecHandle_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdf_VariantSpecHandleVector_default(sdf_VariantSpecHandleVector_t** _result) {
    *_result = new pxr::SdfVariantSpecHandleVector();
    return 0;
}

int sdf_VariantSpecHandleVector_dtor(sdf_VariantSpecHandleVector_t* _this) {
    delete _this;
    return 0;
}

int sdf_VariantView_dtor(sdf_VariantView_t* _this) {
    delete _this;
    return 0;
}

int sdf_AssetPath_from_path(char const* path, sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath(bblext::AssetPath_from_path(path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AssetPath_from_path_and_resolved_path(char const* path, char const* resolved_path, sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath(bblext::AssetPath_from_path_and_resolved_path(path, resolved_path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AssetPath_GetAssetPath(sdf_AssetPath_t const* path, char const** _result) {
    try {
        *_result = bblext::AssetPath_GetAssetPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_AssetPath_GetResolvedPath(sdf_AssetPath_t const* path, char const** _result) {
    try {
        *_result = bblext::AssetPath_GetResolvedPath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerHandle_ExportToString(sdf_LayerHandle_t const* layer, std_String_t** output, bool* _result) {
    try {
        *_result = bblext::LayerHandle_ExportToString(*layer, output);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_LayerRefPtr_ExportToString(sdf_LayerRefPtr_t const* layer, std_String_t** output, bool* _result) {
    try {
        *_result = bblext::LayerRefPtr_ExportToString(*layer, output);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_get_current_path(sdf_NamespaceEdit_t const* edit, sdf_Path_t const** _result) {
    try {
        *_result = &bblext::NamespaceEdit_get_current_path(*edit);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_get_new_path(sdf_NamespaceEdit_t const* edit, sdf_Path_t const** _result) {
    try {
        *_result = &bblext::NamespaceEdit_get_new_path(*edit);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEdit_get_index(sdf_NamespaceEdit_t const* edit, int const** _result) {
    try {
        *_result = &bblext::NamespaceEdit_get_index(*edit);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEditDetail_get_edit(sdf_NamespaceEditDetail_t const* detail, sdf_NamespaceEdit_t const** _result) {
    try {
        *_result = &bblext::NamespaceEditDetail_get_edit(*detail);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEditDetail_get_result(sdf_NamespaceEditDetail_t const* detail, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(bblext::NamespaceEditDetail_get_result(*detail));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_NamespaceEditDetail_get_reason(sdf_NamespaceEditDetail_t const* detail, char const** _result) {
    try {
        *_result = bblext::NamespaceEditDetail_get_reason(*detail);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_from_asset_path(char const* assetPath, sdf_Payload_t** _result) {
    try {
        *_result = bblext::Payload_from_asset_path(assetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_from_asset_path_and_prim_path(char const* assetPath, sdf_Path_t const* primPath, sdf_Payload_t** _result) {
    try {
        *_result = bblext::Payload_from_asset_path_and_prim_path(assetPath, *primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Payload_from_asset_path_and_prim_path_and_layer_offset(char const* assetPath, sdf_Path_t const* primPath, sdf_LayerOffset_t const* layerOffset, sdf_Payload_t** _result) {
    try {
        *_result = bblext::Payload_from_asset_path_and_prim_path_and_layer_offset(assetPath, *primPath, *layerOffset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_from_asset_path(char const* assetPath, sdf_Reference_t** _result) {
    try {
        *_result = bblext::Reference_from_asset_path(assetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_from_asset_path_and_prim_path(char const* assetPath, sdf_Path_t const* primPath, sdf_Reference_t** _result) {
    try {
        *_result = bblext::Reference_from_asset_path_and_prim_path(assetPath, *primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_from_asset_path_and_prim_path_and_layer_offset(char const* assetPath, sdf_Path_t const* primPath, sdf_LayerOffset_t const* layerOffset, sdf_Reference_t** _result) {
    try {
        *_result = bblext::Reference_from_asset_path_and_prim_path_and_layer_offset(assetPath, *primPath, *layerOffset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_Reference_from_asset_path_and_prim_path_and_layer_offset_and_custom_data(char const* assetPath, sdf_Path_t const* primPath, sdf_LayerOffset_t const* layerOffset, vt_Dictionary_t const* customData, sdf_Reference_t** _result) {
    try {
        *_result = bblext::Reference_from_asset_path_and_prim_path_and_layer_offset_and_custom_data(assetPath, *primPath, *layerOffset, *customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdf_ValueTypeName_GetCPPTypeName(sdf_ValueTypeName_t const* vtn, char const** _result) {
    try {
        *_result = bblext::ValueTypeName_GetCPPTypeName(*vtn);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetInstance(sdr_Registry_t** _result) {
    try {
        *_result = &pxr::SdrRegistry::GetInstance();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodeByIdentifier(sdr_Registry_t* _this, tf_Token_t const* identifier, tf_TokenVector_t const* typePriority, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeByIdentifier(*identifier, *typePriority);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodeByIdentifierAndType(sdr_Registry_t* _this, tf_Token_t const* identifier, tf_Token_t const* nodeType, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeByIdentifierAndType(*identifier, *nodeType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodeByName(sdr_Registry_t* _this, std_String_t const* name, tf_TokenVector_t const* typePriority, unsigned int filter, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeByName(*name, *typePriority, static_cast<pxr::NdrVersionFilter>(filter));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodeByNameAndType(sdr_Registry_t* _this, std_String_t const* name, tf_Token_t const* nodeType, unsigned int filter, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeByNameAndType(*name, *nodeType, static_cast<pxr::NdrVersionFilter>(filter));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodeFromAsset(sdr_Registry_t* _this, sdf_AssetPath_t const* shaderAsset, ndr_TokenMap_t const* metadata, tf_Token_t const* subIdentifier, tf_Token_t const* sourceType, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeFromAsset(*shaderAsset, *metadata, *subIdentifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodeFromSourceCode(sdr_Registry_t* _this, std_String_t const* sourceCode, tf_Token_t const* sourceType, ndr_TokenMap_t const* metadata, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeFromSourceCode(*sourceCode, *sourceType, *metadata);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodesByIdentifier(sdr_Registry_t* _this, tf_Token_t const* identifier, sdr_ShaderNodePtrVector_t** _result) {
    try {
        *_result = new pxr::SdrShaderNodePtrVec(_this->GetShaderNodesByIdentifier(*identifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodesByName(sdr_Registry_t* _this, std_String_t const* name, unsigned int filter, sdr_ShaderNodePtrVector_t** _result) {
    try {
        *_result = new pxr::SdrShaderNodePtrVec(_this->GetShaderNodesByName(*name, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetShaderNodesByFamily(sdr_Registry_t* _this, tf_Token_t const* family, unsigned int filter, sdr_ShaderNodePtrVector_t** _result) {
    try {
        *_result = new pxr::SdrShaderNodePtrVec(_this->GetShaderNodesByFamily(*family, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_SetExtraDiscoveryPlugins_00(sdr_Registry_t* _this, ndr_NdrRegistryDiscoveryPluginRefPtrVec_t* plugins) {
    try {
        _this->SetExtraDiscoveryPlugins(*plugins);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_SetExtraDiscoveryPlugins_01(sdr_Registry_t* _this, tf_TypeVector_t const* pluginTypes) {
    try {
        _this->SetExtraDiscoveryPlugins(*pluginTypes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_AddDiscoveryResult_00(sdr_Registry_t* _this, ndr_NodeDiscoveryResult_t* discoveryResult) {
    try {
        _this->AddDiscoveryResult(*discoveryResult);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_AddDiscoveryResult_01(sdr_Registry_t* _this, ndr_NodeDiscoveryResult_t const* discoveryResult) {
    try {
        _this->AddDiscoveryResult(*discoveryResult);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_SetExtraParserPlugins(sdr_Registry_t* _this, tf_TypeVector_t const* pluginTypes) {
    try {
        _this->SetExtraParserPlugins(*pluginTypes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeFromAsset(sdr_Registry_t* _this, sdf_AssetPath_t const* asset, ndr_TokenMap_t const* metadata, tf_Token_t const* subIdentifier, tf_Token_t const* sourceType, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeFromAsset(*asset, *metadata, *subIdentifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeFromSourceCode(sdr_Registry_t* _this, std_String_t const* sourceCode, tf_Token_t const* sourceType, ndr_TokenMap_t const* metadata, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeFromSourceCode(*sourceCode, *sourceType, *metadata);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetSearchURIs(sdr_Registry_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetSearchURIs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeIdentifiers(sdr_Registry_t const* _this, tf_Token_t const* family, unsigned int filter, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetNodeIdentifiers(*family, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeNames(sdr_Registry_t const* _this, tf_Token_t const* family, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetNodeNames(*family));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeByIdentifier(sdr_Registry_t* _this, tf_Token_t const* identifier, tf_TokenVector_t const* sourceTypePriority, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByIdentifier(*identifier, *sourceTypePriority);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeByIdentifierAndType(sdr_Registry_t* _this, tf_Token_t const* identifier, tf_Token_t const* sourceType, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByIdentifierAndType(*identifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeByName(sdr_Registry_t* _this, std_String_t const* name, tf_TokenVector_t const* sourceTypePriority, unsigned int filter, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByName(*name, *sourceTypePriority, static_cast<pxr::NdrVersionFilter>(filter));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodeByNameAndType(sdr_Registry_t* _this, std_String_t const* name, tf_Token_t const* sourceType, unsigned int filter, ndr_Node_t const** _result) {
    try {
        *_result = _this->GetNodeByNameAndType(*name, *sourceType, static_cast<pxr::NdrVersionFilter>(filter));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodesByIdentifier(sdr_Registry_t* _this, tf_Token_t const* identifier, ndr_NodeConstPtrVec_t** _result) {
    try {
        *_result = new pxr::NdrNodeConstPtrVec(_this->GetNodesByIdentifier(*identifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodesByName(sdr_Registry_t* _this, std_String_t const* name, unsigned int filter, ndr_NodeConstPtrVec_t** _result) {
    try {
        *_result = new pxr::NdrNodeConstPtrVec(_this->GetNodesByName(*name, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetNodesByFamily(sdr_Registry_t* _this, tf_Token_t const* family, unsigned int filter, ndr_NodeConstPtrVec_t** _result) {
    try {
        *_result = new pxr::NdrNodeConstPtrVec(_this->GetNodesByFamily(*family, static_cast<pxr::NdrVersionFilter>(filter)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_Registry_GetAllNodeSourceTypes(sdr_Registry_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetAllNodeSourceTypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetShaderInput(sdr_ShaderNode_t const* _this, tf_Token_t const* inputName, sdr_ShaderProperty_t const** _result) {
    try {
        *_result = _this->GetShaderInput(*inputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetShaderOutput(sdr_ShaderNode_t const* _this, tf_Token_t const* outputName, sdr_ShaderProperty_t const** _result) {
    try {
        *_result = _this->GetShaderOutput(*outputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetAssetIdentifierInputNames(sdr_ShaderNode_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetAssetIdentifierInputNames());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetDefaultInput(sdr_ShaderNode_t const* _this, sdr_ShaderProperty_t const** _result) {
    try {
        *_result = _this->GetDefaultInput();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetLabel(sdr_ShaderNode_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetLabel();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetCategory(sdr_ShaderNode_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetCategory();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetRole(sdr_ShaderNode_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetRole());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetHelp(sdr_ShaderNode_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetHelp());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetDepartments(sdr_ShaderNode_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetDepartments();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetPages(sdr_ShaderNode_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetPages();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetPrimvars(sdr_ShaderNode_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetPrimvars();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetAdditionalPrimvarProperties(sdr_ShaderNode_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetAdditionalPrimvarProperties();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetImplementationName(sdr_ShaderNode_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetImplementationName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetPropertyNamesForPage(sdr_ShaderNode_t const* _this, std_String_t const* pageName, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetPropertyNamesForPage(*pageName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetAllVstructNames(sdr_ShaderNode_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetAllVstructNames());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetIdentifier(sdr_ShaderNode_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetVersion(sdr_ShaderNode_t const* _this, ndr_NdrVersion_t** _result) {
    try {
        *_result = new pxr::NdrVersion(_this->GetVersion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetName(sdr_ShaderNode_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetFamily(sdr_ShaderNode_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetFamily();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetContext(sdr_ShaderNode_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetContext();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetSourceType(sdr_ShaderNode_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetSourceType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetResolvedDefinitionURI(sdr_ShaderNode_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetResolvedDefinitionURI();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetResolvedImplementationURI(sdr_ShaderNode_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetResolvedImplementationURI();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetSourceCode(sdr_ShaderNode_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetSourceCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_IsValid(sdr_ShaderNode_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetInfoString(sdr_ShaderNode_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetInfoString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetInputNames(sdr_ShaderNode_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetInputNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetOutputNames(sdr_ShaderNode_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetOutputNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetInput(sdr_ShaderNode_t const* _this, tf_Token_t const* inputName, ndr_Property_t const** _result) {
    try {
        *_result = _this->GetInput(*inputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetOutput(sdr_ShaderNode_t const* _this, tf_Token_t const* outputName, ndr_Property_t const** _result) {
    try {
        *_result = _this->GetOutput(*outputName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_GetMetadata(sdr_ShaderNode_t const* _this, ndr_TokenMap_t const** _result) {
    try {
        *_result = &_this->GetMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderNode_dtor(sdr_ShaderNode_t* _this) {
    delete _this;
    return 0;
}

int sdr_ShaderNodeVector_data(sdr_ShaderNodeVector_t* _this, sdr_ShaderNode_t** _result) {
    *_result = _this->data();
    return 0;
}

int sdr_ShaderNodeVector_data_const(sdr_ShaderNodeVector_t const* _this, sdr_ShaderNode_t const** _result) {
    *_result = _this->data();
    return 0;
}

int sdr_ShaderNodeVector_empty(sdr_ShaderNodeVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdr_ShaderNodeVector_size(sdr_ShaderNodeVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdr_ShaderNodeVector_max_size(sdr_ShaderNodeVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdr_ShaderNodeVector_capacity(sdr_ShaderNodeVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdr_ShaderNodeVector_clear(sdr_ShaderNodeVector_t* _this) {
    _this->clear();
    return 0;
}

int sdr_ShaderNodeVector_pop_back(sdr_ShaderNodeVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdr_ShaderNodeVector_op_index(sdr_ShaderNodeVector_t const* _this, size_t __n, sdr_ShaderNode_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdr_ShaderNodeVector_default(sdr_ShaderNodeVector_t** _result) {
    *_result = new std::vector<pxr::SdrShaderNode>();
    return 0;
}

int sdr_ShaderNodeVector_dtor(sdr_ShaderNodeVector_t* _this) {
    delete _this;
    return 0;
}

int sdr_ShaderNodePtrVector_data(sdr_ShaderNodePtrVector_t* _this, sdr_ShaderNode_t const*** _result) {
    *_result = _this->data();
    return 0;
}

int sdr_ShaderNodePtrVector_data_const(sdr_ShaderNodePtrVector_t const* _this, sdr_ShaderNode_t const* const** _result) {
    *_result = _this->data();
    return 0;
}

int sdr_ShaderNodePtrVector_empty(sdr_ShaderNodePtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int sdr_ShaderNodePtrVector_size(sdr_ShaderNodePtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int sdr_ShaderNodePtrVector_max_size(sdr_ShaderNodePtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int sdr_ShaderNodePtrVector_capacity(sdr_ShaderNodePtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int sdr_ShaderNodePtrVector_clear(sdr_ShaderNodePtrVector_t* _this) {
    _this->clear();
    return 0;
}

int sdr_ShaderNodePtrVector_pop_back(sdr_ShaderNodePtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int sdr_ShaderNodePtrVector_op_index(sdr_ShaderNodePtrVector_t const* _this, size_t __n, sdr_ShaderNode_t const* const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int sdr_ShaderNodePtrVector_default(sdr_ShaderNodePtrVector_t** _result) {
    *_result = new pxr::SdrShaderNodePtrVec();
    return 0;
}

int sdr_ShaderNodePtrVector_dtor(sdr_ShaderNodePtrVector_t* _this) {
    delete _this;
    return 0;
}

int sdr_ShaderProperty_GetLabel(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetLabel();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetHelp(sdr_ShaderProperty_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetHelp());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetPage(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetPage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetWidget(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetWidget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetHints(sdr_ShaderProperty_t const* _this, ndr_TokenMap_t const** _result) {
    try {
        *_result = &_this->GetHints();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetOptions(sdr_ShaderProperty_t const* _this, ndr_OptionVec_t const** _result) {
    try {
        *_result = &_this->GetOptions();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetImplementationName(sdr_ShaderProperty_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetImplementationName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetVStructMemberOf(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetVStructMemberOf();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetVStructMemberName(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetVStructMemberName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsVStructMember(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsVStructMember();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsVStruct(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsVStruct();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetVStructConditionalExpr(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetVStructConditionalExpr();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsConnectable(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConnectable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetValidConnectionTypes(sdr_ShaderProperty_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetValidConnectionTypes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_CanConnectTo(sdr_ShaderProperty_t const* _this, ndr_Property_t const* other, bool* _result) {
    try {
        *_result = _this->CanConnectTo(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetTypeAsSdfType(sdr_ShaderProperty_t const* _this, ndr_SdfTypeIndicator_t const** _result) {
    try {
        *_result = new pxr::NdrSdfTypeIndicator const(_this->GetTypeAsSdfType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetDefaultValueAsSdfType(sdr_ShaderProperty_t const* _this, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetDefaultValueAsSdfType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsAssetIdentifier(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAssetIdentifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsDefaultInput(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefaultInput();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetName(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetType(sdr_ShaderProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetDefaultValue(sdr_ShaderProperty_t const* _this, vt_Value_t const** _result) {
    try {
        *_result = &_this->GetDefaultValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsOutput(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsOutput();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsArray(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_IsDynamicArray(sdr_ShaderProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDynamicArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetArraySize(sdr_ShaderProperty_t const* _this, int* _result) {
    try {
        *_result = _this->GetArraySize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetInfoString(sdr_ShaderProperty_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetInfoString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_GetMetadata(sdr_ShaderProperty_t const* _this, ndr_TokenMap_t const** _result) {
    try {
        *_result = &_this->GetMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_ctor_00(tf_Token_t const* name, tf_Token_t const* type, vt_Value_t const* defaultValue, bool isOutput, unsigned long arraySize, ndr_TokenMap_t const* metadata, ndr_TokenMap_t const* hints, ndr_OptionVec_t const* options, sdr_ShaderProperty_t** _result) {
    try {
        *_result = new pxr::SdrShaderProperty(*name, *type, *defaultValue, isOutput, arraySize, *metadata, *hints, *options);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int sdr_ShaderProperty_dtor(sdr_ShaderProperty_t* _this) {
    delete _this;
    return 0;
}

int std_String_c_str(std_String_t const* _this, char const** _result) {
    *_result = _this->c_str();
    return 0;
}

int std_String_resize(std_String_t* _this, unsigned long __n) {
    try {
        _this->resize(__n);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int std_String_data(std_String_t* _this, char** _result) {
    *_result = _this->data();
    return 0;
}

int std_String_data_const(std_String_t const* _this, char const** _result) {
    *_result = _this->data();
    return 0;
}

int std_String_size(std_String_t const* _this, unsigned long* _result) {
    *_result = _this->size();
    return 0;
}

int std_String_default(std_String_t** _result) {
    *_result = new std::string();
    return 0;
}

int std_String_from_char_ptr(char const* param00, std_String_t** _result) {
    try {
        *_result = new std::string(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int std_String_from_char_ptr_and_count(char const* param00, unsigned long param01, std_String_t** _result) {
    try {
        *_result = new std::string(param00, param01);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int std_String_from_string(std_String_t* param00, std_String_t** _result) {
    try {
        *_result = new std::string(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int std_String_dtor(std_String_t* _this) {
    delete _this;
    return 0;
}

int std_StringVector_data(std_StringVector_t* _this, std_String_t** _result) {
    *_result = _this->data();
    return 0;
}

int std_StringVector_data_const(std_StringVector_t const* _this, std_String_t const** _result) {
    *_result = _this->data();
    return 0;
}

int std_StringVector_empty(std_StringVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int std_StringVector_size(std_StringVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int std_StringVector_max_size(std_StringVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int std_StringVector_capacity(std_StringVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int std_StringVector_clear(std_StringVector_t* _this) {
    _this->clear();
    return 0;
}

int std_StringVector_pop_back(std_StringVector_t* _this) {
    _this->pop_back();
    return 0;
}

int std_StringVector_op_index(std_StringVector_t const* _this, size_t __n, std_String_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int std_StringVector_default(std_StringVector_t** _result) {
    *_result = new std::vector<std::string>();
    return 0;
}

int std_StringVector_dtor(std_StringVector_t* _this) {
    delete _this;
    return 0;
}

int std_StringPair_dtor(std_StringPair_t* _this) {
    delete _this;
    return 0;
}

int std_StringPairVector_data(std_StringPairVector_t* _this, std_StringPair_t** _result) {
    *_result = _this->data();
    return 0;
}

int std_StringPairVector_data_const(std_StringPairVector_t const* _this, std_StringPair_t const** _result) {
    *_result = _this->data();
    return 0;
}

int std_StringPairVector_empty(std_StringPairVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int std_StringPairVector_size(std_StringPairVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int std_StringPairVector_max_size(std_StringPairVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int std_StringPairVector_capacity(std_StringPairVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int std_StringPairVector_clear(std_StringPairVector_t* _this) {
    _this->clear();
    return 0;
}

int std_StringPairVector_pop_back(std_StringPairVector_t* _this) {
    _this->pop_back();
    return 0;
}

int std_StringPairVector_op_index(std_StringPairVector_t const* _this, size_t __n, std_StringPair_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int std_StringPairVector_default(std_StringPairVector_t** _result) {
    *_result = new std::vector<std::pair<std::string, std::string>>();
    return 0;
}

int std_StringPairVector_dtor(std_StringPairVector_t* _this) {
    delete _this;
    return 0;
}

int std_StringSet_dtor(std_StringSet_t* _this) {
    delete _this;
    return 0;
}

int std_StringUnorderedSet_dtor(std_StringUnorderedSet_t* _this) {
    delete _this;
    return 0;
}

int std_DoubleVector_data(std_DoubleVector_t* _this, double** _result) {
    *_result = _this->data();
    return 0;
}

int std_DoubleVector_data_const(std_DoubleVector_t const* _this, double const** _result) {
    *_result = _this->data();
    return 0;
}

int std_DoubleVector_empty(std_DoubleVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int std_DoubleVector_size(std_DoubleVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int std_DoubleVector_max_size(std_DoubleVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int std_DoubleVector_capacity(std_DoubleVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int std_DoubleVector_clear(std_DoubleVector_t* _this) {
    _this->clear();
    return 0;
}

int std_DoubleVector_pop_back(std_DoubleVector_t* _this) {
    _this->pop_back();
    return 0;
}

int std_DoubleVector_op_index(std_DoubleVector_t const* _this, size_t __n, double const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int std_DoubleVector_default(std_DoubleVector_t** _result) {
    *_result = new std::vector<double>();
    return 0;
}

int std_DoubleVector_dtor(std_DoubleVector_t* _this) {
    delete _this;
    return 0;
}

int std_DoubleSet_dtor(std_DoubleSet_t* _this) {
    delete _this;
    return 0;
}

int std_DoublePair_dtor(std_DoublePair_t* _this) {
    delete _this;
    return 0;
}

int std_FloatPair_dtor(std_FloatPair_t* _this) {
    delete _this;
    return 0;
}

int tf_Enum_GetValueAsInt(tf_Enum_t const* _this, int const** _result) {
    try {
        *_result = &_this->GetValueAsInt();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Enum_GetName(tf_Enum_t* val, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::TfEnum::GetName(*val));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Enum_GetDisplayName(tf_Enum_t* val, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::TfEnum::GetDisplayName(*val));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Enum_GetFullName(tf_Enum_t* val, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::TfEnum::GetFullName(*val));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Enum_new(tf_Enum_t** _result) {
    try {
        *_result = new pxr::TfEnum();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Enum_dtor(tf_Enum_t* _this) {
    delete _this;
    return 0;
}

int tf_Token_GetText(tf_Token_t const* _this, char const** _result) {
    try {
        *_result = _this->GetText();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Token_new(char const* param00, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Token_dtor(tf_Token_t* _this) {
    delete _this;
    return 0;
}

int tf_Type_GetUnknownType(tf_Type_t const** _result) {
    try {
        *_result = &pxr::TfType::GetUnknownType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_op_eq(tf_Type_t const* _this, tf_Type_t const* t, bool* _result) {
    try {
        *_result = _this->operator==(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_op_neq(tf_Type_t const* _this, tf_Type_t const* t, bool* _result) {
    try {
        *_result = _this->operator!=(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_op_lt(tf_Type_t const* _this, tf_Type_t const* t, bool* _result) {
    try {
        *_result = _this->operator<(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_op_gt(tf_Type_t const* _this, tf_Type_t const* t, bool* _result) {
    try {
        *_result = _this->operator>(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_op_lte(tf_Type_t const* _this, tf_Type_t const* t, bool* _result) {
    try {
        *_result = _this->operator<=(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_op_gte(tf_Type_t const* _this, tf_Type_t const* t, bool* _result) {
    try {
        *_result = _this->operator>=(*t);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_FindByName(std_String_t const* name, tf_Type_t const** _result) {
    try {
        *_result = &pxr::TfType::FindByName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_FindDerivedByName(tf_Type_t const* _this, std_String_t const* name, tf_Type_t const** _result) {
    try {
        *_result = &_this->FindDerivedByName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetRoot(tf_Type_t const** _result) {
    try {
        *_result = &pxr::TfType::GetRoot();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetTypeName(tf_Type_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetTypeName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetAliases(tf_Type_t const* _this, tf_Type_t* derivedType, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetAliases(*derivedType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetBaseTypes(tf_Type_t const* _this, tf_TypeVector_t** _result) {
    try {
        *_result = new std::vector<pxr::TfType>(_this->GetBaseTypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetNBaseTypes(tf_Type_t const* _this, tf_Type_t* out, size_t maxBases, size_t* _result) {
    try {
        *_result = _this->GetNBaseTypes(out, maxBases);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetDirectlyDerivedTypes(tf_Type_t const* _this, tf_TypeVector_t** _result) {
    try {
        *_result = new std::vector<pxr::TfType>(_this->GetDirectlyDerivedTypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetCanonicalType(tf_Type_t const* _this, tf_Type_t const** _result) {
    try {
        *_result = &_this->GetCanonicalType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetAllDerivedTypes(tf_Type_t const* _this, tf_TypeSet_t* result) {
    try {
        _this->GetAllDerivedTypes(result);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetAllAncestorTypes(tf_Type_t const* _this, tf_TypeVector_t* result) {
    try {
        _this->GetAllAncestorTypes(result);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_IsA(tf_Type_t const* _this, tf_Type_t* queryType, bool* _result) {
    try {
        *_result = _this->IsA(*queryType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_IsUnknown(tf_Type_t const* _this, bool* _result) {
    try {
        *_result = _this->IsUnknown();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_op_not(tf_Type_t const* _this, bool* _result) {
    try {
        *_result = _this->operator!();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_IsRoot(tf_Type_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRoot();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_IsEnumType(tf_Type_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEnumType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_IsPlainOldDataType(tf_Type_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPlainOldDataType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_GetSizeof(tf_Type_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetSizeof();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_Declare(std_String_t const* typeName, tf_Type_t const** _result) {
    try {
        *_result = &pxr::TfType::Declare(*typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_default(tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int tf_Type_dtor(tf_Type_t* _this) {
    delete _this;
    return 0;
}

int tf_TypeSet_dtor(tf_TypeSet_t* _this) {
    delete _this;
    return 0;
}

int tf_TypeVector_data(tf_TypeVector_t* _this, tf_Type_t** _result) {
    *_result = _this->data();
    return 0;
}

int tf_TypeVector_data_const(tf_TypeVector_t const* _this, tf_Type_t const** _result) {
    *_result = _this->data();
    return 0;
}

int tf_TypeVector_empty(tf_TypeVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int tf_TypeVector_size(tf_TypeVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int tf_TypeVector_max_size(tf_TypeVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int tf_TypeVector_capacity(tf_TypeVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int tf_TypeVector_clear(tf_TypeVector_t* _this) {
    _this->clear();
    return 0;
}

int tf_TypeVector_pop_back(tf_TypeVector_t* _this) {
    _this->pop_back();
    return 0;
}

int tf_TypeVector_op_index(tf_TypeVector_t const* _this, size_t __n, tf_Type_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int tf_TypeVector_default(tf_TypeVector_t** _result) {
    *_result = new std::vector<pxr::TfType>();
    return 0;
}

int tf_TypeVector_dtor(tf_TypeVector_t* _this) {
    delete _this;
    return 0;
}

int tf_TokenVector_data(tf_TokenVector_t* _this, tf_Token_t** _result) {
    *_result = _this->data();
    return 0;
}

int tf_TokenVector_data_const(tf_TokenVector_t const* _this, tf_Token_t const** _result) {
    *_result = _this->data();
    return 0;
}

int tf_TokenVector_empty(tf_TokenVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int tf_TokenVector_size(tf_TokenVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int tf_TokenVector_max_size(tf_TokenVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int tf_TokenVector_capacity(tf_TokenVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int tf_TokenVector_clear(tf_TokenVector_t* _this) {
    _this->clear();
    return 0;
}

int tf_TokenVector_pop_back(tf_TokenVector_t* _this) {
    _this->pop_back();
    return 0;
}

int tf_TokenVector_op_index(tf_TokenVector_t const* _this, size_t __n, tf_Token_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int tf_TokenVector_default(tf_TokenVector_t** _result) {
    *_result = new pxr::TfTokenVector();
    return 0;
}

int tf_TokenVector_dtor(tf_TokenVector_t* _this) {
    delete _this;
    return 0;
}

int tf_TokenSet_dtor(tf_TokenSet_t* _this) {
    delete _this;
    return 0;
}

int tf_TokenTokenPair_dtor(tf_TokenTokenPair_t* _this) {
    delete _this;
    return 0;
}

int usd_AttributeQuery_CreateQueries(usd_Prim_t const* prim, tf_TokenVector_t const* attrNames, usd_AttributeQueryVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdAttributeQuery>(pxr::UsdAttributeQuery::CreateQueries(*prim, *attrNames));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_GetAttribute(usd_AttributeQuery_t const* _this, usd_Attribute_t const** _result) {
    try {
        *_result = &_this->GetAttribute();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_IsValid(usd_AttributeQuery_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_Get_value(usd_AttributeQuery_t const* _this, vt_Value_t* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Get(value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_GetTimeSamples(usd_AttributeQuery_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_GetTimeSamplesInInterval(usd_AttributeQuery_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_GetNumTimeSamples(usd_AttributeQuery_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetNumTimeSamples();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_GetBracketingTimeSamples(usd_AttributeQuery_t const* _this, double desiredTime, double* lower, double* upper, bool* hasTimeSamples, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamples(desiredTime, lower, upper, hasTimeSamples);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_HasValue(usd_AttributeQuery_t const* _this, bool* _result) {
    try {
        *_result = _this->HasValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_HasAuthoredValueOpinion(usd_AttributeQuery_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredValueOpinion();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_HasAuthoredValue(usd_AttributeQuery_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_HasFallbackValue(usd_AttributeQuery_t const* _this, bool* _result) {
    try {
        *_result = _this->HasFallbackValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_ValueMightBeTimeVarying(usd_AttributeQuery_t const* _this, bool* _result) {
    try {
        *_result = _this->ValueMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_GetUnionedTimeSamples(usd_AttributeQueryVector_t const* attrQueries, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = pxr::UsdAttributeQuery::GetUnionedTimeSamples(*attrQueries, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_GetUnionedTimeSamplesInInterval(usd_AttributeQueryVector_t const* attrQueries, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = pxr::UsdAttributeQuery::GetUnionedTimeSamplesInInterval(*attrQueries, *interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_default(usd_AttributeQuery_t** _result) {
    try {
        *_result = new pxr::UsdAttributeQuery();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_from_prim_and_attribute_name(usd_Prim_t const* param00, tf_Token_t const* param01, usd_AttributeQuery_t** _result) {
    try {
        *_result = new pxr::UsdAttributeQuery(*param00, *param01);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_from_attribute_and_resolve_target(usd_Attribute_t const* param00, usd_ResolveTarget_t const* param01, usd_AttributeQuery_t** _result) {
    try {
        *_result = new pxr::UsdAttributeQuery(*param00, *param01);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_AttributeQuery_dtor(usd_AttributeQuery_t* _this) {
    delete _this;
    return 0;
}

int usd_AttributeQueryVector_data(usd_AttributeQueryVector_t* _this, usd_AttributeQuery_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_AttributeQueryVector_data_const(usd_AttributeQueryVector_t const* _this, usd_AttributeQuery_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_AttributeQueryVector_empty(usd_AttributeQueryVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_AttributeQueryVector_size(usd_AttributeQueryVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_AttributeQueryVector_max_size(usd_AttributeQueryVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_AttributeQueryVector_capacity(usd_AttributeQueryVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_AttributeQueryVector_clear(usd_AttributeQueryVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_AttributeQueryVector_pop_back(usd_AttributeQueryVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_AttributeQueryVector_op_index(usd_AttributeQueryVector_t const* _this, size_t __n, usd_AttributeQuery_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_AttributeQueryVector_default(usd_AttributeQueryVector_t** _result) {
    *_result = new std::vector<pxr::UsdAttributeQuery>();
    return 0;
}

int usd_AttributeQueryVector_dtor(usd_AttributeQueryVector_t* _this) {
    delete _this;
    return 0;
}

int usd_ClipsAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdClipsAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usd_ClipsAPI_t** _result) {
    try {
        *_result = new pxr::UsdClipsAPI(pxr::UsdClipsAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClips(usd_ClipsAPI_t const* _this, vt_Dictionary_t* clips, bool* _result) {
    try {
        *_result = _this->GetClips(clips);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClips(usd_ClipsAPI_t* _this, vt_Dictionary_t const* clips, bool* _result) {
    try {
        *_result = _this->SetClips(*clips);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipSets(usd_ClipsAPI_t const* _this, sdf_StringListOp_t* clipSets, bool* _result) {
    try {
        *_result = _this->GetClipSets(clipSets);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipSets(usd_ClipsAPI_t* _this, sdf_StringListOp_t const* clipSets, bool* _result) {
    try {
        *_result = _this->SetClipSets(*clipSets);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_ComputeClipAssetPaths_00(usd_ClipsAPI_t const* _this, std_String_t const* clipSet, sdf_AssetPathArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::SdfAssetPath>(_this->ComputeClipAssetPaths(*clipSet));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_ComputeClipAssetPaths_01(usd_ClipsAPI_t const* _this, sdf_AssetPathArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::SdfAssetPath>(_this->ComputeClipAssetPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipAssetPaths_00(usd_ClipsAPI_t const* _this, sdf_AssetPathArray_t* assetPaths, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipAssetPaths(assetPaths, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipAssetPaths_01(usd_ClipsAPI_t const* _this, sdf_AssetPathArray_t* assetPaths, bool* _result) {
    try {
        *_result = _this->GetClipAssetPaths(assetPaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipAssetPaths_00(usd_ClipsAPI_t* _this, sdf_AssetPathArray_t const* assetPaths, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipAssetPaths(*assetPaths, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipAssetPaths_01(usd_ClipsAPI_t* _this, sdf_AssetPathArray_t const* assetPaths, bool* _result) {
    try {
        *_result = _this->SetClipAssetPaths(*assetPaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipPrimPath_00(usd_ClipsAPI_t const* _this, std_String_t* primPath, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipPrimPath(primPath, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipPrimPath_01(usd_ClipsAPI_t const* _this, std_String_t* primPath, bool* _result) {
    try {
        *_result = _this->GetClipPrimPath(primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipPrimPath_00(usd_ClipsAPI_t* _this, std_String_t const* primPath, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipPrimPath(*primPath, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipPrimPath_01(usd_ClipsAPI_t* _this, std_String_t const* primPath, bool* _result) {
    try {
        *_result = _this->SetClipPrimPath(*primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipActive_00(usd_ClipsAPI_t const* _this, gf_Vec2dArray_t* activeClips, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipActive(activeClips, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipActive_01(usd_ClipsAPI_t const* _this, gf_Vec2dArray_t* activeClips, bool* _result) {
    try {
        *_result = _this->GetClipActive(activeClips);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipActive_00(usd_ClipsAPI_t* _this, gf_Vec2dArray_t const* activeClips, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipActive(*activeClips, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipActive_01(usd_ClipsAPI_t* _this, gf_Vec2dArray_t const* activeClips, bool* _result) {
    try {
        *_result = _this->SetClipActive(*activeClips);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTimes_00(usd_ClipsAPI_t const* _this, gf_Vec2dArray_t* clipTimes, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipTimes(clipTimes, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTimes_01(usd_ClipsAPI_t const* _this, gf_Vec2dArray_t* clipTimes, bool* _result) {
    try {
        *_result = _this->GetClipTimes(clipTimes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTimes_00(usd_ClipsAPI_t* _this, gf_Vec2dArray_t const* clipTimes, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipTimes(*clipTimes, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTimes_01(usd_ClipsAPI_t* _this, gf_Vec2dArray_t const* clipTimes, bool* _result) {
    try {
        *_result = _this->SetClipTimes(*clipTimes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipManifestAssetPath_00(usd_ClipsAPI_t const* _this, sdf_AssetPath_t* manifestAssetPath, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipManifestAssetPath(manifestAssetPath, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipManifestAssetPath_01(usd_ClipsAPI_t const* _this, sdf_AssetPath_t* manifestAssetPath, bool* _result) {
    try {
        *_result = _this->GetClipManifestAssetPath(manifestAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipManifestAssetPath_00(usd_ClipsAPI_t* _this, sdf_AssetPath_t const* manifestAssetPath, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipManifestAssetPath(*manifestAssetPath, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipManifestAssetPath_01(usd_ClipsAPI_t* _this, sdf_AssetPath_t const* manifestAssetPath, bool* _result) {
    try {
        *_result = _this->SetClipManifestAssetPath(*manifestAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GenerateClipManifest_00(usd_ClipsAPI_t const* _this, std_String_t const* clipSet, bool writeBlocksForClipsWithMissingValues, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(_this->GenerateClipManifest(*clipSet, writeBlocksForClipsWithMissingValues));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GenerateClipManifest_01(usd_ClipsAPI_t const* _this, bool writeBlocksForClipsWithMissingValues, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(_this->GenerateClipManifest(writeBlocksForClipsWithMissingValues));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GenerateClipManifestFromLayers(sdf_LayerHandleVector_t const* clipLayers, sdf_Path_t const* clipPrimPath, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(pxr::UsdClipsAPI::GenerateClipManifestFromLayers(*clipLayers, *clipPrimPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetInterpolateMissingClipValues_00(usd_ClipsAPI_t const* _this, bool* interpolate, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetInterpolateMissingClipValues(interpolate, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetInterpolateMissingClipValues_01(usd_ClipsAPI_t const* _this, bool* interpolate, bool* _result) {
    try {
        *_result = _this->GetInterpolateMissingClipValues(interpolate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetInterpolateMissingClipValues_00(usd_ClipsAPI_t* _this, bool interpolate, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetInterpolateMissingClipValues(interpolate, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetInterpolateMissingClipValues_01(usd_ClipsAPI_t* _this, bool interpolate, bool* _result) {
    try {
        *_result = _this->SetInterpolateMissingClipValues(interpolate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateAssetPath_00(usd_ClipsAPI_t const* _this, std_String_t* clipTemplateAssetPath, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipTemplateAssetPath(clipTemplateAssetPath, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateAssetPath_01(usd_ClipsAPI_t const* _this, std_String_t* clipTemplateAssetPath, bool* _result) {
    try {
        *_result = _this->GetClipTemplateAssetPath(clipTemplateAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateAssetPath_00(usd_ClipsAPI_t* _this, std_String_t const* clipTemplateAssetPath, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipTemplateAssetPath(*clipTemplateAssetPath, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateAssetPath_01(usd_ClipsAPI_t* _this, std_String_t const* clipTemplateAssetPath, bool* _result) {
    try {
        *_result = _this->SetClipTemplateAssetPath(*clipTemplateAssetPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateStride_00(usd_ClipsAPI_t const* _this, double* clipTemplateStride, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipTemplateStride(clipTemplateStride, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateStride_01(usd_ClipsAPI_t const* _this, double* clipTemplateStride, bool* _result) {
    try {
        *_result = _this->GetClipTemplateStride(clipTemplateStride);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateActiveOffset_00(usd_ClipsAPI_t* _this, double const clipTemplateActiveOffset, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipTemplateActiveOffset(clipTemplateActiveOffset, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateActiveOffset_01(usd_ClipsAPI_t* _this, double const clipTemplateActiveOffset, bool* _result) {
    try {
        *_result = _this->SetClipTemplateActiveOffset(clipTemplateActiveOffset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateActiveOffset_00(usd_ClipsAPI_t const* _this, double* clipTemplateActiveOffset, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipTemplateActiveOffset(clipTemplateActiveOffset, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateActiveOffset_01(usd_ClipsAPI_t const* _this, double* clipTemplateActiveOffset, bool* _result) {
    try {
        *_result = _this->GetClipTemplateActiveOffset(clipTemplateActiveOffset);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateStride_00(usd_ClipsAPI_t* _this, double const clipTemplateStride, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipTemplateStride(clipTemplateStride, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateStride_01(usd_ClipsAPI_t* _this, double const clipTemplateStride, bool* _result) {
    try {
        *_result = _this->SetClipTemplateStride(clipTemplateStride);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateStartTime_00(usd_ClipsAPI_t const* _this, double* clipTemplateStartTime, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipTemplateStartTime(clipTemplateStartTime, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateStartTime_01(usd_ClipsAPI_t const* _this, double* clipTemplateStartTime, bool* _result) {
    try {
        *_result = _this->GetClipTemplateStartTime(clipTemplateStartTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateStartTime_00(usd_ClipsAPI_t* _this, double const clipTemplateStartTime, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipTemplateStartTime(clipTemplateStartTime, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateStartTime_01(usd_ClipsAPI_t* _this, double const clipTemplateStartTime, bool* _result) {
    try {
        *_result = _this->SetClipTemplateStartTime(clipTemplateStartTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateEndTime_00(usd_ClipsAPI_t const* _this, double* clipTemplateEndTime, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->GetClipTemplateEndTime(clipTemplateEndTime, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetClipTemplateEndTime_01(usd_ClipsAPI_t const* _this, double* clipTemplateEndTime, bool* _result) {
    try {
        *_result = _this->GetClipTemplateEndTime(clipTemplateEndTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateEndTime_00(usd_ClipsAPI_t* _this, double const clipTemplateEndTime, std_String_t const* clipSet, bool* _result) {
    try {
        *_result = _this->SetClipTemplateEndTime(clipTemplateEndTime, *clipSet);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_SetClipTemplateEndTime_01(usd_ClipsAPI_t* _this, double const clipTemplateEndTime, bool* _result) {
    try {
        *_result = _this->SetClipTemplateEndTime(clipTemplateEndTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_IsConcrete(usd_ClipsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_IsTyped(usd_ClipsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_IsAPISchema(usd_ClipsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_IsAppliedAPISchema(usd_ClipsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_IsMultipleApplyAPISchema(usd_ClipsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetSchemaKind(usd_ClipsAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetPrim(usd_ClipsAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetPath(usd_ClipsAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_GetSchemaClassPrimDefinition(usd_ClipsAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_op_bool(usd_ClipsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_from_prim(usd_Prim_t const* prim, usd_ClipsAPI_t** _result) {
    try {
        *_result = new pxr::UsdClipsAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_from_schema(usd_SchemaBase_t const* schemaObj, usd_ClipsAPI_t** _result) {
    try {
        *_result = new pxr::UsdClipsAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ClipsAPI_dtor(usd_ClipsAPI_t* _this) {
    delete _this;
    return 0;
}

int usd_CollectionAPI_GetSchemaAttributeNames_00(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdCollectionAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetSchemaAttributeNames_01(bool includeInherited, tf_Token_t const* instanceName, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(pxr::UsdCollectionAPI::GetSchemaAttributeNames(includeInherited, *instanceName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetName(usd_CollectionAPI_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_Get_from_path(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(pxr::UsdCollectionAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_Get(usd_Prim_t const* prim, tf_Token_t const* name, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(pxr::UsdCollectionAPI::Get(*prim, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetAll(usd_Prim_t const* prim, usd_CollectionAPIVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdCollectionAPI>(pxr::UsdCollectionAPI::GetAll(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IsSchemaPropertyBaseName(tf_Token_t const* baseName, bool* _result) {
    try {
        *_result = pxr::UsdCollectionAPI::IsSchemaPropertyBaseName(*baseName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IsCollectionAPIPath(sdf_Path_t const* path, tf_Token_t* name, bool* _result) {
    try {
        *_result = pxr::UsdCollectionAPI::IsCollectionAPIPath(*path, name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_CanApply(usd_Prim_t const* prim, tf_Token_t const* name, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdCollectionAPI::CanApply(*prim, *name, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_Apply(usd_Prim_t const* prim, tf_Token_t const* name, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(pxr::UsdCollectionAPI::Apply(*prim, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetExpansionRuleAttr(usd_CollectionAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExpansionRuleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_CreateExpansionRuleAttr(usd_CollectionAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExpansionRuleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetIncludeRootAttr(usd_CollectionAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIncludeRootAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_CreateIncludeRootAttr(usd_CollectionAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIncludeRootAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetCollectionAttr(usd_CollectionAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCollectionAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_CreateCollectionAttr(usd_CollectionAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCollectionAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetIncludesRel(usd_CollectionAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetIncludesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_CreateIncludesRel(usd_CollectionAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateIncludesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetExcludesRel(usd_CollectionAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetExcludesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_CreateExcludesRel(usd_CollectionAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateExcludesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetCollection_from_path(usd_StageWeakPtr_t const* stage, sdf_Path_t const* collectionPath, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(pxr::UsdCollectionAPI::GetCollection(*stage, *collectionPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetCollection(usd_Prim_t const* prim, tf_Token_t const* name, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(pxr::UsdCollectionAPI::GetCollection(*prim, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetAllCollections(usd_Prim_t const* prim, usd_CollectionAPIVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdCollectionAPI>(pxr::UsdCollectionAPI::GetAllCollections(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetCollectionPath(usd_CollectionAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetCollectionPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetNamedCollectionPath(usd_Prim_t const* prim, tf_Token_t const* collectionName, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(pxr::UsdCollectionAPI::GetNamedCollectionPath(*prim, *collectionName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ComputeMembershipQuery_00(usd_CollectionAPI_t const* _this, usd_CollectionMembershipQuery_t** _result) {
    try {
        *_result = new pxr::UsdCollectionMembershipQuery(_this->ComputeMembershipQuery());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ComputeMembershipQuery_01(usd_CollectionAPI_t const* _this, usd_CollectionMembershipQuery_t* query) {
    try {
        _this->ComputeMembershipQuery(query);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_HasNoIncludedPaths(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->HasNoIncludedPaths();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ComputeIncludedObjects(usd_CollectionMembershipQuery_t const* query, usd_StageWeakPtr_t const* stage, usd_PrimFlagsPredicate_t const* pred, usd_ObjectSet_t** _result) {
    try {
        *_result = new std::set<pxr::UsdObject>(pxr::UsdCollectionAPI::ComputeIncludedObjects(*query, *stage, *pred));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ComputeIncludedPaths(usd_CollectionMembershipQuery_t const* query, usd_StageWeakPtr_t const* stage, usd_PrimFlagsPredicate_t const* pred, sdf_PathSet_t** _result) {
    try {
        *_result = new pxr::SdfPathSet(pxr::UsdCollectionAPI::ComputeIncludedPaths(*query, *stage, *pred));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IncludePath(usd_CollectionAPI_t const* _this, sdf_Path_t const* pathToInclude, bool* _result) {
    try {
        *_result = _this->IncludePath(*pathToInclude);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ExcludePath(usd_CollectionAPI_t const* _this, sdf_Path_t const* pathToExclude, bool* _result) {
    try {
        *_result = _this->ExcludePath(*pathToExclude);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_Validate(usd_CollectionAPI_t const* _this, std_String_t* reason, bool* _result) {
    try {
        *_result = _this->Validate(reason);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ResetCollection(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->ResetCollection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_BlockCollection(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->BlockCollection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_CanContainPropertyName(tf_Token_t const* name, bool* _result) {
    try {
        *_result = pxr::UsdCollectionAPI::CanContainPropertyName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IsConcrete(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IsTyped(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IsAPISchema(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IsAppliedAPISchema(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_IsMultipleApplyAPISchema(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetSchemaKind(usd_CollectionAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetPrim(usd_CollectionAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetPath(usd_CollectionAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_GetSchemaClassPrimDefinition(usd_CollectionAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_op_bool(usd_CollectionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ctor_00(usd_Prim_t const* prim, tf_Token_t const* name, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(*prim, *name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_ctor_01(usd_SchemaBase_t const* schemaObj, tf_Token_t const* name, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(*schemaObj, *name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionAPI_dtor(usd_CollectionAPI_t* _this) {
    delete _this;
    return 0;
}

int usd_CollectionAPIVector_data(usd_CollectionAPIVector_t* _this, usd_CollectionAPI_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_CollectionAPIVector_data_const(usd_CollectionAPIVector_t const* _this, usd_CollectionAPI_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_CollectionAPIVector_empty(usd_CollectionAPIVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_CollectionAPIVector_size(usd_CollectionAPIVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_CollectionAPIVector_max_size(usd_CollectionAPIVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_CollectionAPIVector_capacity(usd_CollectionAPIVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_CollectionAPIVector_clear(usd_CollectionAPIVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_CollectionAPIVector_pop_back(usd_CollectionAPIVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_CollectionAPIVector_op_index(usd_CollectionAPIVector_t const* _this, size_t __n, usd_CollectionAPI_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_CollectionAPIVector_default(usd_CollectionAPIVector_t** _result) {
    *_result = new std::vector<pxr::UsdCollectionAPI>();
    return 0;
}

int usd_CollectionAPIVector_dtor(usd_CollectionAPIVector_t* _this) {
    delete _this;
    return 0;
}

int usd_CollectionMembershipQuery_IsPathIncluded_00(usd_CollectionMembershipQuery_t const* _this, sdf_Path_t const* path, tf_Token_t* expansionRule, bool* _result) {
    try {
        *_result = _this->IsPathIncluded(*path, expansionRule);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_IsPathIncluded_01(usd_CollectionMembershipQuery_t const* _this, sdf_Path_t const* path, tf_Token_t const* parentExpansionRule, tf_Token_t* expansionRule, bool* _result) {
    try {
        *_result = _this->IsPathIncluded(*path, *parentExpansionRule, expansionRule);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_HasExcludes(usd_CollectionMembershipQuery_t const* _this, bool* _result) {
    try {
        *_result = _this->HasExcludes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_op_eq(usd_CollectionMembershipQuery_t const* _this, usd_CollectionMembershipQuery_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator==(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_op_neq(usd_CollectionMembershipQuery_t const* _this, usd_CollectionMembershipQuery_t const* rhs, bool* _result) {
    try {
        *_result = _this->operator!=(*rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_GetHash(usd_CollectionMembershipQuery_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetHash();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_GetAsPathExpansionRuleMap(usd_CollectionMembershipQuery_t const* _this, usd_CollectionMembershipQueryPathExpansionRuleMap_t const** _result) {
    try {
        *_result = &_this->GetAsPathExpansionRuleMap();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_GetIncludedCollections(usd_CollectionMembershipQuery_t const* _this, sdf_PathSet_t const** _result) {
    try {
        *_result = &_this->GetIncludedCollections();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_default(usd_CollectionMembershipQuery_t** _result) {
    try {
        *_result = new pxr::UsdCollectionMembershipQuery();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CollectionMembershipQuery_dtor(usd_CollectionMembershipQuery_t* _this) {
    delete _this;
    return 0;
}

int usd_CollectionMembershipQueryHash_default(usd_CollectionMembershipQueryHash_t** _result) {
    *_result = new pxr::UsdCollectionMembershipQuery::Hash();
    return 0;
}

int usd_CollectionMembershipQueryHash_dtor(usd_CollectionMembershipQueryHash_t* _this) {
    delete _this;
    return 0;
}

int usd_CollectionMembershipQueryPathExpansionRuleMap_default(usd_CollectionMembershipQueryPathExpansionRuleMap_t** _result) {
    *_result = new pxr::UsdCollectionMembershipQuery::PathExpansionRuleMap();
    return 0;
}

int usd_CollectionMembershipQueryPathExpansionRuleMap_dtor(usd_CollectionMembershipQueryPathExpansionRuleMap_t* _this) {
    delete _this;
    return 0;
}

int usd_MetadataValueMap_at_const(usd_MetadataValueMap_t const* _this, tf_Token_t const* __k, vt_Value_t const** _result) {
    try {
        *_result = &_this->at(*__k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_MetadataValueMap_at(usd_MetadataValueMap_t* _this, tf_Token_t const* __k, vt_Value_t** _result) {
    try {
        *_result = &_this->at(*__k);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_MetadataValueMap_dtor(usd_MetadataValueMap_t* _this) {
    delete _this;
    return 0;
}

int usd_CrateInfo_Open(std_String_t const* fileName, usd_CrateInfo_t** _result) {
    try {
        *_result = new pxr::UsdCrateInfo(pxr::UsdCrateInfo::Open(*fileName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CrateInfo_GetSummaryStats(usd_CrateInfo_t const* _this, usd_CrateInfoSummaryStats_t* _result) {
    try {
        *_result = _this->GetSummaryStats();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CrateInfo_GetSections(usd_CrateInfo_t const* _this, usd_CratreInfoSectionVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdCrateInfo::Section>(_this->GetSections());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CrateInfo_GetFileVersion(usd_CrateInfo_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetFileVersion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CrateInfo_GetSoftwareVersion(usd_CrateInfo_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetSoftwareVersion());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CrateInfo_op_bool(usd_CrateInfo_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CrateInfo_dtor(usd_CrateInfo_t* _this) {
    delete _this;
    return 0;
}

int usd_CrateInfoSection_default(usd_CrateInfoSection_t** _result) {
    *_result = new pxr::UsdCrateInfo::Section();
    return 0;
}

int usd_CrateInfoSection_ctor_01(std_String_t const* name, long start, long size, usd_CrateInfoSection_t** _result) {
    try {
        *_result = new pxr::UsdCrateInfo::Section(*name, start, size);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_CrateInfoSection_dtor(usd_CrateInfoSection_t* _this) {
    delete _this;
    return 0;
}

int usd_CratreInfoSectionVector_data(usd_CratreInfoSectionVector_t* _this, usd_CrateInfoSection_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_CratreInfoSectionVector_data_const(usd_CratreInfoSectionVector_t const* _this, usd_CrateInfoSection_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_CratreInfoSectionVector_empty(usd_CratreInfoSectionVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_CratreInfoSectionVector_size(usd_CratreInfoSectionVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_CratreInfoSectionVector_max_size(usd_CratreInfoSectionVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_CratreInfoSectionVector_capacity(usd_CratreInfoSectionVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_CratreInfoSectionVector_clear(usd_CratreInfoSectionVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_CratreInfoSectionVector_pop_back(usd_CratreInfoSectionVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_CratreInfoSectionVector_op_index(usd_CratreInfoSectionVector_t const* _this, size_t __n, usd_CrateInfoSection_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_CratreInfoSectionVector_default(usd_CratreInfoSectionVector_t** _result) {
    *_result = new std::vector<pxr::UsdCrateInfo::Section>();
    return 0;
}

int usd_CratreInfoSectionVector_dtor(usd_CratreInfoSectionVector_t* _this) {
    delete _this;
    return 0;
}

int usd_EditTarget_op_eq(usd_EditTarget_t const* _this, usd_EditTarget_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_IsNull(usd_EditTarget_t const* _this, bool* _result) {
    try {
        *_result = _this->IsNull();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_IsValid(usd_EditTarget_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_GetLayer(usd_EditTarget_t const* _this, sdf_LayerHandle_t const** _result) {
    try {
        *_result = &_this->GetLayer();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_MapToSpecPath(usd_EditTarget_t const* _this, sdf_Path_t const* scenePath, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->MapToSpecPath(*scenePath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_GetPrimSpecForScenePath(usd_EditTarget_t const* _this, sdf_Path_t const* scenePath, sdf_PrimSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandle(_this->GetPrimSpecForScenePath(*scenePath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_GetPropertySpecForScenePath(usd_EditTarget_t const* _this, sdf_Path_t const* scenePath, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle(_this->GetPropertySpecForScenePath(*scenePath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_GetSpecForScenePath(usd_EditTarget_t const* _this, sdf_Path_t const* scenePath, sdf_SpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfSpecHandle(_this->GetSpecForScenePath(*scenePath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_GetMapFunction(usd_EditTarget_t const* _this, pcp_MapFunction_t const** _result) {
    try {
        *_result = &_this->GetMapFunction();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_ComposeOver(usd_EditTarget_t const* _this, usd_EditTarget_t const* weaker, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(_this->ComposeOver(*weaker));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_ForLocalDirectVariant(sdf_LayerHandle_t const* layer, sdf_Path_t const* varSelPath, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(pxr::UsdEditTarget::ForLocalDirectVariant(*layer, *varSelPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_default(usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_from_layer_handle(sdf_LayerHandle_t* param00, sdf_LayerOffset_t* param01, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(*param00, *param01);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_from_layer_ref_ptr(sdf_LayerRefPtr_t* param00, sdf_LayerOffset_t* param01, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(*param00, *param01);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_from_layer_handle_and_node(sdf_LayerHandle_t* param00, pcp_NodeRef_t* param01, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(*param00, *param01);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_EditTarget_dtor(usd_EditTarget_t* _this) {
    delete _this;
    return 0;
}

int usd_Inherits_AddInherit(usd_Inherits_t* _this, sdf_Path_t const* primPath, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddInherit(*primPath, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Inherits_RemoveInherit(usd_Inherits_t* _this, sdf_Path_t const* primPath, bool* _result) {
    try {
        *_result = _this->RemoveInherit(*primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Inherits_ClearInherits(usd_Inherits_t* _this, bool* _result) {
    try {
        *_result = _this->ClearInherits();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Inherits_SetInherits(usd_Inherits_t* _this, sdf_PathVector_t const* items, bool* _result) {
    try {
        *_result = _this->SetInherits(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Inherits_GetAllDirectInherits(usd_Inherits_t const* _this, sdf_PathVector_t** _result) {
    try {
        *_result = new pxr::SdfPathVector(_this->GetAllDirectInherits());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Inherits_GetPrim(usd_Inherits_t const* _this, usd_Prim_t const** _result) {
    try {
        *_result = &_this->GetPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Inherits_op_bool(usd_Inherits_t* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Inherits_dtor(usd_Inherits_t* _this) {
    delete _this;
    return 0;
}

int usd_ModelAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdModelAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usd_ModelAPI_t** _result) {
    try {
        *_result = new pxr::UsdModelAPI(pxr::UsdModelAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetKind(usd_ModelAPI_t const* _this, tf_Token_t* kind, bool* _result) {
    try {
        *_result = _this->GetKind(kind);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_SetKind(usd_ModelAPI_t const* _this, tf_Token_t const* kind, bool* _result) {
    try {
        *_result = _this->SetKind(*kind);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsKind(usd_ModelAPI_t const* _this, tf_Token_t const* baseKind, unsigned int validation, bool* _result) {
    try {
        *_result = _this->IsKind(*baseKind, static_cast<pxr::UsdModelAPI::KindValidation>(validation));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsModel(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsModel();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsGroup(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetAssetIdentifier(usd_ModelAPI_t const* _this, sdf_AssetPath_t* identifier, bool* _result) {
    try {
        *_result = _this->GetAssetIdentifier(identifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_SetAssetIdentifier(usd_ModelAPI_t const* _this, sdf_AssetPath_t const* identifier) {
    try {
        _this->SetAssetIdentifier(*identifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetAssetName(usd_ModelAPI_t const* _this, std_String_t* assetName, bool* _result) {
    try {
        *_result = _this->GetAssetName(assetName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_SetAssetName(usd_ModelAPI_t const* _this, std_String_t const* assetName) {
    try {
        _this->SetAssetName(*assetName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetAssetVersion(usd_ModelAPI_t const* _this, std_String_t* version, bool* _result) {
    try {
        *_result = _this->GetAssetVersion(version);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_SetAssetVersion(usd_ModelAPI_t const* _this, std_String_t const* version) {
    try {
        _this->SetAssetVersion(*version);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetPayloadAssetDependencies(usd_ModelAPI_t const* _this, sdf_AssetPathArray_t* assetDeps, bool* _result) {
    try {
        *_result = _this->GetPayloadAssetDependencies(assetDeps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_SetPayloadAssetDependencies(usd_ModelAPI_t const* _this, sdf_AssetPathArray_t const* assetDeps) {
    try {
        _this->SetPayloadAssetDependencies(*assetDeps);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetAssetInfo(usd_ModelAPI_t const* _this, vt_Dictionary_t* info, bool* _result) {
    try {
        *_result = _this->GetAssetInfo(info);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_SetAssetInfo(usd_ModelAPI_t const* _this, vt_Dictionary_t const* info) {
    try {
        _this->SetAssetInfo(*info);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsConcrete(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsTyped(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsAPISchema(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsAppliedAPISchema(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_IsMultipleApplyAPISchema(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetSchemaKind(usd_ModelAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetPrim(usd_ModelAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetPath(usd_ModelAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_GetSchemaClassPrimDefinition(usd_ModelAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_op_bool(usd_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_from_prim(usd_Prim_t const* prim, usd_ModelAPI_t** _result) {
    try {
        *_result = new pxr::UsdModelAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_from_schema(usd_SchemaBase_t const* schemaObj, usd_ModelAPI_t** _result) {
    try {
        *_result = new pxr::UsdModelAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ModelAPI_dtor(usd_ModelAPI_t* _this) {
    delete _this;
    return 0;
}

int usd_Notice_dtor(usd_Notice_t* _this) {
    delete _this;
    return 0;
}

int usd_StageNotice_GetStage(usd_StageNotice_t const* _this, usd_StageWeakPtr_t const** _result) {
    try {
        *_result = &_this->GetStage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageNotice_ctor_00(usd_StageWeakPtr_t const* stage, usd_StageNotice_t** _result) {
    try {
        *_result = new pxr::UsdNotice::StageNotice(*stage);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageNotice_dtor(usd_StageNotice_t* _this) {
    delete _this;
    return 0;
}

int usd_StageContentsChanged_GetStage(usd_StageContentsChanged_t const* _this, usd_StageWeakPtr_t const** _result) {
    try {
        *_result = &_this->GetStage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageContentsChanged_ctor_00(usd_StageWeakPtr_t const* stage, usd_StageContentsChanged_t** _result) {
    try {
        *_result = new pxr::UsdNotice::StageContentsChanged(*stage);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageContentsChanged_dtor(usd_StageContentsChanged_t* _this) {
    delete _this;
    return 0;
}

int usd_ObjectsChanged_AffectedObject(usd_ObjectsChanged_t const* _this, usd_Object_t const* obj, bool* _result) {
    try {
        *_result = _this->AffectedObject(*obj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_ResyncedObject(usd_ObjectsChanged_t const* _this, usd_Object_t const* obj, bool* _result) {
    try {
        *_result = _this->ResyncedObject(*obj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_ChangedInfoOnly(usd_ObjectsChanged_t const* _this, usd_Object_t const* obj, bool* _result) {
    try {
        *_result = _this->ChangedInfoOnly(*obj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_GetResyncedPaths(usd_ObjectsChanged_t const* _this, usd_ObjectsChangedPathRange_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange(_this->GetResyncedPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_GetChangedInfoOnlyPaths(usd_ObjectsChanged_t const* _this, usd_ObjectsChangedPathRange_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange(_this->GetChangedInfoOnlyPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_GetChangedFields_00(usd_ObjectsChanged_t const* _this, usd_Object_t const* obj, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetChangedFields(*obj));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_GetChangedFields_01(usd_ObjectsChanged_t const* _this, sdf_Path_t const* path, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetChangedFields(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_HasChangedFields_00(usd_ObjectsChanged_t const* _this, usd_Object_t const* obj, bool* _result) {
    try {
        *_result = _this->HasChangedFields(*obj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_HasChangedFields_01(usd_ObjectsChanged_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->HasChangedFields(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_GetStage(usd_ObjectsChanged_t const* _this, usd_StageWeakPtr_t const** _result) {
    try {
        *_result = &_this->GetStage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChanged_dtor(usd_ObjectsChanged_t* _this) {
    delete _this;
    return 0;
}

int usd_ObjectsChangedPathRange_empty(usd_ObjectsChangedPathRange_t const* _this, bool* _result) {
    try {
        *_result = _this->empty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_size(usd_ObjectsChangedPathRange_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_begin(usd_ObjectsChangedPathRange_t const* _this, usd_ObjectsChangedPathRangeIterator_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange::iterator(_this->begin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_cbegin(usd_ObjectsChangedPathRange_t const* _this, usd_ObjectsChangedPathRangeIterator_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange::iterator(_this->cbegin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_end(usd_ObjectsChangedPathRange_t const* _this, usd_ObjectsChangedPathRangeIterator_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange::iterator(_this->end());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_cend(usd_ObjectsChangedPathRange_t const* _this, usd_ObjectsChangedPathRangeIterator_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange::iterator(_this->cend());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_find(usd_ObjectsChangedPathRange_t const* _this, sdf_Path_t const* path, usd_ObjectsChangedPathRangeIterator_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange::iterator(_this->find(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_default(usd_ObjectsChangedPathRange_t** _result) {
    try {
        *_result = new pxr::UsdNotice::ObjectsChanged::PathRange();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRange_dtor(usd_ObjectsChangedPathRange_t* _this) {
    delete _this;
    return 0;
}

int usd_ObjectsChangedPathRangeIterator_GetChangedFields(usd_ObjectsChangedPathRangeIterator_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetChangedFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRangeIterator_HasChangedFields(usd_ObjectsChangedPathRangeIterator_t const* _this, bool* _result) {
    try {
        *_result = _this->HasChangedFields();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ObjectsChangedPathRangeIterator_default(usd_ObjectsChangedPathRangeIterator_t** _result) {
    *_result = new pxr::UsdNotice::ObjectsChanged::PathRange::iterator();
    return 0;
}

int usd_ObjectsChangedPathRangeIterator_dtor(usd_ObjectsChangedPathRangeIterator_t* _this) {
    delete _this;
    return 0;
}

int usd_StageEditTargetChanged_GetStage(usd_StageEditTargetChanged_t const* _this, usd_StageWeakPtr_t const** _result) {
    try {
        *_result = &_this->GetStage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageEditTargetChanged_ctor_00(usd_StageWeakPtr_t const* stage, usd_StageEditTargetChanged_t** _result) {
    try {
        *_result = new pxr::UsdNotice::StageEditTargetChanged(*stage);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageEditTargetChanged_dtor(usd_StageEditTargetChanged_t* _this) {
    delete _this;
    return 0;
}

int usd_LayerMutingChanged_GetMutedLayers(usd_LayerMutingChanged_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetMutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_LayerMutingChanged_GetUnmutedLayers(usd_LayerMutingChanged_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetUnmutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_LayerMutingChanged_GetStage(usd_LayerMutingChanged_t const* _this, usd_StageWeakPtr_t const** _result) {
    try {
        *_result = &_this->GetStage();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_LayerMutingChanged_ctor_00(usd_StageWeakPtr_t const* stage, std_StringVector_t const* mutedLayers, std_StringVector_t const* unmutedLayers, usd_LayerMutingChanged_t** _result) {
    try {
        *_result = new pxr::UsdNotice::LayerMutingChanged(*stage, *mutedLayers, *unmutedLayers);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_LayerMutingChanged_dtor(usd_LayerMutingChanged_t* _this) {
    delete _this;
    return 0;
}

int usd_Attribute_GetVariability(usd_Attribute_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetVariability(usd_Attribute_t const* _this, unsigned int variability, bool* _result) {
    try {
        *_result = _this->SetVariability(static_cast<pxr::SdfVariability>(variability));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetTypeName(usd_Attribute_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetTypeName(usd_Attribute_t const* _this, sdf_ValueTypeName_t const* typeName, bool* _result) {
    try {
        *_result = _this->SetTypeName(*typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetRoleName(usd_Attribute_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetRoleName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_AddConnection(usd_Attribute_t const* _this, sdf_Path_t const* source, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddConnection(*source, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_RemoveConnection(usd_Attribute_t const* _this, sdf_Path_t const* source, bool* _result) {
    try {
        *_result = _this->RemoveConnection(*source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetConnections(usd_Attribute_t const* _this, sdf_PathVector_t const* sources, bool* _result) {
    try {
        *_result = _this->SetConnections(*sources);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearConnections(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearConnections();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetConnections(usd_Attribute_t const* _this, sdf_PathVector_t* sources, bool* _result) {
    try {
        *_result = _this->GetConnections(sources);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredConnections(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredConnections();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetColorSpace(usd_Attribute_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetColorSpace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetColorSpace(usd_Attribute_t const* _this, tf_Token_t const* colorSpace) {
    try {
        _this->SetColorSpace(*colorSpace);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasColorSpace(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasColorSpace();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearColorSpace(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearColorSpace();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetTimeSamples(usd_Attribute_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetTimeSamplesInInterval(usd_Attribute_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetNumTimeSamples(usd_Attribute_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetNumTimeSamples();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetBracketingTimeSamples(usd_Attribute_t const* _this, double desiredTime, double* lower, double* upper, bool* hasTimeSamples, bool* _result) {
    try {
        *_result = _this->GetBracketingTimeSamples(desiredTime, lower, upper, hasTimeSamples);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasValue(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredValueOpinion(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredValueOpinion();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredValue(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasFallbackValue(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasFallbackValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ValueMightBeTimeVarying(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ValueMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Get(usd_Attribute_t const* _this, vt_Value_t* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Get(value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetResolveInfo_at_time(usd_Attribute_t const* _this, usd_TimeCode_t time, usd_ResolveInfo_t** _result) {
    try {
        *_result = new pxr::UsdResolveInfo(_this->GetResolveInfo(time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetResolveInfo(usd_Attribute_t const* _this, usd_ResolveInfo_t** _result) {
    try {
        *_result = new pxr::UsdResolveInfo(_this->GetResolveInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Set(usd_Attribute_t const* _this, vt_Value_t const* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Set(*value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Clear(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->Clear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearAtTime(usd_Attribute_t const* _this, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->ClearAtTime(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearDefault(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDefault();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Block(usd_Attribute_t const* _this) {
    try {
        _this->Block();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetUnionedTimeSamples(usd_AttributeVector_t const* attrs, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = pxr::UsdAttribute::GetUnionedTimeSamples(*attrs, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetUnionedTimeSamplesInInterval(usd_AttributeVector_t const* attrs, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = pxr::UsdAttribute::GetUnionedTimeSamplesInInterval(*attrs, *interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetPropertyStack(usd_Attribute_t const* _this, usd_TimeCode_t time, sdf_PropertySpecHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandleVector(_this->GetPropertyStack(time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetPropertyStackWithLayerOffsets(usd_Attribute_t const* _this, usd_TimeCode_t time, sdf_PropertySpecHandleOffsetPairVector_t** _result) {
    try {
        *_result = new std::vector<std::pair<pxr::SdfPropertySpecHandle, pxr::SdfLayerOffset>>(_this->GetPropertyStackWithLayerOffsets(time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetBaseName(usd_Attribute_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetNamespace(usd_Attribute_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNamespace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SplitName(usd_Attribute_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->SplitName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetDisplayGroup(usd_Attribute_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetDisplayGroup(usd_Attribute_t const* _this, std_String_t const* displayGroup, bool* _result) {
    try {
        *_result = _this->SetDisplayGroup(*displayGroup);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearDisplayGroup(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredDisplayGroup(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetNestedDisplayGroups(usd_Attribute_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetNestedDisplayGroups());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetNestedDisplayGroups(usd_Attribute_t const* _this, std_StringVector_t const* nestedGroups, bool* _result) {
    try {
        *_result = _this->SetNestedDisplayGroups(*nestedGroups);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_IsCustom(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetCustom(usd_Attribute_t const* _this, bool isCustom, bool* _result) {
    try {
        *_result = _this->SetCustom(isCustom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_IsDefined(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_IsAuthored(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAuthored();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_IsAuthoredAt(usd_Attribute_t const* _this, usd_EditTarget_t const* editTarget, bool* _result) {
    try {
        *_result = _this->IsAuthoredAt(*editTarget);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_FlattenTo_prim(usd_Attribute_t const* _this, usd_Prim_t const* parent, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*parent));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_FlattenTo_named_property(usd_Attribute_t const* _this, usd_Prim_t const* parent, tf_Token_t const* propName, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*parent, *propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_FlattenTo_property(usd_Attribute_t const* _this, usd_Property_t const* property, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*property));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Is_Attribute(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdAttribute>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Is_Relationship(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdRelationship>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Is_Property(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdProperty>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_Is_Prim(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdPrim>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_As_Attribute(usd_Attribute_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->As<PXR_NS::UsdAttribute>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_As_Relationship(usd_Attribute_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->As<PXR_NS::UsdRelationship>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_As_Property(usd_Attribute_t const* _this, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->As<PXR_NS::UsdProperty>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_As_Prim(usd_Attribute_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->As<PXR_NS::UsdPrim>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetMetadata_value(usd_Attribute_t const* _this, tf_Token_t const* key, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadata(*key, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetMetadata_value(usd_Attribute_t const* _this, tf_Token_t const* key, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadata(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearMetadata(usd_Attribute_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->ClearMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasMetadata(usd_Attribute_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredMetadata(usd_Attribute_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetMetadataByDictKey_value(usd_Attribute_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadataByDictKey(*key, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetMetadataByDictKey_value(usd_Attribute_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadataByDictKey(*key, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearMetadataByDictKey(usd_Attribute_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->ClearMetadataByDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasMetadataDictKey(usd_Attribute_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredMetadataDictKey(usd_Attribute_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetAllMetadata(usd_Attribute_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetAllAuthoredMetadata(usd_Attribute_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllAuthoredMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_IsHidden(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetHidden(usd_Attribute_t const* _this, bool hidden, bool* _result) {
    try {
        *_result = _this->SetHidden(hidden);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearHidden(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredHidden(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetCustomData(usd_Attribute_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetCustomDataByKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetCustomDataByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetCustomData(usd_Attribute_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetCustomData(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetCustomDataByKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetCustomDataByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearCustomData(usd_Attribute_t const* _this) {
    try {
        _this->ClearCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearCustomDataByKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearCustomDataByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasCustomData(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasCustomDataKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredCustomData(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredCustomDataKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetAssetInfo(usd_Attribute_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetAssetInfoByKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetAssetInfoByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetAssetInfo(usd_Attribute_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetAssetInfo(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetAssetInfoByKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetAssetInfoByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearAssetInfo(usd_Attribute_t const* _this) {
    try {
        _this->ClearAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearAssetInfoByKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearAssetInfoByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAssetInfo(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAssetInfoKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredAssetInfo(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredAssetInfoKey(usd_Attribute_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetDocumentation(usd_Attribute_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetDocumentation(usd_Attribute_t const* _this, std_String_t const* doc, bool* _result) {
    try {
        *_result = _this->SetDocumentation(*doc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearDocumentation(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredDocumentation(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetDisplayName(usd_Attribute_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_SetDisplayName(usd_Attribute_t const* _this, std_String_t const* name, bool* _result) {
    try {
        *_result = _this->SetDisplayName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_ClearDisplayName(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_HasAuthoredDisplayName(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_IsValid(usd_Attribute_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetStage(usd_Attribute_t const* _this, usd_StageWeakPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageWeakPtr(_this->GetStage());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetPath(usd_Attribute_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetPrimPath(usd_Attribute_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetPrim(usd_Attribute_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetName(usd_Attribute_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_GetDescription(usd_Attribute_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDescription());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_default(usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Attribute_dtor(usd_Attribute_t* _this) {
    delete _this;
    return 0;
}

int usd_AttributeVector_data(usd_AttributeVector_t* _this, usd_Attribute_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_AttributeVector_data_const(usd_AttributeVector_t const* _this, usd_Attribute_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_AttributeVector_empty(usd_AttributeVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_AttributeVector_size(usd_AttributeVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_AttributeVector_max_size(usd_AttributeVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_AttributeVector_capacity(usd_AttributeVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_AttributeVector_clear(usd_AttributeVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_AttributeVector_pop_back(usd_AttributeVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_AttributeVector_op_index(usd_AttributeVector_t const* _this, size_t __n, usd_Attribute_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_AttributeVector_default(usd_AttributeVector_t** _result) {
    *_result = new std::vector<pxr::UsdAttribute>();
    return 0;
}

int usd_AttributeVector_dtor(usd_AttributeVector_t* _this) {
    delete _this;
    return 0;
}

int usd_Object_Is_Attribute(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdAttribute>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_Is_Relationship(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdRelationship>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_Is_Property(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdProperty>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_Is_Prim(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdPrim>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_As_Attribute(usd_Object_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->As<PXR_NS::UsdAttribute>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_As_Relationship(usd_Object_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->As<PXR_NS::UsdRelationship>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_As_Property(usd_Object_t const* _this, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->As<PXR_NS::UsdProperty>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_As_Prim(usd_Object_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->As<PXR_NS::UsdPrim>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetMetadata_value(usd_Object_t const* _this, tf_Token_t const* key, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadata(*key, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetMetadata_value(usd_Object_t const* _this, tf_Token_t const* key, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadata(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearMetadata(usd_Object_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->ClearMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasMetadata(usd_Object_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredMetadata(usd_Object_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetMetadataByDictKey_value(usd_Object_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadataByDictKey(*key, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetMetadataByDictKey_value(usd_Object_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadataByDictKey(*key, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearMetadataByDictKey(usd_Object_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->ClearMetadataByDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasMetadataDictKey(usd_Object_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredMetadataDictKey(usd_Object_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetAllMetadata(usd_Object_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetAllAuthoredMetadata(usd_Object_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllAuthoredMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_IsHidden(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetHidden(usd_Object_t const* _this, bool hidden, bool* _result) {
    try {
        *_result = _this->SetHidden(hidden);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearHidden(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredHidden(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetCustomData(usd_Object_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetCustomDataByKey(usd_Object_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetCustomDataByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetCustomData(usd_Object_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetCustomData(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetCustomDataByKey(usd_Object_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetCustomDataByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearCustomData(usd_Object_t const* _this) {
    try {
        _this->ClearCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearCustomDataByKey(usd_Object_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearCustomDataByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasCustomData(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->HasCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasCustomDataKey(usd_Object_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredCustomData(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredCustomDataKey(usd_Object_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetAssetInfo(usd_Object_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetAssetInfoByKey(usd_Object_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetAssetInfoByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetAssetInfo(usd_Object_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetAssetInfo(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetAssetInfoByKey(usd_Object_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetAssetInfoByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearAssetInfo(usd_Object_t const* _this) {
    try {
        _this->ClearAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearAssetInfoByKey(usd_Object_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearAssetInfoByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAssetInfo(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAssetInfoKey(usd_Object_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredAssetInfo(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredAssetInfoKey(usd_Object_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetDocumentation(usd_Object_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetDocumentation(usd_Object_t const* _this, std_String_t const* doc, bool* _result) {
    try {
        *_result = _this->SetDocumentation(*doc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearDocumentation(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredDocumentation(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetDisplayName(usd_Object_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_SetDisplayName(usd_Object_t const* _this, std_String_t const* name, bool* _result) {
    try {
        *_result = _this->SetDisplayName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_ClearDisplayName(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_HasAuthoredDisplayName(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_IsValid(usd_Object_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetStage(usd_Object_t const* _this, usd_StageWeakPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageWeakPtr(_this->GetStage());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetPath(usd_Object_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetPrimPath(usd_Object_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetPrim(usd_Object_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetName(usd_Object_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetNamespaceDelimiter(char* _result) {
    try {
        *_result = pxr::UsdObject::GetNamespaceDelimiter();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_GetDescription(usd_Object_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDescription());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_default(usd_Object_t** _result) {
    try {
        *_result = new pxr::UsdObject();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Object_dtor(usd_Object_t* _this) {
    delete _this;
    return 0;
}

int usd_ObjectSet_default(usd_ObjectSet_t** _result) {
    *_result = new std::set<pxr::UsdObject>();
    return 0;
}

int usd_ObjectSet_dtor(usd_ObjectSet_t* _this) {
    delete _this;
    return 0;
}

int usd_Prim_GetPrimTypeInfo(usd_Prim_t const* _this, usd_PrimTypeInfo_t const** _result) {
    try {
        *_result = &_this->GetPrimTypeInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrimDefinition(usd_Prim_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = &_this->GetPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetSpecifier(usd_Prim_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecifier());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetSpecifier(usd_Prim_t const* _this, unsigned int specifier, bool* _result) {
    try {
        *_result = _this->SetSpecifier(static_cast<pxr::SdfSpecifier>(specifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrimStack(usd_Prim_t const* _this, sdf_PrimSpecHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfPrimSpecHandleVector(_this->GetPrimStack());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrimStackWithLayerOffsets(usd_Prim_t const* _this, sdf_PrimSpecHandleOffsetPairVector_t** _result) {
    try {
        *_result = new std::vector<std::pair<pxr::SdfPrimSpecHandle, pxr::SdfLayerOffset>>(_this->GetPrimStackWithLayerOffsets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetTypeName(usd_Prim_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetTypeName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetTypeName(usd_Prim_t const* _this, tf_Token_t const* typeName, bool* _result) {
    try {
        *_result = _this->SetTypeName(*typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearTypeName(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearTypeName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredTypeName(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredTypeName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsActive(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetActive(usd_Prim_t const* _this, bool active, bool* _result) {
    try {
        *_result = _this->SetActive(active);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearActive(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredActive(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredActive();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsLoaded(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsLoaded();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsModel(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsModel();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsGroup(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsAbstract(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAbstract();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsDefined(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasDefiningSpecifier(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasDefiningSpecifier();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAppliedSchemas(usd_Prim_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetAppliedSchemas());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPropertyNames(usd_Prim_t const* _this, void (*predicate)(tf_Token_t const* param00, bool* _result), tf_TokenVector_t** _result) {
    try {
        std::function<bool (pxr::TfToken const&)> predicate_wrapper = [&](pxr::TfToken const& param00) {
        bool _result;
        predicate(&param00, &_result);
        return _result;
    };
        *_result = new pxr::TfTokenVector(_this->GetPropertyNames(predicate_wrapper));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAuthoredPropertyNames(usd_Prim_t const* _this, void (*predicate)(tf_Token_t const* param00, bool* _result), tf_TokenVector_t** _result) {
    try {
        std::function<bool (pxr::TfToken const&)> predicate_wrapper = [&](pxr::TfToken const& param00) {
        bool _result;
        predicate(&param00, &_result);
        return _result;
    };
        *_result = new pxr::TfTokenVector(_this->GetAuthoredPropertyNames(predicate_wrapper));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetProperties_matching_predicate(usd_Prim_t const* _this, void (*predicate)(tf_Token_t const* param00, bool* _result), usd_PropertyVector_t** _result) {
    try {
        std::function<bool (pxr::TfToken const&)> predicate_wrapper = [&](pxr::TfToken const& param00) {
        bool _result;
        predicate(&param00, &_result);
        return _result;
    };
        *_result = new std::vector<pxr::UsdProperty>(_this->GetProperties(predicate_wrapper));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAuthoredProperties_matching_predicate(usd_Prim_t const* _this, void (*predicate)(tf_Token_t const* param00, bool* _result), usd_PropertyVector_t** _result) {
    try {
        std::function<bool (pxr::TfToken const&)> predicate_wrapper = [&](pxr::TfToken const& param00) {
        bool _result;
        predicate(&param00, &_result);
        return _result;
    };
        *_result = new std::vector<pxr::UsdProperty>(_this->GetAuthoredProperties(predicate_wrapper));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPropertiesInNamespace(usd_Prim_t const* _this, std_String_t const* namespaces, usd_PropertyVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdProperty>(_this->GetPropertiesInNamespace(*namespaces));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAuthoredPropertiesInNamespace(usd_Prim_t const* _this, std_String_t const* namespaces, usd_PropertyVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdProperty>(_this->GetAuthoredPropertiesInNamespace(*namespaces));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPropertyOrder(usd_Prim_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetPropertyOrder());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetPropertyOrder(usd_Prim_t const* _this, tf_TokenVector_t const* order) {
    try {
        _this->SetPropertyOrder(*order);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearPropertyOrder(usd_Prim_t const* _this) {
    try {
        _this->ClearPropertyOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_RemoveProperty(usd_Prim_t* _this, tf_Token_t const* propName, bool* _result) {
    try {
        *_result = _this->RemoveProperty(*propName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetProperty(usd_Prim_t const* _this, tf_Token_t const* propName, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->GetProperty(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasProperty(usd_Prim_t const* _this, tf_Token_t const* propName, bool* _result) {
    try {
        *_result = _this->HasProperty(*propName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_AddAppliedSchema(usd_Prim_t const* _this, tf_Token_t const* appliedSchemaName, bool* _result) {
    try {
        *_result = _this->AddAppliedSchema(*appliedSchemaName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_RemoveAppliedSchema(usd_Prim_t const* _this, tf_Token_t const* appliedSchemaName, bool* _result) {
    try {
        *_result = _this->RemoveAppliedSchema(*appliedSchemaName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsA(usd_Prim_t const* _this, tf_Token_t const* schemaIdentifier, bool* _result) {
    try {
        *_result = _this->IsA(*schemaIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsA_with_version(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, unsigned int schemaVersion, bool* _result) {
    try {
        *_result = _this->IsA(*schemaFamily, schemaVersion);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInFamily(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, bool* _result) {
    try {
        *_result = _this->IsInFamily(*schemaFamily);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInFamily_with_policy(usd_Prim_t const* _this, tf_Token_t const* schemaIdentifier, int versionPolicy, bool* _result) {
    try {
        *_result = _this->IsInFamily(*schemaIdentifier, static_cast<pxr::UsdSchemaRegistry::VersionPolicy>(versionPolicy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInFamily_with_policy_and_version(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, unsigned int schemaVersion, int versionPolicy, bool* _result) {
    try {
        *_result = _this->IsInFamily(*schemaFamily, schemaVersion, static_cast<pxr::UsdSchemaRegistry::VersionPolicy>(versionPolicy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInFamily_with_type(usd_Prim_t const* _this, tf_Type_t const* schemaType, int versionPolicy, bool* _result) {
    try {
        *_result = _this->IsInFamily(*schemaType, static_cast<pxr::UsdSchemaRegistry::VersionPolicy>(versionPolicy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetVersionIfIsInFamily(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, unsigned int* schemaVersion, bool* _result) {
    try {
        *_result = _this->GetVersionIfIsInFamily(*schemaFamily, schemaVersion);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPI(usd_Prim_t const* _this, tf_Type_t const* schemaType, bool* _result) {
    try {
        *_result = _this->HasAPI(*schemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPI_with_instance_name(usd_Prim_t const* _this, tf_Type_t const* schemaType, tf_Token_t const* instanceName, bool* _result) {
    try {
        *_result = _this->HasAPI(*schemaType, *instanceName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPI_with_schema_identifier(usd_Prim_t const* _this, tf_Token_t const* schemaIdentifier, bool* _result) {
    try {
        *_result = _this->HasAPI(*schemaIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPI_with_instance_name_and_schema_identifier(usd_Prim_t const* _this, tf_Token_t const* schemaIdentifier, tf_Token_t const* instanceName, bool* _result) {
    try {
        *_result = _this->HasAPI(*schemaIdentifier, *instanceName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPIInFamily(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, bool* _result) {
    try {
        *_result = _this->HasAPIInFamily(*schemaFamily);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPIInFamily_with_instance(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, tf_Token_t const* instanceName, bool* _result) {
    try {
        *_result = _this->HasAPIInFamily(*schemaFamily, *instanceName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPIInFamily_with_version(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, unsigned int schemaVersion, int versionPolicy, bool* _result) {
    try {
        *_result = _this->HasAPIInFamily(*schemaFamily, schemaVersion, static_cast<pxr::UsdSchemaRegistry::VersionPolicy>(versionPolicy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAPIInFamily_with_version_and_instance(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, unsigned int schemaVersion, int versionPolicy, tf_Token_t const* instanceName, bool* _result) {
    try {
        *_result = _this->HasAPIInFamily(*schemaFamily, schemaVersion, static_cast<pxr::UsdSchemaRegistry::VersionPolicy>(versionPolicy), *instanceName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetVersionIfHasAPIInFamily(usd_Prim_t const* _this, tf_Token_t const* schemaFamily, tf_Token_t const* instanceName, unsigned int* schemaVersion, bool* _result) {
    try {
        *_result = _this->GetVersionIfHasAPIInFamily(*schemaFamily, *instanceName, schemaVersion);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_CanApplyAPI(usd_Prim_t const* _this, tf_Type_t const* schemaType, std_String_t* whyNot, bool* _result) {
    try {
        *_result = _this->CanApplyAPI(*schemaType, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ApplyAPI(usd_Prim_t const* _this, tf_Type_t const* schemaType, bool* _result) {
    try {
        *_result = _this->ApplyAPI(*schemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_RemoveAPI(usd_Prim_t const* _this, tf_Type_t const* schemaType, bool* _result) {
    try {
        *_result = _this->RemoveAPI(*schemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetChild(usd_Prim_t const* _this, tf_Token_t const* name, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetChild(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetChildren(usd_Prim_t const* _this, usd_PrimSiblingRange_t** _result) {
    try {
        *_result = new pxr::UsdPrimSiblingRange(_this->GetChildren());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAllChildren(usd_Prim_t const* _this, usd_PrimSiblingRange_t** _result) {
    try {
        *_result = new pxr::UsdPrimSiblingRange(_this->GetAllChildren());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetFilteredChildren(usd_Prim_t const* _this, usd_PrimFlagsPredicate_t const* pred, usd_PrimSiblingRange_t** _result) {
    try {
        *_result = new pxr::UsdPrimSiblingRange(_this->GetFilteredChildren(*pred));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetChildrenNames(usd_Prim_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetChildrenNames());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetFilteredChildrenNames(usd_Prim_t const* _this, usd_PrimFlagsPredicate_t const* predicate, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetFilteredChildrenNames(*predicate));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetDescendants(usd_Prim_t const* _this, usd_PrimSubtreeRange_t** _result) {
    try {
        *_result = new pxr::UsdPrimSubtreeRange(_this->GetDescendants());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAllDescendants(usd_Prim_t const* _this, usd_PrimSubtreeRange_t** _result) {
    try {
        *_result = new pxr::UsdPrimSubtreeRange(_this->GetAllDescendants());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetFilteredDescendants(usd_Prim_t const* _this, usd_PrimFlagsPredicate_t const* pred, usd_PrimSubtreeRange_t** _result) {
    try {
        *_result = new pxr::UsdPrimSubtreeRange(_this->GetFilteredDescendants(*pred));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetChildrenReorder(usd_Prim_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->GetChildrenReorder());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetChildrenReorder(usd_Prim_t const* _this, tf_TokenVector_t const* order) {
    try {
        _this->SetChildrenReorder(*order);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearChildrenReorder(usd_Prim_t const* _this) {
    try {
        _this->ClearChildrenReorder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetParent(usd_Prim_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetParent());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetNextSibling(usd_Prim_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetNextSibling());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetFilteredNextSibling(usd_Prim_t const* _this, usd_PrimFlagsPredicate_t const* predicate, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetFilteredNextSibling(*predicate));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsPseudoRoot(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPseudoRoot();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrimAtPath(usd_Prim_t const* _this, sdf_Path_t const* path, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetObjectAtPath(usd_Prim_t const* _this, sdf_Path_t const* path, usd_Object_t** _result) {
    try {
        *_result = new pxr::UsdObject(_this->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPropertyAtPath(usd_Prim_t const* _this, sdf_Path_t const* path, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAttributeAtPath(usd_Prim_t const* _this, sdf_Path_t const* path, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetRelationshipAtPath(usd_Prim_t const* _this, sdf_Path_t const* path, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetVariantSets(usd_Prim_t const* _this, usd_UsdVariantSets_t** _result) {
    try {
        *_result = new pxr::UsdVariantSets(_this->GetVariantSets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetVariantSet(usd_Prim_t const* _this, std_String_t const* variantSetName, usd_UsdVariantSet_t** _result) {
    try {
        *_result = new pxr::UsdVariantSet(_this->GetVariantSet(*variantSetName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasVariantSets(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasVariantSets();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_CreateAttribute(usd_Prim_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, bool custom, unsigned int variability, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAttribute(*name, *typeName, custom, static_cast<pxr::SdfVariability>(variability)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAttributes(usd_Prim_t const* _this, usd_AttributeVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdAttribute>(_this->GetAttributes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAuthoredAttributes(usd_Prim_t const* _this, usd_AttributeVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdAttribute>(_this->GetAuthoredAttributes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAttribute(usd_Prim_t const* _this, tf_Token_t const* attrName, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAttribute(*attrName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAttribute(usd_Prim_t const* _this, tf_Token_t const* attrName, bool* _result) {
    try {
        *_result = _this->HasAttribute(*attrName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_FindAllAttributeConnectionPaths(usd_Prim_t const* _this, void (*pred)(usd_Attribute_t const* param00, bool* _result), bool recurseOnSources, sdf_PathVector_t** _result) {
    try {
        std::function<bool (pxr::UsdAttribute const&)> pred_wrapper = [&](pxr::UsdAttribute const& param00) {
        bool _result;
        pred(&param00, &_result);
        return _result;
    };
        *_result = new pxr::SdfPathVector(_this->FindAllAttributeConnectionPaths(pred_wrapper, recurseOnSources));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_CreateRelationship(usd_Prim_t const* _this, tf_Token_t const* relName, bool custom, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateRelationship(*relName, custom));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetRelationships(usd_Prim_t const* _this, usd_RelationshipVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdRelationship>(_this->GetRelationships());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAuthoredRelationships(usd_Prim_t const* _this, usd_RelationshipVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdRelationship>(_this->GetAuthoredRelationships());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetRelationship(usd_Prim_t const* _this, tf_Token_t const* relName, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetRelationship(*relName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasRelationship(usd_Prim_t const* _this, tf_Token_t const* relName, bool* _result) {
    try {
        *_result = _this->HasRelationship(*relName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_FindAllRelationshipTargetPaths(usd_Prim_t const* _this, void (*pred)(usd_Relationship_t const* param00, bool* _result), bool recurseOnTargets, sdf_PathVector_t** _result) {
    try {
        std::function<bool (pxr::UsdRelationship const&)> pred_wrapper = [&](pxr::UsdRelationship const& param00) {
        bool _result;
        pred(&param00, &_result);
        return _result;
    };
        *_result = new pxr::SdfPathVector(_this->FindAllRelationshipTargetPaths(pred_wrapper, recurseOnTargets));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPayloads(usd_Prim_t const* _this, usd_Payloads_t** _result) {
    try {
        *_result = new pxr::UsdPayloads(_this->GetPayloads());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredPayloads(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredPayloads();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_Load(usd_Prim_t const* _this, unsigned int policy) {
    try {
        _this->Load(static_cast<pxr::UsdLoadPolicy>(policy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_Unload(usd_Prim_t const* _this) {
    try {
        _this->Unload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetReferences(usd_Prim_t const* _this, usd_References_t** _result) {
    try {
        *_result = new pxr::UsdReferences(_this->GetReferences());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredReferences(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredReferences();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetInherits(usd_Prim_t const* _this, usd_Inherits_t** _result) {
    try {
        *_result = new pxr::UsdInherits(_this->GetInherits());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredInherits(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredInherits();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetSpecializes(usd_Prim_t const* _this, usd_Specializes_t** _result) {
    try {
        *_result = new pxr::UsdSpecializes(_this->GetSpecializes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredSpecializes(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredSpecializes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInstanceable(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetInstanceable(usd_Prim_t const* _this, bool instanceable, bool* _result) {
    try {
        *_result = _this->SetInstanceable(instanceable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearInstanceable(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredInstanceable(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredInstanceable();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInstance(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInstance();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInstanceProxy(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInstanceProxy();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsPrototypePath(sdf_Path_t const* path, bool* _result) {
    try {
        *_result = pxr::UsdPrim::IsPrototypePath(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsPathInPrototype(sdf_Path_t const* path, bool* _result) {
    try {
        *_result = pxr::UsdPrim::IsPathInPrototype(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsPrototype(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsPrototype();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsInPrototype(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInPrototype();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrototype(usd_Prim_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrototype());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrimInPrototype(usd_Prim_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrimInPrototype());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetInstances(usd_Prim_t const* _this, usd_PrimVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdPrim>(_this->GetInstances());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrimIndex(usd_Prim_t const* _this, pcp_PrimIndex_t const** _result) {
    try {
        *_result = &_this->GetPrimIndex();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ComputeExpandedPrimIndex(usd_Prim_t const* _this, pcp_PrimIndex_t** _result) {
    try {
        *_result = new pxr::PcpPrimIndex(_this->ComputeExpandedPrimIndex());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_MakeResolveTargetUpToEditTarget(usd_Prim_t const* _this, usd_EditTarget_t const* editTarget, usd_ResolveTarget_t** _result) {
    try {
        *_result = new pxr::UsdResolveTarget(_this->MakeResolveTargetUpToEditTarget(*editTarget));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_MakeResolveTargetStrongerThanEditTarget(usd_Prim_t const* _this, usd_EditTarget_t const* editTarget, usd_ResolveTarget_t** _result) {
    try {
        *_result = new pxr::UsdResolveTarget(_this->MakeResolveTargetStrongerThanEditTarget(*editTarget));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_Is_Attribute(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdAttribute>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_Is_Relationship(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdRelationship>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_Is_Property(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdProperty>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_Is_Prim(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdPrim>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_As_Attribute(usd_Prim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->As<PXR_NS::UsdAttribute>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_As_Relationship(usd_Prim_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->As<PXR_NS::UsdRelationship>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_As_Property(usd_Prim_t const* _this, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->As<PXR_NS::UsdProperty>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_As_Prim(usd_Prim_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->As<PXR_NS::UsdPrim>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetMetadata_value(usd_Prim_t const* _this, tf_Token_t const* key, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadata(*key, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetMetadata_value(usd_Prim_t const* _this, tf_Token_t const* key, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadata(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearMetadata(usd_Prim_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->ClearMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasMetadata(usd_Prim_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredMetadata(usd_Prim_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetMetadataByDictKey_value(usd_Prim_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadataByDictKey(*key, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetMetadataByDictKey_value(usd_Prim_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadataByDictKey(*key, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearMetadataByDictKey(usd_Prim_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->ClearMetadataByDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasMetadataDictKey(usd_Prim_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredMetadataDictKey(usd_Prim_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAllMetadata(usd_Prim_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAllAuthoredMetadata(usd_Prim_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllAuthoredMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsHidden(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetHidden(usd_Prim_t const* _this, bool hidden, bool* _result) {
    try {
        *_result = _this->SetHidden(hidden);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearHidden(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredHidden(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetCustomData(usd_Prim_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetCustomDataByKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetCustomDataByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetCustomData(usd_Prim_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetCustomData(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetCustomDataByKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetCustomDataByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearCustomData(usd_Prim_t const* _this) {
    try {
        _this->ClearCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearCustomDataByKey(usd_Prim_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearCustomDataByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasCustomData(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasCustomDataKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredCustomData(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredCustomDataKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAssetInfo(usd_Prim_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAssetInfoByKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetAssetInfoByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetAssetInfo(usd_Prim_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetAssetInfo(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetAssetInfoByKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetAssetInfoByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearAssetInfo(usd_Prim_t const* _this) {
    try {
        _this->ClearAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearAssetInfoByKey(usd_Prim_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearAssetInfoByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAssetInfo(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAssetInfoKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredAssetInfo(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredAssetInfoKey(usd_Prim_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetDocumentation(usd_Prim_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetDocumentation(usd_Prim_t const* _this, std_String_t const* doc, bool* _result) {
    try {
        *_result = _this->SetDocumentation(*doc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearDocumentation(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredDocumentation(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetDisplayName(usd_Prim_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_SetDisplayName(usd_Prim_t const* _this, std_String_t const* name, bool* _result) {
    try {
        *_result = _this->SetDisplayName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_ClearDisplayName(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_HasAuthoredDisplayName(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_IsValid(usd_Prim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetStage(usd_Prim_t const* _this, usd_StageWeakPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageWeakPtr(_this->GetStage());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPath(usd_Prim_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrimPath(usd_Prim_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetPrim(usd_Prim_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetName(usd_Prim_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetDescription(usd_Prim_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDescription());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_default(usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_dtor(usd_Prim_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimTypeInfo_GetTypeName(usd_PrimTypeInfo_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetTypeName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimTypeInfo_GetAppliedAPISchemas(usd_PrimTypeInfo_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetAppliedAPISchemas();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimTypeInfo_GetSchemaType(usd_PrimTypeInfo_t const* _this, tf_Type_t const** _result) {
    try {
        *_result = &_this->GetSchemaType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimTypeInfo_GetSchemaTypeName(usd_PrimTypeInfo_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetSchemaTypeName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimTypeInfo_GetPrimDefinition(usd_PrimTypeInfo_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = &_this->GetPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimTypeInfo_GetEmptyPrimType(usd_PrimTypeInfo_t const** _result) {
    try {
        *_result = &pxr::UsdPrimTypeInfo::GetEmptyPrimType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimTypeInfo_dtor(usd_PrimTypeInfo_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimVector_data(usd_PrimVector_t* _this, usd_Prim_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PrimVector_data_const(usd_PrimVector_t const* _this, usd_Prim_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PrimVector_empty(usd_PrimVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_PrimVector_size(usd_PrimVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_PrimVector_max_size(usd_PrimVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_PrimVector_capacity(usd_PrimVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_PrimVector_clear(usd_PrimVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_PrimVector_pop_back(usd_PrimVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_PrimVector_op_index(usd_PrimVector_t const* _this, size_t __n, usd_Prim_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_PrimVector_default(usd_PrimVector_t** _result) {
    *_result = new std::vector<pxr::UsdPrim>();
    return 0;
}

int usd_PrimVector_dtor(usd_PrimVector_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimFlagsPredicate_dtor(usd_PrimFlagsPredicate_t* _this) {
    delete _this;
    return 0;
}

int usd_Property_GetPropertyStack(usd_Property_t const* _this, usd_TimeCode_t time, sdf_PropertySpecHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandleVector(_this->GetPropertyStack(time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetPropertyStackWithLayerOffsets(usd_Property_t const* _this, usd_TimeCode_t time, sdf_PropertySpecHandleOffsetPairVector_t** _result) {
    try {
        *_result = new std::vector<std::pair<pxr::SdfPropertySpecHandle, pxr::SdfLayerOffset>>(_this->GetPropertyStackWithLayerOffsets(time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetBaseName(usd_Property_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetNamespace(usd_Property_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNamespace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SplitName(usd_Property_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->SplitName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetDisplayGroup(usd_Property_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetDisplayGroup(usd_Property_t const* _this, std_String_t const* displayGroup, bool* _result) {
    try {
        *_result = _this->SetDisplayGroup(*displayGroup);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearDisplayGroup(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredDisplayGroup(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetNestedDisplayGroups(usd_Property_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetNestedDisplayGroups());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetNestedDisplayGroups(usd_Property_t const* _this, std_StringVector_t const* nestedGroups, bool* _result) {
    try {
        *_result = _this->SetNestedDisplayGroups(*nestedGroups);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_IsCustom(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetCustom(usd_Property_t const* _this, bool isCustom, bool* _result) {
    try {
        *_result = _this->SetCustom(isCustom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_IsDefined(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_IsAuthored(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAuthored();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_IsAuthoredAt(usd_Property_t const* _this, usd_EditTarget_t const* editTarget, bool* _result) {
    try {
        *_result = _this->IsAuthoredAt(*editTarget);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_FlattenTo_prim(usd_Property_t const* _this, usd_Prim_t const* parent, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*parent));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_FlattenTo_named_property(usd_Property_t const* _this, usd_Prim_t const* parent, tf_Token_t const* propName, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*parent, *propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_FlattenTo_property(usd_Property_t const* _this, usd_Property_t const* property, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*property));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_Is_Attribute(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdAttribute>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_Is_Relationship(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdRelationship>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_Is_Property(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdProperty>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_Is_Prim(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdPrim>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_As_Attribute(usd_Property_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->As<PXR_NS::UsdAttribute>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_As_Relationship(usd_Property_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->As<PXR_NS::UsdRelationship>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_As_Property(usd_Property_t const* _this, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->As<PXR_NS::UsdProperty>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_As_Prim(usd_Property_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->As<PXR_NS::UsdPrim>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetMetadata_value(usd_Property_t const* _this, tf_Token_t const* key, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadata(*key, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetMetadata_value(usd_Property_t const* _this, tf_Token_t const* key, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadata(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearMetadata(usd_Property_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->ClearMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasMetadata(usd_Property_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredMetadata(usd_Property_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetMetadataByDictKey_value(usd_Property_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadataByDictKey(*key, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetMetadataByDictKey_value(usd_Property_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadataByDictKey(*key, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearMetadataByDictKey(usd_Property_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->ClearMetadataByDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasMetadataDictKey(usd_Property_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredMetadataDictKey(usd_Property_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetAllMetadata(usd_Property_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetAllAuthoredMetadata(usd_Property_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllAuthoredMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_IsHidden(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetHidden(usd_Property_t const* _this, bool hidden, bool* _result) {
    try {
        *_result = _this->SetHidden(hidden);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearHidden(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredHidden(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetCustomData(usd_Property_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetCustomDataByKey(usd_Property_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetCustomDataByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetCustomData(usd_Property_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetCustomData(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetCustomDataByKey(usd_Property_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetCustomDataByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearCustomData(usd_Property_t const* _this) {
    try {
        _this->ClearCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearCustomDataByKey(usd_Property_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearCustomDataByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasCustomData(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasCustomDataKey(usd_Property_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredCustomData(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredCustomDataKey(usd_Property_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetAssetInfo(usd_Property_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetAssetInfoByKey(usd_Property_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetAssetInfoByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetAssetInfo(usd_Property_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetAssetInfo(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetAssetInfoByKey(usd_Property_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetAssetInfoByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearAssetInfo(usd_Property_t const* _this) {
    try {
        _this->ClearAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearAssetInfoByKey(usd_Property_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearAssetInfoByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAssetInfo(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAssetInfoKey(usd_Property_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredAssetInfo(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredAssetInfoKey(usd_Property_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetDocumentation(usd_Property_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetDocumentation(usd_Property_t const* _this, std_String_t const* doc, bool* _result) {
    try {
        *_result = _this->SetDocumentation(*doc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearDocumentation(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredDocumentation(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetDisplayName(usd_Property_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_SetDisplayName(usd_Property_t const* _this, std_String_t const* name, bool* _result) {
    try {
        *_result = _this->SetDisplayName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_ClearDisplayName(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_HasAuthoredDisplayName(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_IsValid(usd_Property_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetStage(usd_Property_t const* _this, usd_StageWeakPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageWeakPtr(_this->GetStage());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetPath(usd_Property_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetPrimPath(usd_Property_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetPrim(usd_Property_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetName(usd_Property_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_GetDescription(usd_Property_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDescription());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_default(usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Property_dtor(usd_Property_t* _this) {
    delete _this;
    return 0;
}

int usd_PropertyVector_data(usd_PropertyVector_t* _this, usd_Property_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PropertyVector_data_const(usd_PropertyVector_t const* _this, usd_Property_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PropertyVector_empty(usd_PropertyVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_PropertyVector_size(usd_PropertyVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_PropertyVector_max_size(usd_PropertyVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_PropertyVector_capacity(usd_PropertyVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_PropertyVector_clear(usd_PropertyVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_PropertyVector_pop_back(usd_PropertyVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_PropertyVector_op_index(usd_PropertyVector_t const* _this, size_t __n, usd_Property_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_PropertyVector_default(usd_PropertyVector_t** _result) {
    *_result = new std::vector<pxr::UsdProperty>();
    return 0;
}

int usd_PropertyVector_dtor(usd_PropertyVector_t* _this) {
    delete _this;
    return 0;
}

int usd_Relationship_AddTarget(usd_Relationship_t const* _this, sdf_Path_t const* target, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddTarget(*target, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_RemoveTarget(usd_Relationship_t const* _this, sdf_Path_t const* target, bool* _result) {
    try {
        *_result = _this->RemoveTarget(*target);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetTargets(usd_Relationship_t const* _this, sdf_PathVector_t const* targets, bool* _result) {
    try {
        *_result = _this->SetTargets(*targets);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearTargets(usd_Relationship_t const* _this, bool removeSpec, bool* _result) {
    try {
        *_result = _this->ClearTargets(removeSpec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetTargets(usd_Relationship_t const* _this, sdf_PathVector_t* targets, bool* _result) {
    try {
        *_result = _this->GetTargets(targets);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetForwardedTargets(usd_Relationship_t const* _this, sdf_PathVector_t* targets, bool* _result) {
    try {
        *_result = _this->GetForwardedTargets(targets);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredTargets(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredTargets();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetPropertyStack(usd_Relationship_t const* _this, usd_TimeCode_t time, sdf_PropertySpecHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandleVector(_this->GetPropertyStack(time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetPropertyStackWithLayerOffsets(usd_Relationship_t const* _this, usd_TimeCode_t time, sdf_PropertySpecHandleOffsetPairVector_t** _result) {
    try {
        *_result = new std::vector<std::pair<pxr::SdfPropertySpecHandle, pxr::SdfLayerOffset>>(_this->GetPropertyStackWithLayerOffsets(time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetBaseName(usd_Relationship_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetNamespace(usd_Relationship_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNamespace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SplitName(usd_Relationship_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->SplitName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetDisplayGroup(usd_Relationship_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetDisplayGroup(usd_Relationship_t const* _this, std_String_t const* displayGroup, bool* _result) {
    try {
        *_result = _this->SetDisplayGroup(*displayGroup);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearDisplayGroup(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredDisplayGroup(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayGroup();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetNestedDisplayGroups(usd_Relationship_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetNestedDisplayGroups());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetNestedDisplayGroups(usd_Relationship_t const* _this, std_StringVector_t const* nestedGroups, bool* _result) {
    try {
        *_result = _this->SetNestedDisplayGroups(*nestedGroups);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_IsCustom(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->IsCustom();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetCustom(usd_Relationship_t const* _this, bool isCustom, bool* _result) {
    try {
        *_result = _this->SetCustom(isCustom);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_IsDefined(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_IsAuthored(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAuthored();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_IsAuthoredAt(usd_Relationship_t const* _this, usd_EditTarget_t const* editTarget, bool* _result) {
    try {
        *_result = _this->IsAuthoredAt(*editTarget);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_FlattenTo_prim(usd_Relationship_t const* _this, usd_Prim_t const* parent, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*parent));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_FlattenTo_named_property(usd_Relationship_t const* _this, usd_Prim_t const* parent, tf_Token_t const* propName, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*parent, *propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_FlattenTo_property(usd_Relationship_t const* _this, usd_Property_t const* property, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->FlattenTo(*property));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_Is_Attribute(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdAttribute>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_Is_Relationship(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdRelationship>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_Is_Property(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdProperty>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_Is_Prim(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->Is<PXR_NS::UsdPrim>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_As_Attribute(usd_Relationship_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->As<PXR_NS::UsdAttribute>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_As_Relationship(usd_Relationship_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->As<PXR_NS::UsdRelationship>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_As_Property(usd_Relationship_t const* _this, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->As<PXR_NS::UsdProperty>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_As_Prim(usd_Relationship_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->As<PXR_NS::UsdPrim>());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetMetadata_value(usd_Relationship_t const* _this, tf_Token_t const* key, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadata(*key, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetMetadata_value(usd_Relationship_t const* _this, tf_Token_t const* key, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadata(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearMetadata(usd_Relationship_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->ClearMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasMetadata(usd_Relationship_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredMetadata(usd_Relationship_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetMetadataByDictKey_value(usd_Relationship_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadataByDictKey(*key, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetMetadataByDictKey_value(usd_Relationship_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadataByDictKey(*key, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearMetadataByDictKey(usd_Relationship_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->ClearMetadataByDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasMetadataDictKey(usd_Relationship_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredMetadataDictKey(usd_Relationship_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetAllMetadata(usd_Relationship_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetAllAuthoredMetadata(usd_Relationship_t const* _this, usd_MetadataValueMap_t** _result) {
    try {
        *_result = new pxr::UsdMetadataValueMap(_this->GetAllAuthoredMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_IsHidden(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetHidden(usd_Relationship_t const* _this, bool hidden, bool* _result) {
    try {
        *_result = _this->SetHidden(hidden);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearHidden(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredHidden(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredHidden();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetCustomData(usd_Relationship_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetCustomData());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetCustomDataByKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetCustomDataByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetCustomData(usd_Relationship_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetCustomData(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetCustomDataByKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetCustomDataByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearCustomData(usd_Relationship_t const* _this) {
    try {
        _this->ClearCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearCustomDataByKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearCustomDataByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasCustomData(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasCustomDataKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredCustomData(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomData();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredCustomDataKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredCustomDataKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetAssetInfo(usd_Relationship_t const* _this, vt_Dictionary_t** _result) {
    try {
        *_result = new pxr::VtDictionary(_this->GetAssetInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetAssetInfoByKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(_this->GetAssetInfoByKey(*keyPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetAssetInfo(usd_Relationship_t const* _this, vt_Dictionary_t const* customData) {
    try {
        _this->SetAssetInfo(*customData);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetAssetInfoByKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, vt_Value_t const* value) {
    try {
        _this->SetAssetInfoByKey(*keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearAssetInfo(usd_Relationship_t const* _this) {
    try {
        _this->ClearAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearAssetInfoByKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath) {
    try {
        _this->ClearAssetInfoByKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAssetInfo(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAssetInfoKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredAssetInfo(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredAssetInfoKey(usd_Relationship_t const* _this, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredAssetInfoKey(*keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetDocumentation(usd_Relationship_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetDocumentation(usd_Relationship_t const* _this, std_String_t const* doc, bool* _result) {
    try {
        *_result = _this->SetDocumentation(*doc);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearDocumentation(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredDocumentation(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDocumentation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetDisplayName(usd_Relationship_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_SetDisplayName(usd_Relationship_t const* _this, std_String_t const* name, bool* _result) {
    try {
        *_result = _this->SetDisplayName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_ClearDisplayName(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_HasAuthoredDisplayName(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredDisplayName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_IsValid(usd_Relationship_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetStage(usd_Relationship_t const* _this, usd_StageWeakPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageWeakPtr(_this->GetStage());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetPath(usd_Relationship_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetPrimPath(usd_Relationship_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetPrimPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetPrim(usd_Relationship_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetName(usd_Relationship_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_GetDescription(usd_Relationship_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDescription());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_default(usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Relationship_dtor(usd_Relationship_t* _this) {
    delete _this;
    return 0;
}

int usd_RelationshipVector_data(usd_RelationshipVector_t* _this, usd_Relationship_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_RelationshipVector_data_const(usd_RelationshipVector_t const* _this, usd_Relationship_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_RelationshipVector_empty(usd_RelationshipVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_RelationshipVector_size(usd_RelationshipVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_RelationshipVector_max_size(usd_RelationshipVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_RelationshipVector_capacity(usd_RelationshipVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_RelationshipVector_clear(usd_RelationshipVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_RelationshipVector_pop_back(usd_RelationshipVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_RelationshipVector_op_index(usd_RelationshipVector_t const* _this, size_t __n, usd_Relationship_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_RelationshipVector_default(usd_RelationshipVector_t** _result) {
    *_result = new std::vector<pxr::UsdRelationship>();
    return 0;
}

int usd_RelationshipVector_dtor(usd_RelationshipVector_t* _this) {
    delete _this;
    return 0;
}

int usd_Payloads_AddPayload(usd_Payloads_t* _this, sdf_Payload_t const* payload, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddPayload(*payload, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_AddPayload_with_identifier_and_path(usd_Payloads_t* _this, std_String_t const* identifier, sdf_Path_t const* primPath, sdf_LayerOffset_t const* layerOffset, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddPayload(*identifier, *primPath, *layerOffset, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_AddPayload_with_identifier(usd_Payloads_t* _this, std_String_t const* identifier, sdf_LayerOffset_t const* layerOffset, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddPayload(*identifier, *layerOffset, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_AddInternalPayload(usd_Payloads_t* _this, sdf_Path_t const* primPath, sdf_LayerOffset_t const* layerOffset, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddInternalPayload(*primPath, *layerOffset, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_RemovePayload(usd_Payloads_t* _this, sdf_Payload_t const* ref, bool* _result) {
    try {
        *_result = _this->RemovePayload(*ref);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_ClearPayloads(usd_Payloads_t* _this, bool* _result) {
    try {
        *_result = _this->ClearPayloads();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_SetPayloads(usd_Payloads_t* _this, sdf_PayloadVector_t const* items, bool* _result) {
    try {
        *_result = _this->SetPayloads(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_GetPrim(usd_Payloads_t const* _this, usd_Prim_t const** _result) {
    try {
        *_result = &_this->GetPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_op_bool(usd_Payloads_t* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Payloads_dtor(usd_Payloads_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimCompositionQuery_SetFilter(usd_PrimCompositionQuery_t* _this, usd_PrimCompositionQueryFilter_t const* filter) {
    try {
        _this->SetFilter(*filter);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQuery_GetFilter(usd_PrimCompositionQuery_t const* _this, usd_PrimCompositionQueryFilter_t* _result) {
    try {
        *_result = _this->GetFilter();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQuery_GetCompositionArcs(usd_PrimCompositionQuery_t* _this, usd_PrimCompositionQueryArcVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdPrimCompositionQueryArc>(_this->GetCompositionArcs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQuery_GetDirectInherits(usd_Prim_t const* prim, usd_PrimCompositionQuery_t** _result) {
    try {
        *_result = new pxr::UsdPrimCompositionQuery(pxr::UsdPrimCompositionQuery::GetDirectInherits(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQuery_GetDirectReferences(usd_Prim_t const* prim, usd_PrimCompositionQuery_t** _result) {
    try {
        *_result = new pxr::UsdPrimCompositionQuery(pxr::UsdPrimCompositionQuery::GetDirectReferences(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQuery_GetDirectRootLayerArcs(usd_Prim_t const* prim, usd_PrimCompositionQuery_t** _result) {
    try {
        *_result = new pxr::UsdPrimCompositionQuery(pxr::UsdPrimCompositionQuery::GetDirectRootLayerArcs(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQuery_ctor(usd_Prim_t const* prim, usd_PrimCompositionQueryFilter_t const* filter, usd_PrimCompositionQuery_t** _result) {
    try {
        *_result = new pxr::UsdPrimCompositionQuery(*prim, *filter);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQuery_dtor(usd_PrimCompositionQuery_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimCompositionQueryArc_GetTargetNode(usd_PrimCompositionQueryArc_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetTargetNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetIntroducingNode(usd_PrimCompositionQueryArc_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetIntroducingNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetTargetLayer(usd_PrimCompositionQueryArc_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetTargetLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetTargetPrimPath(usd_PrimCompositionQueryArc_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetTargetPrimPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_MakeResolveTargetUpTo(usd_PrimCompositionQueryArc_t const* _this, sdf_LayerHandle_t const* subLayer, usd_ResolveTarget_t** _result) {
    try {
        *_result = new pxr::UsdResolveTarget(_this->MakeResolveTargetUpTo(*subLayer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_MakeResolveTargetStrongerThan(usd_PrimCompositionQueryArc_t const* _this, sdf_LayerHandle_t const* subLayer, usd_ResolveTarget_t** _result) {
    try {
        *_result = new pxr::UsdResolveTarget(_this->MakeResolveTargetStrongerThan(*subLayer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetIntroducingLayer(usd_PrimCompositionQueryArc_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetIntroducingLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetIntroducingPrimPath(usd_PrimCompositionQueryArc_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetIntroducingPrimPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetIntroducingListEditor_reference(usd_PrimCompositionQueryArc_t const* _this, sdf_ReferenceEditorProxy_t* editor, sdf_Reference_t* ref, bool* _result) {
    try {
        *_result = _this->GetIntroducingListEditor(editor, ref);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetIntroducingListEditor_payload(usd_PrimCompositionQueryArc_t const* _this, sdf_PayloadEditorProxy_t* editor, sdf_Payload_t* payload, bool* _result) {
    try {
        *_result = _this->GetIntroducingListEditor(editor, payload);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetIntroducingListEditor_path(usd_PrimCompositionQueryArc_t const* _this, sdf_PathEditorProxy_t* editor, sdf_Path_t* path, bool* _result) {
    try {
        *_result = _this->GetIntroducingListEditor(editor, path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetIntroducingListEditor_name(usd_PrimCompositionQueryArc_t const* _this, sdf_NameEditorProxy_t* editor, std_String_t* name, bool* _result) {
    try {
        *_result = _this->GetIntroducingListEditor(editor, name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_GetArcType(usd_PrimCompositionQueryArc_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetArcType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_IsImplicit(usd_PrimCompositionQueryArc_t const* _this, bool* _result) {
    try {
        *_result = _this->IsImplicit();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_IsAncestral(usd_PrimCompositionQueryArc_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAncestral();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_HasSpecs(usd_PrimCompositionQueryArc_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSpecs();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_IsIntroducedInRootLayerStack(usd_PrimCompositionQueryArc_t const* _this, bool* _result) {
    try {
        *_result = _this->IsIntroducedInRootLayerStack();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_IsIntroducedInRootLayerPrimSpec(usd_PrimCompositionQueryArc_t const* _this, bool* _result) {
    try {
        *_result = _this->IsIntroducedInRootLayerPrimSpec();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimCompositionQueryArc_dtor(usd_PrimCompositionQueryArc_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimCompositionQueryArcVector_data(usd_PrimCompositionQueryArcVector_t* _this, usd_PrimCompositionQueryArc_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PrimCompositionQueryArcVector_data_const(usd_PrimCompositionQueryArcVector_t const* _this, usd_PrimCompositionQueryArc_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PrimCompositionQueryArcVector_empty(usd_PrimCompositionQueryArcVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_PrimCompositionQueryArcVector_size(usd_PrimCompositionQueryArcVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_PrimCompositionQueryArcVector_max_size(usd_PrimCompositionQueryArcVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_PrimCompositionQueryArcVector_capacity(usd_PrimCompositionQueryArcVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_PrimCompositionQueryArcVector_clear(usd_PrimCompositionQueryArcVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_PrimCompositionQueryArcVector_pop_back(usd_PrimCompositionQueryArcVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_PrimCompositionQueryArcVector_op_index(usd_PrimCompositionQueryArcVector_t const* _this, size_t __n, usd_PrimCompositionQueryArc_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_PrimCompositionQueryArcVector_default(usd_PrimCompositionQueryArcVector_t** _result) {
    *_result = new std::vector<pxr::UsdPrimCompositionQueryArc>();
    return 0;
}

int usd_PrimCompositionQueryArcVector_dtor(usd_PrimCompositionQueryArcVector_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimDefinition_GetPropertyNames(usd_PrimDefinition_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetPropertyNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetAppliedAPISchemas(usd_PrimDefinition_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetAppliedAPISchemas();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetPropertyDefinition(usd_PrimDefinition_t const* _this, tf_Token_t const* propName, usd_PrimDefinitionProperty_t** _result) {
    try {
        *_result = new pxr::UsdPrimDefinition::Property(_this->GetPropertyDefinition(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetAttributeDefinition(usd_PrimDefinition_t const* _this, tf_Token_t const* attrName, usd_PrimDefinitionAttribute_t** _result) {
    try {
        *_result = new pxr::UsdPrimDefinition::Attribute(_this->GetAttributeDefinition(*attrName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetRelationshipDefinition(usd_PrimDefinition_t const* _this, tf_Token_t const* relName, usd_PrimDefinitionRelationship_t** _result) {
    try {
        *_result = new pxr::UsdPrimDefinition::Relationship(_this->GetRelationshipDefinition(*relName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetSpecType(usd_PrimDefinition_t const* _this, tf_Token_t const* propName, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetSchemaPropertySpec(usd_PrimDefinition_t const* _this, tf_Token_t const* propName, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle(_this->GetSchemaPropertySpec(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetSchemaAttributeSpec(usd_PrimDefinition_t const* _this, tf_Token_t const* attrName, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle(_this->GetSchemaAttributeSpec(*attrName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetSchemaRelationshipSpec(usd_PrimDefinition_t const* _this, tf_Token_t const* relName, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle(_this->GetSchemaRelationshipSpec(*relName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_ListMetadataFields(usd_PrimDefinition_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListMetadataFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetDocumentation(usd_PrimDefinition_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_ListPropertyMetadataFields(usd_PrimDefinition_t const* _this, tf_Token_t const* propName, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListPropertyMetadataFields(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_GetPropertyDocumentation(usd_PrimDefinition_t const* _this, tf_Token_t const* propName, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetPropertyDocumentation(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_FlattenTo(usd_PrimDefinition_t const* _this, sdf_LayerHandle_t const* layer, sdf_Path_t const* path, unsigned int newSpecSpecifier, bool* _result) {
    try {
        *_result = _this->FlattenTo(*layer, *path, static_cast<pxr::SdfSpecifier>(newSpecSpecifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_FlattenTo_prim_under_parent(usd_PrimDefinition_t const* _this, usd_Prim_t const* parent, tf_Token_t const* name, unsigned int newSpecSpecifier, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->FlattenTo(*parent, *name, static_cast<pxr::SdfSpecifier>(newSpecSpecifier)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_FlattenTo_prim(usd_PrimDefinition_t const* _this, usd_Prim_t const* prim, unsigned int newSpecSpecifier, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->FlattenTo(*prim, static_cast<pxr::SdfSpecifier>(newSpecSpecifier)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinition_dtor(usd_PrimDefinition_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimDefinitionProperty_GetName(usd_PrimDefinitionProperty_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_op_bool(usd_PrimDefinitionProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_IsAttribute(usd_PrimDefinitionProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAttribute();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_IsRelationship(usd_PrimDefinitionProperty_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRelationship();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_GetSpecType(usd_PrimDefinitionProperty_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_ListMetadataFields(usd_PrimDefinitionProperty_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListMetadataFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_GetVariability(usd_PrimDefinitionProperty_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_GetDocumentation(usd_PrimDefinitionProperty_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionProperty_default(usd_PrimDefinitionProperty_t** _result) {
    *_result = new pxr::UsdPrimDefinition::Property();
    return 0;
}

int usd_PrimDefinitionProperty_dtor(usd_PrimDefinitionProperty_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimDefinitionAttribute_GetTypeName(usd_PrimDefinitionAttribute_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_GetTypeNameToken(usd_PrimDefinitionAttribute_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetTypeNameToken());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_GetName(usd_PrimDefinitionAttribute_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_op_bool(usd_PrimDefinitionAttribute_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_IsAttribute(usd_PrimDefinitionAttribute_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAttribute();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_IsRelationship(usd_PrimDefinitionAttribute_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRelationship();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_GetSpecType(usd_PrimDefinitionAttribute_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_ListMetadataFields(usd_PrimDefinitionAttribute_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListMetadataFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_GetVariability(usd_PrimDefinitionAttribute_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_GetDocumentation(usd_PrimDefinitionAttribute_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionAttribute_default(usd_PrimDefinitionAttribute_t** _result) {
    *_result = new pxr::UsdPrimDefinition::Attribute();
    return 0;
}

int usd_PrimDefinitionAttribute_dtor(usd_PrimDefinitionAttribute_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimDefinitionRelationship_GetName(usd_PrimDefinitionRelationship_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_op_bool(usd_PrimDefinitionRelationship_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_IsAttribute(usd_PrimDefinitionRelationship_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAttribute();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_IsRelationship(usd_PrimDefinitionRelationship_t const* _this, bool* _result) {
    try {
        *_result = _this->IsRelationship();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_GetSpecType(usd_PrimDefinitionRelationship_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSpecType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_ListMetadataFields(usd_PrimDefinitionRelationship_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(_this->ListMetadataFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_GetVariability(usd_PrimDefinitionRelationship_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetVariability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_GetDocumentation(usd_PrimDefinitionRelationship_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionRelationship_default(usd_PrimDefinitionRelationship_t** _result) {
    *_result = new pxr::UsdPrimDefinition::Relationship();
    return 0;
}

int usd_PrimDefinitionRelationship_dtor(usd_PrimDefinitionRelationship_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimRange_begin(usd_PrimRange_t const* _this, usd_PrimRangeIterator_t** _result) {
    try {
        *_result = new pxr::UsdPrimRange::iterator(_this->begin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimRange_end(usd_PrimRange_t const* _this, usd_PrimRangeIterator_t** _result) {
    try {
        *_result = new pxr::UsdPrimRange::iterator(_this->end());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimRange_from_prim(usd_Prim_t* start, usd_PrimRange_t** _result) {
    try {
        *_result = new pxr::UsdPrimRange(*start);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimRange_dtor(usd_PrimRange_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimRangeIterator_op_inc(usd_PrimRangeIterator_t* _this, usd_PrimRangeIterator_t** _result) {
    try {
        *_result = &_this->operator++();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimRangeIterator_op_assign(usd_PrimRangeIterator_t* _this, usd_PrimRangeIterator_t const* param00, usd_PrimRangeIterator_t** _result) {
    try {
        *_result = &_this->operator=(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimRangeIterator_op_eq(usd_PrimRangeIterator_t const* _this, usd_PrimRangeIterator_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimRangeIterator_deref(usd_PrimRangeIterator_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->operator*());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimRangeIterator_new(usd_PrimRangeIterator_t** _result) {
    *_result = new pxr::UsdPrimRange::iterator();
    return 0;
}

int usd_PrimRangeIterator_dtor(usd_PrimRangeIterator_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimSiblingRange_begin(usd_PrimSiblingRange_t const* _this, usd_PrimSiblingIterator_t** _result) {
    try {
        *_result = new pxr::UsdPrimSiblingIterator(_this->begin());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimSiblingRange_end(usd_PrimSiblingRange_t const* _this, usd_PrimSiblingIterator_t** _result) {
    try {
        *_result = new pxr::UsdPrimSiblingIterator(_this->end());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimSiblingRange_dtor(usd_PrimSiblingRange_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimSiblingIterator_deref(usd_PrimSiblingIterator_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->operator*());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimSiblingIterator_op_inc(usd_PrimSiblingIterator_t* _this, usd_PrimSiblingIterator_t** _result) {
    try {
        *_result = &_this->operator++();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimSiblingIterator_dtor(usd_PrimSiblingIterator_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimSubtreeRange_dtor(usd_PrimSubtreeRange_t* _this) {
    delete _this;
    return 0;
}

int usd_References_AddReference(usd_References_t* _this, sdf_Reference_t const* ref, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddReference(*ref, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_AddReference_with_identifier_and_path(usd_References_t* _this, std_String_t const* identifier, sdf_Path_t const* primPath, sdf_LayerOffset_t const* layerOffset, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddReference(*identifier, *primPath, *layerOffset, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_AddReference_with_identifier(usd_References_t* _this, std_String_t const* identifier, sdf_LayerOffset_t const* layerOffset, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddReference(*identifier, *layerOffset, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_AddInternalReference(usd_References_t* _this, sdf_Path_t const* primPath, sdf_LayerOffset_t const* layerOffset, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddInternalReference(*primPath, *layerOffset, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_RemoveReference(usd_References_t* _this, sdf_Reference_t const* ref, bool* _result) {
    try {
        *_result = _this->RemoveReference(*ref);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_ClearReferences(usd_References_t* _this, bool* _result) {
    try {
        *_result = _this->ClearReferences();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_SetReferences(usd_References_t* _this, sdf_ReferenceVector_t const* items, bool* _result) {
    try {
        *_result = _this->SetReferences(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_GetPrim(usd_References_t const* _this, usd_Prim_t const** _result) {
    try {
        *_result = &_this->GetPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_op_bool(usd_References_t* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_References_dtor(usd_References_t* _this) {
    delete _this;
    return 0;
}

int usd_ResolveInfo_GetSource(usd_ResolveInfo_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetSource());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveInfo_HasAuthoredValueOpinion(usd_ResolveInfo_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredValueOpinion();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveInfo_HasAuthoredValue(usd_ResolveInfo_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveInfo_GetNode(usd_ResolveInfo_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveInfo_ValueIsBlocked(usd_ResolveInfo_t const* _this, bool* _result) {
    try {
        *_result = _this->ValueIsBlocked();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveInfo_default(usd_ResolveInfo_t** _result) {
    try {
        *_result = new pxr::UsdResolveInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveInfo_dtor(usd_ResolveInfo_t* _this) {
    delete _this;
    return 0;
}

int usd_ResolveTarget_GetPrimIndex(usd_ResolveTarget_t const* _this, pcp_PrimIndex_t const** _result) {
    try {
        *_result = _this->GetPrimIndex();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveTarget_GetStartNode(usd_ResolveTarget_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetStartNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveTarget_GetStartLayer(usd_ResolveTarget_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetStartLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveTarget_GetStopNode(usd_ResolveTarget_t const* _this, pcp_NodeRef_t** _result) {
    try {
        *_result = new pxr::PcpNodeRef(_this->GetStopNode());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveTarget_GetStopLayer(usd_ResolveTarget_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetStopLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveTarget_IsNull(usd_ResolveTarget_t const* _this, bool* _result) {
    try {
        *_result = _this->IsNull();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveTarget_default(usd_ResolveTarget_t** _result) {
    try {
        *_result = new pxr::UsdResolveTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_ResolveTarget_dtor(usd_ResolveTarget_t* _this) {
    delete _this;
    return 0;
}

int usd_APISchemaBase_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdAPISchemaBase::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_IsConcrete(usd_APISchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_IsTyped(usd_APISchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_IsAPISchema(usd_APISchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_IsAppliedAPISchema(usd_APISchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_IsMultipleApplyAPISchema(usd_APISchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_GetSchemaKind(usd_APISchemaBase_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_GetPrim(usd_APISchemaBase_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_GetPath(usd_APISchemaBase_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_GetSchemaClassPrimDefinition(usd_APISchemaBase_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_op_bool(usd_APISchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_APISchemaBase_dtor(usd_APISchemaBase_t* _this) {
    delete _this;
    return 0;
}

int usd_SchemaBase_IsConcrete(usd_SchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_IsTyped(usd_SchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_IsAPISchema(usd_SchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_IsAppliedAPISchema(usd_SchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_IsMultipleApplyAPISchema(usd_SchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_GetSchemaKind(usd_SchemaBase_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_GetPrim(usd_SchemaBase_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_GetPath(usd_SchemaBase_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_GetSchemaClassPrimDefinition(usd_SchemaBase_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdSchemaBase::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_op_bool(usd_SchemaBase_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_from_prim(usd_Prim_t const* prim, usd_SchemaBase_t** _result) {
    try {
        *_result = new pxr::UsdSchemaBase(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaBase_dtor(usd_SchemaBase_t* _this) {
    delete _this;
    return 0;
}

int usd_SchemaRegistry_GetInstance(usd_SchemaRegistry_t** _result) {
    try {
        *_result = &pxr::UsdSchemaRegistry::GetInstance();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_MakeSchemaIdentifierForFamilyAndVersion(tf_Token_t const* schemaFamily, unsigned int schemaVersion, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdSchemaRegistry::MakeSchemaIdentifierForFamilyAndVersion(*schemaFamily, schemaVersion));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_ParseSchemaFamilyAndVersionFromIdentifier(tf_Token_t const* schemaIdentifier, usd_TokenSchemaVersionPair_t** _result) {
    try {
        *_result = new std::pair<pxr::TfToken, pxr::UsdSchemaVersion>(pxr::UsdSchemaRegistry::ParseSchemaFamilyAndVersionFromIdentifier(*schemaIdentifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsAllowedSchemaFamily(tf_Token_t const* schemaFamily, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsAllowedSchemaFamily(*schemaFamily);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsAllowedSchemaIdentifier(tf_Token_t const* schemaIdentifier, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsAllowedSchemaIdentifier(*schemaIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_FindSchemaInfo(tf_Type_t const* schemaType, usd_SchemaRegistrySchemaInfo_t const** _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::FindSchemaInfo(*schemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_FindSchemaInfo_by_name(tf_Token_t const* schemaIdentifier, usd_SchemaRegistrySchemaInfo_t const** _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::FindSchemaInfo(*schemaIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_FindSchemaInfo_03(tf_Token_t const* schemaFamily, unsigned int schemaVersion, usd_SchemaRegistrySchemaInfo_t const** _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::FindSchemaInfo(*schemaFamily, schemaVersion);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_FindSchemaInfosInFamily_00(tf_Token_t const* schemaFamily, usd_SchemaRegistrySchemaInfoConstPtrVector_t const** _result) {
    try {
        *_result = &pxr::UsdSchemaRegistry::FindSchemaInfosInFamily(*schemaFamily);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_FindSchemaInfosInFamily_01(tf_Token_t const* schemaFamily, unsigned int schemaVersion, int versionPolicy, usd_SchemaRegistrySchemaInfoConstPtrVector_t** _result) {
    try {
        *_result = new std::vector<const pxr::UsdSchemaRegistry::SchemaInfo *>(pxr::UsdSchemaRegistry::FindSchemaInfosInFamily(*schemaFamily, schemaVersion, static_cast<pxr::UsdSchemaRegistry::VersionPolicy>(versionPolicy)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetSchemaTypeName(tf_Type_t const* schemaType, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdSchemaRegistry::GetSchemaTypeName(*schemaType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetConcreteSchemaTypeName(tf_Type_t const* schemaType, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdSchemaRegistry::GetConcreteSchemaTypeName(*schemaType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetAPISchemaTypeName(tf_Type_t const* schemaType, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdSchemaRegistry::GetAPISchemaTypeName(*schemaType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetTypeFromSchemaTypeName(tf_Token_t const* typeName, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(pxr::UsdSchemaRegistry::GetTypeFromSchemaTypeName(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetConcreteTypeFromSchemaTypeName(tf_Token_t const* typeName, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(pxr::UsdSchemaRegistry::GetConcreteTypeFromSchemaTypeName(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetAPITypeFromSchemaTypeName(tf_Token_t const* typeName, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(pxr::UsdSchemaRegistry::GetAPITypeFromSchemaTypeName(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsDisallowedField(tf_Token_t const* fieldName, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsDisallowedField(*fieldName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsTyped(tf_Type_t const* primType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsTyped(*primType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetSchemaKind_00(tf_Type_t const* schemaType, int* _result) {
    try {
        *_result = static_cast<int>(pxr::UsdSchemaRegistry::GetSchemaKind(*schemaType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetSchemaKind_01(tf_Token_t const* typeName, int* _result) {
    try {
        *_result = static_cast<int>(pxr::UsdSchemaRegistry::GetSchemaKind(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsConcrete(tf_Type_t const* primType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsConcrete(*primType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsConcrete_by_name(tf_Token_t const* primType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsConcrete(*primType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsAbstract(tf_Type_t const* primType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsAbstract(*primType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsAbstract_by_name(tf_Token_t const* primType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsAbstract(*primType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsAppliedAPISchema(tf_Type_t const* apiSchemaType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsAppliedAPISchema(*apiSchemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsAppliedAPISchema_by_name(tf_Token_t const* apiSchemaType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsAppliedAPISchema(*apiSchemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsMultipleApplyAPISchema(tf_Type_t const* apiSchemaType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsMultipleApplyAPISchema(*apiSchemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsMultipleApplyAPISchema_by_name(tf_Token_t const* apiSchemaType, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsMultipleApplyAPISchema(*apiSchemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetTypeFromName(tf_Token_t const* typeName, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(pxr::UsdSchemaRegistry::GetTypeFromName(*typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetTypeNameAndInstance(tf_Token_t const* apiSchemaName, tf_TokenTokenPair_t** _result) {
    try {
        *_result = new std::pair<pxr::TfToken, pxr::TfToken>(pxr::UsdSchemaRegistry::GetTypeNameAndInstance(*apiSchemaName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsAllowedAPISchemaInstanceName(tf_Token_t const* apiSchemaName, tf_Token_t const* instanceName, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsAllowedAPISchemaInstanceName(*apiSchemaName, *instanceName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetAPISchemaCanOnlyApplyToTypeNames(tf_Token_t const* apiSchemaName, tf_Token_t const* instanceName, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdSchemaRegistry::GetAPISchemaCanOnlyApplyToTypeNames(*apiSchemaName, *instanceName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetAutoApplyAPISchemas(usd_SchemaRegistryTokenToTokenVectorMap_t const** _result) {
    try {
        *_result = &pxr::UsdSchemaRegistry::GetAutoApplyAPISchemas();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_CollectAddtionalAutoApplyAPISchemasFromPlugins(usd_SchemaRegistryTokenToTokenVectorMap_t* autoApplyAPISchemas) {
    try {
        pxr::UsdSchemaRegistry::CollectAddtionalAutoApplyAPISchemasFromPlugins(autoApplyAPISchemas);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_MakeMultipleApplyNameTemplate(std_String_t const* namespacePrefix, std_String_t const* baseName, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdSchemaRegistry::MakeMultipleApplyNameTemplate(*namespacePrefix, *baseName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_MakeMultipleApplyNameInstance(std_String_t const* nameTemplate, std_String_t const* instanceName, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdSchemaRegistry::MakeMultipleApplyNameInstance(*nameTemplate, *instanceName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetMultipleApplyNameTemplateBaseName(std_String_t const* nameTemplate, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName(*nameTemplate));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_IsMultipleApplyNameTemplate(std_String_t const* nameTemplate, bool* _result) {
    try {
        *_result = pxr::UsdSchemaRegistry::IsMultipleApplyNameTemplate(*nameTemplate);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_FindConcretePrimDefinition(usd_SchemaRegistry_t const* _this, tf_Token_t const* typeName, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->FindConcretePrimDefinition(*typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_FindAppliedAPIPrimDefinition(usd_SchemaRegistry_t const* _this, tf_Token_t const* typeName, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->FindAppliedAPIPrimDefinition(*typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetEmptyPrimDefinition(usd_SchemaRegistry_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetEmptyPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_BuildComposedPrimDefinition(usd_SchemaRegistry_t const* _this, tf_Token_t const* primType, tf_TokenVector_t const* appliedAPISchemas, usd_PrimDefinitionPtr_t** _result) {
    try {
        *_result = new std::unique_ptr<pxr::UsdPrimDefinition>(_this->BuildComposedPrimDefinition(*primType, *appliedAPISchemas));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_GetFallbackPrimTypes(usd_SchemaRegistry_t const* _this, vt_Dictionary_t const** _result) {
    try {
        *_result = &_this->GetFallbackPrimTypes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_SchemaRegistry_dtor(usd_SchemaRegistry_t* _this) {
    delete _this;
    return 0;
}

int usd_SchemaRegistrySchemaInfo_dtor(usd_SchemaRegistrySchemaInfo_t* _this) {
    delete _this;
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_data(usd_SchemaRegistrySchemaInfoConstPtrVector_t* _this, usd_SchemaRegistrySchemaInfo_t const*** _result) {
    *_result = _this->data();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_data_const(usd_SchemaRegistrySchemaInfoConstPtrVector_t const* _this, usd_SchemaRegistrySchemaInfo_t const* const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_empty(usd_SchemaRegistrySchemaInfoConstPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_size(usd_SchemaRegistrySchemaInfoConstPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_max_size(usd_SchemaRegistrySchemaInfoConstPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_capacity(usd_SchemaRegistrySchemaInfoConstPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_clear(usd_SchemaRegistrySchemaInfoConstPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_pop_back(usd_SchemaRegistrySchemaInfoConstPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_op_index(usd_SchemaRegistrySchemaInfoConstPtrVector_t const* _this, size_t __n, usd_SchemaRegistrySchemaInfo_t const* const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_default(usd_SchemaRegistrySchemaInfoConstPtrVector_t** _result) {
    *_result = new std::vector<const pxr::UsdSchemaRegistry::SchemaInfo *>();
    return 0;
}

int usd_SchemaRegistrySchemaInfoConstPtrVector_dtor(usd_SchemaRegistrySchemaInfoConstPtrVector_t* _this) {
    delete _this;
    return 0;
}

int usd_TokenSchemaVersionPair_dtor(usd_TokenSchemaVersionPair_t* _this) {
    delete _this;
    return 0;
}

int usd_SchemaRegistryTokenToTokenVectorMap_dtor(usd_SchemaRegistryTokenToTokenVectorMap_t* _this) {
    delete _this;
    return 0;
}

int usd_PrimDefinitionPtr_GetPropertyNames(usd_PrimDefinitionPtr_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &(*_this)->GetPropertyNames();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetAppliedAPISchemas(usd_PrimDefinitionPtr_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &(*_this)->GetAppliedAPISchemas();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetPropertyDefinition(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* propName, usd_PrimDefinitionProperty_t** _result) {
    try {
        *_result = new pxr::UsdPrimDefinition::Property((*_this)->GetPropertyDefinition(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetAttributeDefinition(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* attrName, usd_PrimDefinitionAttribute_t** _result) {
    try {
        *_result = new pxr::UsdPrimDefinition::Attribute((*_this)->GetAttributeDefinition(*attrName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetRelationshipDefinition(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* relName, usd_PrimDefinitionRelationship_t** _result) {
    try {
        *_result = new pxr::UsdPrimDefinition::Relationship((*_this)->GetRelationshipDefinition(*relName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetSpecType(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* propName, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetSpecType(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetSchemaPropertySpec(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* propName, sdf_PropertySpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfPropertySpecHandle((*_this)->GetSchemaPropertySpec(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetSchemaAttributeSpec(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* attrName, sdf_AttributeSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfAttributeSpecHandle((*_this)->GetSchemaAttributeSpec(*attrName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetSchemaRelationshipSpec(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* relName, sdf_RelationshipSpecHandle_t** _result) {
    try {
        *_result = new pxr::SdfRelationshipSpecHandle((*_this)->GetSchemaRelationshipSpec(*relName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_ListMetadataFields(usd_PrimDefinitionPtr_t const* _this, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListMetadataFields());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetDocumentation(usd_PrimDefinitionPtr_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_ListPropertyMetadataFields(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* propName, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector((*_this)->ListPropertyMetadataFields(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_GetPropertyDocumentation(usd_PrimDefinitionPtr_t const* _this, tf_Token_t const* propName, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->GetPropertyDocumentation(*propName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_FlattenTo(usd_PrimDefinitionPtr_t const* _this, sdf_LayerHandle_t const* layer, sdf_Path_t const* path, unsigned int newSpecSpecifier, bool* _result) {
    try {
        *_result = (*_this)->FlattenTo(*layer, *path, static_cast<pxr::SdfSpecifier>(newSpecSpecifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_FlattenTo_prim_under_parent(usd_PrimDefinitionPtr_t const* _this, usd_Prim_t const* parent, tf_Token_t const* name, unsigned int newSpecSpecifier, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->FlattenTo(*parent, *name, static_cast<pxr::SdfSpecifier>(newSpecSpecifier)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_FlattenTo_prim(usd_PrimDefinitionPtr_t const* _this, usd_Prim_t const* prim, unsigned int newSpecSpecifier, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->FlattenTo(*prim, static_cast<pxr::SdfSpecifier>(newSpecSpecifier)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimDefinitionPtr_dtor(usd_PrimDefinitionPtr_t* _this) {
    delete _this;
    return 0;
}

int usd_Specializes_AddSpecialize(usd_Specializes_t* _this, sdf_Path_t const* primPath, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddSpecialize(*primPath, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Specializes_RemoveSpecialize(usd_Specializes_t* _this, sdf_Path_t const* primPath, bool* _result) {
    try {
        *_result = _this->RemoveSpecialize(*primPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Specializes_ClearSpecializes(usd_Specializes_t* _this, bool* _result) {
    try {
        *_result = _this->ClearSpecializes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Specializes_SetSpecializes(usd_Specializes_t* _this, sdf_PathVector_t const* items, bool* _result) {
    try {
        *_result = _this->SetSpecializes(*items);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Specializes_GetPrim(usd_Specializes_t const* _this, usd_Prim_t const** _result) {
    try {
        *_result = &_this->GetPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Specializes_op_bool(usd_Specializes_t* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Specializes_dtor(usd_Specializes_t* _this) {
    delete _this;
    return 0;
}

int usd_Stage_Save(usd_Stage_t* _this) {
    try {
        _this->Save();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SaveSessionLayers(usd_Stage_t* _this) {
    try {
        _this->SaveSessionLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Load(usd_Stage_t* _this, sdf_Path_t const* path, unsigned int policy, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->Load(*path, static_cast<pxr::UsdLoadPolicy>(policy)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Unload(usd_Stage_t* _this, sdf_Path_t const* path) {
    try {
        _this->Unload(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_LoadAndUnload(usd_Stage_t* _this, sdf_PathSet_t const* loadSet, sdf_PathSet_t const* unloadSet, unsigned int policy) {
    try {
        _this->LoadAndUnload(*loadSet, *unloadSet, static_cast<pxr::UsdLoadPolicy>(policy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetLoadSet(usd_Stage_t* _this, sdf_PathSet_t** _result) {
    try {
        *_result = new pxr::SdfPathSet(_this->GetLoadSet());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_FindLoadable(usd_Stage_t* _this, sdf_Path_t const* rootPath, sdf_PathSet_t** _result) {
    try {
        *_result = new pxr::SdfPathSet(_this->FindLoadable(*rootPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetLoadRules(usd_Stage_t const* _this, usd_StageLoadRules_t const** _result) {
    try {
        *_result = &_this->GetLoadRules();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetLoadRules(usd_Stage_t* _this, usd_StageLoadRules_t const* rules) {
    try {
        _this->SetLoadRules(*rules);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetPopulationMask(usd_Stage_t const* _this, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(_this->GetPopulationMask());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetPopulationMask(usd_Stage_t* _this, usd_UsdStagePopulationMask_t const* mask) {
    try {
        _this->SetPopulationMask(*mask);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_ExpandPopulationMask(usd_Stage_t* _this, void (*relPred)(usd_Relationship_t const* param00, bool* _result), void (*attrPred)(usd_Attribute_t const* param00, bool* _result)) {
    try {
        std::function<bool (pxr::UsdRelationship const&)> relPred_wrapper = [&](pxr::UsdRelationship const& param00) {
        bool _result;
        relPred(&param00, &_result);
        return _result;
    };
        std::function<bool (pxr::UsdAttribute const&)> attrPred_wrapper = [&](pxr::UsdAttribute const& param00) {
        bool _result;
        attrPred(&param00, &_result);
        return _result;
    };
        _this->ExpandPopulationMask(relPred_wrapper, attrPred_wrapper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetSessionLayer(usd_Stage_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetSessionLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetRootLayer(usd_Stage_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle(_this->GetRootLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetPathResolverContext(usd_Stage_t const* _this, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext(_this->GetPathResolverContext());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_ResolveIdentifierToEditTarget(usd_Stage_t const* _this, std_String_t const* identifier, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ResolveIdentifierToEditTarget(*identifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetLayerStack(usd_Stage_t const* _this, bool includeSessionLayers, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector(_this->GetLayerStack(includeSessionLayers));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetUsedLayers(usd_Stage_t const* _this, bool includeClipLayers, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector(_this->GetUsedLayers(includeClipLayers));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_HasLocalLayer(usd_Stage_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = _this->HasLocalLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetEditTarget(usd_Stage_t const* _this, usd_EditTarget_t const** _result) {
    try {
        *_result = &_this->GetEditTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetEditTargetForLocalLayer(usd_Stage_t* _this, sdf_LayerHandle_t const* layer, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(_this->GetEditTargetForLocalLayer(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetEditTargetForLocalLayer_with_index(usd_Stage_t* _this, size_t i, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(_this->GetEditTargetForLocalLayer(i));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetEditTarget(usd_Stage_t* _this, usd_EditTarget_t const* editTarget) {
    try {
        _this->SetEditTarget(*editTarget);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_MuteLayer(usd_Stage_t* _this, std_String_t const* layerIdentifier) {
    try {
        _this->MuteLayer(*layerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_UnmuteLayer(usd_Stage_t* _this, std_String_t const* layerIdentifier) {
    try {
        _this->UnmuteLayer(*layerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_MuteAndUnmuteLayers(usd_Stage_t* _this, std_StringVector_t const* muteLayers, std_StringVector_t const* unmuteLayers) {
    try {
        _this->MuteAndUnmuteLayers(*muteLayers, *unmuteLayers);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetMutedLayers(usd_Stage_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &_this->GetMutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_IsLayerMuted(usd_Stage_t const* _this, std_String_t const* layerIdentifier, bool* _result) {
    try {
        *_result = _this->IsLayerMuted(*layerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Export(usd_Stage_t const* _this, std_String_t const* filename, bool addSourceFileComment, sdf_FileFormatFileFormatArguments_t const* args, bool* _result) {
    try {
        *_result = _this->Export(*filename, addSourceFileComment, *args);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Flatten(usd_Stage_t const* _this, bool addSourceFileComment, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr(_this->Flatten(addSourceFileComment));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetMetadata(usd_Stage_t const* _this, tf_Token_t const* key, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadata(*key, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_HasMetadata(usd_Stage_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_HasAuthoredMetadata(usd_Stage_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetMetadata(usd_Stage_t const* _this, tf_Token_t const* key, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadata(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_ClearMetadata(usd_Stage_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->ClearMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetMetadataByDictKey(usd_Stage_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = _this->GetMetadataByDictKey(*key, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_HasMetadataDictKey(usd_Stage_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_HasAuthoredMetadataDictKey(usd_Stage_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->HasAuthoredMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetMetadataByDictKey(usd_Stage_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t const* value, bool* _result) {
    try {
        *_result = _this->SetMetadataByDictKey(*key, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_ClearMetadataByDictKey(usd_Stage_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = _this->ClearMetadataByDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_WriteFallbackPrimTypes(usd_Stage_t* _this) {
    try {
        _this->WriteFallbackPrimTypes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetStartTimeCode(usd_Stage_t const* _this, double* _result) {
    try {
        *_result = _this->GetStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetStartTimeCode(usd_Stage_t* _this, double param00) {
    try {
        _this->SetStartTimeCode(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetEndTimeCode(usd_Stage_t const* _this, double* _result) {
    try {
        *_result = _this->GetEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetEndTimeCode(usd_Stage_t* _this, double param00) {
    try {
        _this->SetEndTimeCode(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_HasAuthoredTimeCodeRange(usd_Stage_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredTimeCodeRange();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetTimeCodesPerSecond(usd_Stage_t const* _this, double* _result) {
    try {
        *_result = _this->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetTimeCodesPerSecond(usd_Stage_t const* _this, double timeCodesPerSecond) {
    try {
        _this->SetTimeCodesPerSecond(timeCodesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetFramesPerSecond(usd_Stage_t const* _this, double* _result) {
    try {
        *_result = _this->GetFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetFramesPerSecond(usd_Stage_t const* _this, double framesPerSecond) {
    try {
        _this->SetFramesPerSecond(framesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetInterpolationType(usd_Stage_t* _this, unsigned int interpolationType) {
    try {
        _this->SetInterpolationType(static_cast<pxr::UsdInterpolationType>(interpolationType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetInterpolationType(usd_Stage_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetInterpolationType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetPrototypes(usd_Stage_t const* _this, usd_PrimVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdPrim>(_this->GetPrototypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetGlobalVariantFallbacks(pcp_VariantFallbackMap_t** _result) {
    try {
        *_result = new pxr::PcpVariantFallbackMap(pxr::UsdStage::GetGlobalVariantFallbacks());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetGlobalVariantFallbacks(pcp_VariantFallbackMap_t const* fallbacks) {
    try {
        pxr::UsdStage::SetGlobalVariantFallbacks(*fallbacks);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateNew(std_String_t const* identifier, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateNew(*identifier, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateNew_with_session_layer(std_String_t const* identifier, sdf_LayerHandle_t const* sessionLayer, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateNew(*identifier, *sessionLayer, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateNew_with_session_layer_and_resolver_context(std_String_t const* identifier, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateNew(*identifier, *sessionLayer, *pathResolverContext, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateNew_with_resolver_context(std_String_t const* identifier, ar_ResolverContext_t const* pathResolverContext, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateNew(*identifier, *pathResolverContext, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateInMemory(unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateInMemory(static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateInMemory_with_identifier(std_String_t const* identifier, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateInMemory(*identifier, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateInMemory_with_resolver_context(std_String_t const* identifier, ar_ResolverContext_t const* pathResolverContext, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateInMemory(*identifier, *pathResolverContext, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateInMemory_with_session_layer(std_String_t const* identifier, sdf_LayerHandle_t const* sessionLayer, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateInMemory(*identifier, *sessionLayer, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateInMemory_with_session_layer_and_resolver_context(std_String_t const* identifier, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::CreateInMemory(*identifier, *sessionLayer, *pathResolverContext, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Open_with_resolver_context(std_String_t const* filePath, ar_ResolverContext_t const* pathResolverContext, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::Open(*filePath, *pathResolverContext, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Open_at_root(sdf_LayerHandle_t const* rootLayer, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::Open(*rootLayer, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Open_at_root_with_resolver_context(sdf_LayerHandle_t const* rootLayer, ar_ResolverContext_t const* pathResolverContext, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::Open(*rootLayer, *pathResolverContext, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Open_at_root_with_session_layer_and_resolver_context(sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::Open(*rootLayer, *sessionLayer, *pathResolverContext, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Open_at_root_with_session_layer(sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::Open(*rootLayer, *sessionLayer, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_OpenMasked(std_String_t const* filePath, usd_UsdStagePopulationMask_t const* mask, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::OpenMasked(*filePath, *mask, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_OpenMasked_with_resolver_context(std_String_t const* filePath, ar_ResolverContext_t const* pathResolverContext, usd_UsdStagePopulationMask_t const* mask, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::OpenMasked(*filePath, *pathResolverContext, *mask, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_OpenMasked_at_root(sdf_LayerHandle_t const* rootLayer, usd_UsdStagePopulationMask_t const* mask, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::OpenMasked(*rootLayer, *mask, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_OpenMasked_at_root_with_resolver_context(sdf_LayerHandle_t const* rootLayer, ar_ResolverContext_t const* pathResolverContext, usd_UsdStagePopulationMask_t const* mask, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::OpenMasked(*rootLayer, *pathResolverContext, *mask, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_OpenMasked_at_root_with_session_layer_and_resolver_context(sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, usd_UsdStagePopulationMask_t const* mask, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::OpenMasked(*rootLayer, *sessionLayer, *pathResolverContext, *mask, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_OpenMasked_at_root_with_session_layer(sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, usd_UsdStagePopulationMask_t const* mask, unsigned int load, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(pxr::UsdStage::OpenMasked(*rootLayer, *sessionLayer, *mask, static_cast<pxr::UsdStage::InitialLoadSet>(load)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_IsSupportedFile(std_String_t const* filePath, bool* _result) {
    try {
        *_result = pxr::UsdStage::IsSupportedFile(*filePath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Reload(usd_Stage_t* _this) {
    try {
        _this->Reload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetColorConfigFallbacks(sdf_AssetPath_t* colorConfiguration, tf_Token_t* colorManagementSystem) {
    try {
        pxr::UsdStage::GetColorConfigFallbacks(colorConfiguration, colorManagementSystem);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetColorConfigFallbacks(sdf_AssetPath_t const* colorConfiguration, tf_Token_t const* colorManagementSystem) {
    try {
        pxr::UsdStage::SetColorConfigFallbacks(*colorConfiguration, *colorManagementSystem);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetColorConfiguration(usd_Stage_t const* _this, sdf_AssetPath_t const* colorConfig) {
    try {
        _this->SetColorConfiguration(*colorConfig);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetColorConfiguration(usd_Stage_t const* _this, sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath(_this->GetColorConfiguration());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetColorManagementSystem(usd_Stage_t const* _this, tf_Token_t const* cms) {
    try {
        _this->SetColorManagementSystem(*cms);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetColorManagementSystem(usd_Stage_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetColorManagementSystem());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetPseudoRoot(usd_Stage_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPseudoRoot());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetDefaultPrim(usd_Stage_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetDefaultPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_SetDefaultPrim(usd_Stage_t* _this, usd_Prim_t const* prim) {
    try {
        _this->SetDefaultPrim(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_ClearDefaultPrim(usd_Stage_t* _this) {
    try {
        _this->ClearDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_HasDefaultPrim(usd_Stage_t const* _this, bool* _result) {
    try {
        *_result = _this->HasDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetPrimAtPath(usd_Stage_t const* _this, sdf_Path_t const* path, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetObjectAtPath(usd_Stage_t const* _this, sdf_Path_t const* path, usd_Object_t** _result) {
    try {
        *_result = new pxr::UsdObject(_this->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetPropertyAtPath(usd_Stage_t const* _this, sdf_Path_t const* path, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty(_this->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetAttributeAtPath(usd_Stage_t const* _this, sdf_Path_t const* path, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_GetRelationshipAtPath(usd_Stage_t const* _this, sdf_Path_t const* path, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_OverridePrim(usd_Stage_t* _this, sdf_Path_t const* path, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->OverridePrim(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_DefinePrim(usd_Stage_t* _this, sdf_Path_t const* path, tf_Token_t const* typeName, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->DefinePrim(*path, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_CreateClassPrim(usd_Stage_t* _this, sdf_Path_t const* rootPrimPath, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->CreateClassPrim(*rootPrimPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_RemovePrim(usd_Stage_t* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->RemovePrim(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_dtor(usd_Stage_t* _this) {
    delete _this;
    return 0;
}

int usd_StageRefPtr_get(usd_StageRefPtr_t const* _this, usd_Stage_t** _result) {
    try {
        *_result = _this->operator->();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_is_invalid(usd_StageRefPtr_t const* _this, bool* _result) {
    try {
        *_result = _this->operator!();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_Save(usd_StageRefPtr_t* _this) {
    try {
        (*_this)->Save();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SaveSessionLayers(usd_StageRefPtr_t* _this) {
    try {
        (*_this)->SaveSessionLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_Load(usd_StageRefPtr_t* _this, sdf_Path_t const* path, unsigned int policy, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->Load(*path, static_cast<pxr::UsdLoadPolicy>(policy)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_Unload(usd_StageRefPtr_t* _this, sdf_Path_t const* path) {
    try {
        (*_this)->Unload(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_LoadAndUnload(usd_StageRefPtr_t* _this, sdf_PathSet_t const* loadSet, sdf_PathSet_t const* unloadSet, unsigned int policy) {
    try {
        (*_this)->LoadAndUnload(*loadSet, *unloadSet, static_cast<pxr::UsdLoadPolicy>(policy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetLoadSet(usd_StageRefPtr_t* _this, sdf_PathSet_t** _result) {
    try {
        *_result = new pxr::SdfPathSet((*_this)->GetLoadSet());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_FindLoadable(usd_StageRefPtr_t* _this, sdf_Path_t const* rootPath, sdf_PathSet_t** _result) {
    try {
        *_result = new pxr::SdfPathSet((*_this)->FindLoadable(*rootPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetLoadRules(usd_StageRefPtr_t const* _this, usd_StageLoadRules_t const** _result) {
    try {
        *_result = &(*_this)->GetLoadRules();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetLoadRules(usd_StageRefPtr_t* _this, usd_StageLoadRules_t const* rules) {
    try {
        (*_this)->SetLoadRules(*rules);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetPopulationMask(usd_StageRefPtr_t const* _this, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask((*_this)->GetPopulationMask());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetPopulationMask(usd_StageRefPtr_t* _this, usd_UsdStagePopulationMask_t const* mask) {
    try {
        (*_this)->SetPopulationMask(*mask);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_ExpandPopulationMask(usd_StageRefPtr_t* _this, void (*relPred)(usd_Relationship_t const* param00, bool* _result), void (*attrPred)(usd_Attribute_t const* param00, bool* _result)) {
    try {
        std::function<bool (pxr::UsdRelationship const&)> relPred_wrapper = [&](pxr::UsdRelationship const& param00) {
        bool _result;
        relPred(&param00, &_result);
        return _result;
    };
        std::function<bool (pxr::UsdAttribute const&)> attrPred_wrapper = [&](pxr::UsdAttribute const& param00) {
        bool _result;
        attrPred(&param00, &_result);
        return _result;
    };
        (*_this)->ExpandPopulationMask(relPred_wrapper, attrPred_wrapper);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetSessionLayer(usd_StageRefPtr_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle((*_this)->GetSessionLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetRootLayer(usd_StageRefPtr_t const* _this, sdf_LayerHandle_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandle((*_this)->GetRootLayer());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetPathResolverContext(usd_StageRefPtr_t const* _this, ar_ResolverContext_t** _result) {
    try {
        *_result = new pxr::ArResolverContext((*_this)->GetPathResolverContext());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_ResolveIdentifierToEditTarget(usd_StageRefPtr_t const* _this, std_String_t const* identifier, std_String_t** _result) {
    try {
        *_result = new std::string((*_this)->ResolveIdentifierToEditTarget(*identifier));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetLayerStack(usd_StageRefPtr_t const* _this, bool includeSessionLayers, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector((*_this)->GetLayerStack(includeSessionLayers));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetUsedLayers(usd_StageRefPtr_t const* _this, bool includeClipLayers, sdf_LayerHandleVector_t** _result) {
    try {
        *_result = new pxr::SdfLayerHandleVector((*_this)->GetUsedLayers(includeClipLayers));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_HasLocalLayer(usd_StageRefPtr_t const* _this, sdf_LayerHandle_t const* layer, bool* _result) {
    try {
        *_result = (*_this)->HasLocalLayer(*layer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetEditTarget(usd_StageRefPtr_t const* _this, usd_EditTarget_t const** _result) {
    try {
        *_result = &(*_this)->GetEditTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetEditTargetForLocalLayer(usd_StageRefPtr_t* _this, sdf_LayerHandle_t const* layer, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget((*_this)->GetEditTargetForLocalLayer(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetEditTargetForLocalLayer_with_index(usd_StageRefPtr_t* _this, size_t i, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget((*_this)->GetEditTargetForLocalLayer(i));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetEditTarget(usd_StageRefPtr_t* _this, usd_EditTarget_t const* editTarget) {
    try {
        (*_this)->SetEditTarget(*editTarget);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_MuteLayer(usd_StageRefPtr_t* _this, std_String_t const* layerIdentifier) {
    try {
        (*_this)->MuteLayer(*layerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_UnmuteLayer(usd_StageRefPtr_t* _this, std_String_t const* layerIdentifier) {
    try {
        (*_this)->UnmuteLayer(*layerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_MuteAndUnmuteLayers(usd_StageRefPtr_t* _this, std_StringVector_t const* muteLayers, std_StringVector_t const* unmuteLayers) {
    try {
        (*_this)->MuteAndUnmuteLayers(*muteLayers, *unmuteLayers);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetMutedLayers(usd_StageRefPtr_t const* _this, std_StringVector_t const** _result) {
    try {
        *_result = &(*_this)->GetMutedLayers();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_IsLayerMuted(usd_StageRefPtr_t const* _this, std_String_t const* layerIdentifier, bool* _result) {
    try {
        *_result = (*_this)->IsLayerMuted(*layerIdentifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_Export(usd_StageRefPtr_t const* _this, std_String_t const* filename, bool addSourceFileComment, sdf_FileFormatFileFormatArguments_t const* args, bool* _result) {
    try {
        *_result = (*_this)->Export(*filename, addSourceFileComment, *args);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_Flatten(usd_StageRefPtr_t const* _this, bool addSourceFileComment, sdf_LayerRefPtr_t** _result) {
    try {
        *_result = new pxr::SdfLayerRefPtr((*_this)->Flatten(addSourceFileComment));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetMetadata(usd_StageRefPtr_t const* _this, tf_Token_t const* key, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->GetMetadata(*key, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_HasMetadata(usd_StageRefPtr_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->HasMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_HasAuthoredMetadata(usd_StageRefPtr_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->HasAuthoredMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetMetadata(usd_StageRefPtr_t const* _this, tf_Token_t const* key, vt_Value_t const* value, bool* _result) {
    try {
        *_result = (*_this)->SetMetadata(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_ClearMetadata(usd_StageRefPtr_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = (*_this)->ClearMetadata(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetMetadataByDictKey(usd_StageRefPtr_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t* value, bool* _result) {
    try {
        *_result = (*_this)->GetMetadataByDictKey(*key, *keyPath, value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_HasMetadataDictKey(usd_StageRefPtr_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = (*_this)->HasMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_HasAuthoredMetadataDictKey(usd_StageRefPtr_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = (*_this)->HasAuthoredMetadataDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetMetadataByDictKey(usd_StageRefPtr_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, vt_Value_t const* value, bool* _result) {
    try {
        *_result = (*_this)->SetMetadataByDictKey(*key, *keyPath, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_ClearMetadataByDictKey(usd_StageRefPtr_t const* _this, tf_Token_t const* key, tf_Token_t const* keyPath, bool* _result) {
    try {
        *_result = (*_this)->ClearMetadataByDictKey(*key, *keyPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_WriteFallbackPrimTypes(usd_StageRefPtr_t* _this) {
    try {
        (*_this)->WriteFallbackPrimTypes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetStartTimeCode(usd_StageRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetStartTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetStartTimeCode(usd_StageRefPtr_t* _this, double param00) {
    try {
        (*_this)->SetStartTimeCode(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetEndTimeCode(usd_StageRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetEndTimeCode();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetEndTimeCode(usd_StageRefPtr_t* _this, double param00) {
    try {
        (*_this)->SetEndTimeCode(param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_HasAuthoredTimeCodeRange(usd_StageRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasAuthoredTimeCodeRange();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetTimeCodesPerSecond(usd_StageRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetTimeCodesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetTimeCodesPerSecond(usd_StageRefPtr_t const* _this, double timeCodesPerSecond) {
    try {
        (*_this)->SetTimeCodesPerSecond(timeCodesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetFramesPerSecond(usd_StageRefPtr_t const* _this, double* _result) {
    try {
        *_result = (*_this)->GetFramesPerSecond();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetFramesPerSecond(usd_StageRefPtr_t const* _this, double framesPerSecond) {
    try {
        (*_this)->SetFramesPerSecond(framesPerSecond);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetInterpolationType(usd_StageRefPtr_t* _this, unsigned int interpolationType) {
    try {
        (*_this)->SetInterpolationType(static_cast<pxr::UsdInterpolationType>(interpolationType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetInterpolationType(usd_StageRefPtr_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>((*_this)->GetInterpolationType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetPrototypes(usd_StageRefPtr_t const* _this, usd_PrimVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdPrim>((*_this)->GetPrototypes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_Reload(usd_StageRefPtr_t* _this) {
    try {
        (*_this)->Reload();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetColorConfiguration(usd_StageRefPtr_t const* _this, sdf_AssetPath_t const* colorConfig) {
    try {
        (*_this)->SetColorConfiguration(*colorConfig);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetColorConfiguration(usd_StageRefPtr_t const* _this, sdf_AssetPath_t** _result) {
    try {
        *_result = new pxr::SdfAssetPath((*_this)->GetColorConfiguration());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetColorManagementSystem(usd_StageRefPtr_t const* _this, tf_Token_t const* cms) {
    try {
        (*_this)->SetColorManagementSystem(*cms);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetColorManagementSystem(usd_StageRefPtr_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken((*_this)->GetColorManagementSystem());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetPseudoRoot(usd_StageRefPtr_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->GetPseudoRoot());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetDefaultPrim(usd_StageRefPtr_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->GetDefaultPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_SetDefaultPrim(usd_StageRefPtr_t* _this, usd_Prim_t const* prim) {
    try {
        (*_this)->SetDefaultPrim(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_ClearDefaultPrim(usd_StageRefPtr_t* _this) {
    try {
        (*_this)->ClearDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_HasDefaultPrim(usd_StageRefPtr_t const* _this, bool* _result) {
    try {
        *_result = (*_this)->HasDefaultPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetPrimAtPath(usd_StageRefPtr_t const* _this, sdf_Path_t const* path, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->GetPrimAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetObjectAtPath(usd_StageRefPtr_t const* _this, sdf_Path_t const* path, usd_Object_t** _result) {
    try {
        *_result = new pxr::UsdObject((*_this)->GetObjectAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetPropertyAtPath(usd_StageRefPtr_t const* _this, sdf_Path_t const* path, usd_Property_t** _result) {
    try {
        *_result = new pxr::UsdProperty((*_this)->GetPropertyAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetAttributeAtPath(usd_StageRefPtr_t const* _this, sdf_Path_t const* path, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute((*_this)->GetAttributeAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_GetRelationshipAtPath(usd_StageRefPtr_t const* _this, sdf_Path_t const* path, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship((*_this)->GetRelationshipAtPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_OverridePrim(usd_StageRefPtr_t* _this, sdf_Path_t const* path, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->OverridePrim(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_DefinePrim(usd_StageRefPtr_t* _this, sdf_Path_t const* path, tf_Token_t const* typeName, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->DefinePrim(*path, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_CreateClassPrim(usd_StageRefPtr_t* _this, sdf_Path_t const* rootPrimPath, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim((*_this)->CreateClassPrim(*rootPrimPath));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_RemovePrim(usd_StageRefPtr_t* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = (*_this)->RemovePrim(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_ctor(usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_dtor(usd_StageRefPtr_t* _this) {
    delete _this;
    return 0;
}

int usd_StageRefPtrVector_data(usd_StageRefPtrVector_t* _this, usd_StageRefPtr_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_StageRefPtrVector_data_const(usd_StageRefPtrVector_t const* _this, usd_StageRefPtr_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_StageRefPtrVector_empty(usd_StageRefPtrVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_StageRefPtrVector_size(usd_StageRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_StageRefPtrVector_max_size(usd_StageRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_StageRefPtrVector_capacity(usd_StageRefPtrVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_StageRefPtrVector_clear(usd_StageRefPtrVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_StageRefPtrVector_pop_back(usd_StageRefPtrVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_StageRefPtrVector_op_index(usd_StageRefPtrVector_t const* _this, size_t __n, usd_StageRefPtr_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_StageRefPtrVector_default(usd_StageRefPtrVector_t** _result) {
    *_result = new pxr::UsdStageRefPtrVector();
    return 0;
}

int usd_StageRefPtrVector_dtor(usd_StageRefPtrVector_t* _this) {
    delete _this;
    return 0;
}

int usd_StageWeakPtr_get(usd_StageWeakPtr_t const* _this, usd_Stage_t** _result) {
    try {
        *_result = _this->operator->();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageWeakPtr_is_invalid(usd_StageWeakPtr_t const* _this, bool* _result) {
    try {
        *_result = _this->operator!();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageWeakPtr_ctor(usd_StageWeakPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageWeakPtr();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageWeakPtr_dtor(usd_StageWeakPtr_t* _this) {
    delete _this;
    return 0;
}

int usd_StageCache_GetAllStages(usd_StageCache_t const* _this, usd_StageRefPtrVector_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtrVector(_this->GetAllStages());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Size(usd_StageCache_t const* _this, size_t* _result) {
    try {
        *_result = _this->Size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_IsEmpty(usd_StageCache_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Find(usd_StageCache_t const* _this, usd_StageCacheId_t* id, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(_this->Find(*id));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindOneMatching_with_root_layer(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(_this->FindOneMatching(*rootLayer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindOneMatching_with_root_and_session_layer(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(_this->FindOneMatching(*rootLayer, *sessionLayer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindOneMatching_with_root_layer_and_resolver(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, ar_ResolverContext_t const* pathResolverContext, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(_this->FindOneMatching(*rootLayer, *pathResolverContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindOneMatching_with_root_and_session_layer_and_resolver(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(_this->FindOneMatching(*rootLayer, *sessionLayer, *pathResolverContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindAllMatching_with_root_layer(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, usd_StageRefPtrVector_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtrVector(_this->FindAllMatching(*rootLayer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindAllMatching_with_root_and_session_layer(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, usd_StageRefPtrVector_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtrVector(_this->FindAllMatching(*rootLayer, *sessionLayer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindAllMatching_with_root_layer_and_resolver(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, ar_ResolverContext_t const* pathResolverContext, usd_StageRefPtrVector_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtrVector(_this->FindAllMatching(*rootLayer, *pathResolverContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_FindAllMatching_with_root_and_session_layer_and_resolver(usd_StageCache_t const* _this, sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, usd_StageRefPtrVector_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtrVector(_this->FindAllMatching(*rootLayer, *sessionLayer, *pathResolverContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_GetId(usd_StageCache_t const* _this, usd_StageRefPtr_t const* stage, usd_StageCacheId_t** _result) {
    try {
        *_result = new pxr::UsdStageCache::Id(_this->GetId(*stage));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Contains(usd_StageCache_t const* _this, usd_StageRefPtr_t const* stage, bool* _result) {
    try {
        *_result = _this->Contains(*stage);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Contains_id(usd_StageCache_t const* _this, usd_StageCacheId_t* id, bool* _result) {
    try {
        *_result = _this->Contains(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Insert(usd_StageCache_t* _this, usd_StageRefPtr_t const* stage, usd_StageCacheId_t** _result) {
    try {
        *_result = new pxr::UsdStageCache::Id(_this->Insert(*stage));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Erase(usd_StageCache_t* _this, usd_StageRefPtr_t const* stage, bool* _result) {
    try {
        *_result = _this->Erase(*stage);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Erase_id(usd_StageCache_t* _this, usd_StageCacheId_t* id, bool* _result) {
    try {
        *_result = _this->Erase(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_EraseAll_with_root_layer(usd_StageCache_t* _this, sdf_LayerHandle_t const* rootLayer, size_t* _result) {
    try {
        *_result = _this->EraseAll(*rootLayer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_EraseAll_with_root_and_session_layer(usd_StageCache_t* _this, sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, size_t* _result) {
    try {
        *_result = _this->EraseAll(*rootLayer, *sessionLayer);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_EraseAll_with_root_and_session_layer_and_resolver(usd_StageCache_t* _this, sdf_LayerHandle_t const* rootLayer, sdf_LayerHandle_t const* sessionLayer, ar_ResolverContext_t const* pathResolverContext, size_t* _result) {
    try {
        *_result = _this->EraseAll(*rootLayer, *sessionLayer, *pathResolverContext);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_Clear(usd_StageCache_t* _this) {
    try {
        _this->Clear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_SetDebugName(usd_StageCache_t* _this, std_String_t const* debugName) {
    try {
        _this->SetDebugName(*debugName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_GetDebugName(usd_StageCache_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDebugName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_default(usd_StageCache_t** _result) {
    try {
        *_result = new pxr::UsdStageCache();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCache_dtor(usd_StageCache_t* _this) {
    delete _this;
    return 0;
}

int usd_StageCacheId_ToLongInt(usd_StageCacheId_t const* _this, long* _result) {
    try {
        *_result = _this->ToLongInt();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCacheId_ToString(usd_StageCacheId_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->ToString());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCacheId_IsValid(usd_StageCacheId_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCacheId_FromLongInt(long val, usd_StageCacheId_t** _result) {
    try {
        *_result = new pxr::UsdStageCache::Id(pxr::UsdStageCache::Id::FromLongInt(val));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCacheId_FromString(std_String_t const* s, usd_StageCacheId_t** _result) {
    try {
        *_result = new pxr::UsdStageCache::Id(pxr::UsdStageCache::Id::FromString(*s));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageCacheId_dtor(usd_StageCacheId_t* _this) {
    delete _this;
    return 0;
}

int usd_UsdStageCacheRequest_IsSatisfiedBy_stage(usd_UsdStageCacheRequest_t const* _this, usd_StageRefPtr_t const* stage, bool* _result) {
    try {
        *_result = _this->IsSatisfiedBy(*stage);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStageCacheRequest_IsSatisfiedBy_cache_request(usd_UsdStageCacheRequest_t const* _this, usd_UsdStageCacheRequest_t const* pending, bool* _result) {
    try {
        *_result = _this->IsSatisfiedBy(*pending);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStageCacheRequest_Manufacture(usd_UsdStageCacheRequest_t* _this, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(_this->Manufacture());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStageCacheRequest_dtor(usd_UsdStageCacheRequest_t* _this) {
    delete _this;
    return 0;
}

int usd_StageLoadRules_LoadWithDescendants(usd_StageLoadRules_t* _this, sdf_Path_t const* path) {
    try {
        _this->LoadWithDescendants(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_LoadWithoutDescendants(usd_StageLoadRules_t* _this, sdf_Path_t const* path) {
    try {
        _this->LoadWithoutDescendants(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_Unload(usd_StageLoadRules_t* _this, sdf_Path_t const* path) {
    try {
        _this->Unload(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_LoadAndUnload(usd_StageLoadRules_t* _this, sdf_PathSet_t const* loadSet, sdf_PathSet_t const* unloadSet, unsigned int policy) {
    try {
        _this->LoadAndUnload(*loadSet, *unloadSet, static_cast<pxr::UsdLoadPolicy>(policy));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_AddRule(usd_StageLoadRules_t* _this, sdf_Path_t const* path, unsigned int rule) {
    try {
        _this->AddRule(*path, static_cast<pxr::UsdStageLoadRules::Rule>(rule));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_Minimize(usd_StageLoadRules_t* _this) {
    try {
        _this->Minimize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_IsLoaded(usd_StageLoadRules_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->IsLoaded(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_IsLoadedWithAllDescendants(usd_StageLoadRules_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->IsLoadedWithAllDescendants(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_IsLoadedWithNoDescendants(usd_StageLoadRules_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->IsLoadedWithNoDescendants(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_GetEffectiveRuleForPath(usd_StageLoadRules_t const* _this, sdf_Path_t const* path, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetEffectiveRuleForPath(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_GetRules(usd_StageLoadRules_t const* _this, usd_PathStageLoadRulesRulePairVector_t const** _result) {
    try {
        *_result = &_this->GetRules();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_LoadAll(usd_StageLoadRules_t** _result) {
    try {
        *_result = new pxr::UsdStageLoadRules(pxr::UsdStageLoadRules::LoadAll());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_LoadNone(usd_StageLoadRules_t** _result) {
    try {
        *_result = new pxr::UsdStageLoadRules(pxr::UsdStageLoadRules::LoadNone());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageLoadRules_default(usd_StageLoadRules_t** _result) {
    *_result = new pxr::UsdStageLoadRules();
    return 0;
}

int usd_StageLoadRules_dtor(usd_StageLoadRules_t* _this) {
    delete _this;
    return 0;
}

int usd_PathStageLoadRulesRulePair_dtor(usd_PathStageLoadRulesRulePair_t* _this) {
    delete _this;
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_data(usd_PathStageLoadRulesRulePairVector_t* _this, usd_PathStageLoadRulesRulePair_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_data_const(usd_PathStageLoadRulesRulePairVector_t const* _this, usd_PathStageLoadRulesRulePair_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_empty(usd_PathStageLoadRulesRulePairVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_size(usd_PathStageLoadRulesRulePairVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_max_size(usd_PathStageLoadRulesRulePairVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_capacity(usd_PathStageLoadRulesRulePairVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_clear(usd_PathStageLoadRulesRulePairVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_pop_back(usd_PathStageLoadRulesRulePairVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_op_index(usd_PathStageLoadRulesRulePairVector_t const* _this, size_t __n, usd_PathStageLoadRulesRulePair_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_default(usd_PathStageLoadRulesRulePairVector_t** _result) {
    *_result = new std::vector<std::pair<pxr::SdfPath, pxr::UsdStageLoadRules::Rule>>();
    return 0;
}

int usd_PathStageLoadRulesRulePairVector_dtor(usd_PathStageLoadRulesRulePairVector_t* _this) {
    delete _this;
    return 0;
}

int usd_UsdStagePopulationMask_All(usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(pxr::UsdStagePopulationMask::All());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_Union(usd_UsdStagePopulationMask_t const* l, usd_UsdStagePopulationMask_t const* r, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(pxr::UsdStagePopulationMask::Union(*l, *r));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_GetUnion(usd_UsdStagePopulationMask_t const* _this, usd_UsdStagePopulationMask_t const* other, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(_this->GetUnion(*other));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_GetUnion_with_path(usd_UsdStagePopulationMask_t const* _this, sdf_Path_t const* path, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(_this->GetUnion(*path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_Intersection(usd_UsdStagePopulationMask_t const* l, usd_UsdStagePopulationMask_t const* r, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(pxr::UsdStagePopulationMask::Intersection(*l, *r));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_GetIntersection(usd_UsdStagePopulationMask_t const* _this, usd_UsdStagePopulationMask_t const* other, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(_this->GetIntersection(*other));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_Includes(usd_UsdStagePopulationMask_t const* _this, usd_UsdStagePopulationMask_t const* other, bool* _result) {
    try {
        *_result = _this->Includes(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_Includes_path(usd_UsdStagePopulationMask_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->Includes(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_IncludesSubtree(usd_UsdStagePopulationMask_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->IncludesSubtree(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_IsEmpty(usd_UsdStagePopulationMask_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_GetIncludedChildNames(usd_UsdStagePopulationMask_t const* _this, sdf_Path_t const* path, tf_TokenVector_t* childNames, bool* _result) {
    try {
        *_result = _this->GetIncludedChildNames(*path, childNames);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_GetPaths(usd_UsdStagePopulationMask_t const* _this, sdf_PathVector_t** _result) {
    try {
        *_result = new pxr::SdfPathVector(_this->GetPaths());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_Add(usd_UsdStagePopulationMask_t* _this, usd_UsdStagePopulationMask_t const* other, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = &_this->Add(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_Add_path(usd_UsdStagePopulationMask_t* _this, sdf_Path_t const* path, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = &_this->Add(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_op_eq(usd_UsdStagePopulationMask_t const* _this, usd_UsdStagePopulationMask_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_op_neq(usd_UsdStagePopulationMask_t const* _this, usd_UsdStagePopulationMask_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_swap(usd_UsdStagePopulationMask_t* _this, usd_UsdStagePopulationMask_t* other) {
    try {
        _this->swap(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_default(usd_UsdStagePopulationMask_t** _result) {
    *_result = new pxr::UsdStagePopulationMask();
    return 0;
}

int usd_UsdStagePopulationMask_from_paths(sdf_PathVector_t const* paths, usd_UsdStagePopulationMask_t** _result) {
    try {
        *_result = new pxr::UsdStagePopulationMask(*paths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdStagePopulationMask_dtor(usd_UsdStagePopulationMask_t* _this) {
    delete _this;
    return 0;
}

int usd_TimeCode_IsEarliestTime(usd_TimeCode_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEarliestTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_TimeCode_IsDefault(usd_TimeCode_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefault();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_TimeCode_IsNumeric(usd_TimeCode_t const* _this, bool* _result) {
    try {
        *_result = _this->IsNumeric();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_TimeCode_GetValue(usd_TimeCode_t const* _this, double* _result) {
    try {
        *_result = _this->GetValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_TimeCode_EarliestTime(usd_TimeCode_t* _result) {
    try {
        *_result = pxr::UsdTimeCode::EarliestTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_TimeCode_Default(usd_TimeCode_t* _result) {
    try {
        *_result = pxr::UsdTimeCode::Default();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_TimeCode_SafeStep(double maxValue, double maxCompression, double* _result) {
    try {
        *_result = pxr::UsdTimeCode::SafeStep(maxValue, maxCompression);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_TimeCode_from_time(double param00, usd_TimeCode_t* _result) {
    new (_result) pxr::UsdTimeCode(param00);
    return 0;
}

int usd_TimeCode_from_sdf_timecode(sdf_TimeCode_t param00, usd_TimeCode_t* _result) {
    new (_result) pxr::UsdTimeCode(param00);
    return 0;
}

int usd_TimeCodeVector_data(usd_TimeCodeVector_t* _this, usd_TimeCode_t** _result) {
    *_result = _this->data();
    return 0;
}

int usd_TimeCodeVector_data_const(usd_TimeCodeVector_t const* _this, usd_TimeCode_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usd_TimeCodeVector_empty(usd_TimeCodeVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usd_TimeCodeVector_size(usd_TimeCodeVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usd_TimeCodeVector_max_size(usd_TimeCodeVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usd_TimeCodeVector_capacity(usd_TimeCodeVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usd_TimeCodeVector_clear(usd_TimeCodeVector_t* _this) {
    _this->clear();
    return 0;
}

int usd_TimeCodeVector_pop_back(usd_TimeCodeVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usd_TimeCodeVector_op_index(usd_TimeCodeVector_t const* _this, size_t __n, usd_TimeCode_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usd_TimeCodeVector_default(usd_TimeCodeVector_t** _result) {
    *_result = new std::vector<pxr::UsdTimeCode>();
    return 0;
}

int usd_TimeCodeVector_dtor(usd_TimeCodeVector_t* _this) {
    delete _this;
    return 0;
}

int usd_UsdVariantSet_AddVariant(usd_UsdVariantSet_t* _this, std_String_t const* variantName, unsigned int position, bool* _result) {
    try {
        *_result = _this->AddVariant(*variantName, static_cast<pxr::UsdListPosition>(position));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_GetVariantNames(usd_UsdVariantSet_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetVariantNames());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_HasAuthoredVariant(usd_UsdVariantSet_t const* _this, std_String_t const* variantName, bool* _result) {
    try {
        *_result = _this->HasAuthoredVariant(*variantName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_GetVariantSelection(usd_UsdVariantSet_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetVariantSelection());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_HasAuthoredVariantSelection(usd_UsdVariantSet_t const* _this, std_String_t* value, bool* _result) {
    try {
        *_result = _this->HasAuthoredVariantSelection(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_SetVariantSelection(usd_UsdVariantSet_t* _this, std_String_t const* variantName, bool* _result) {
    try {
        *_result = _this->SetVariantSelection(*variantName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_ClearVariantSelection(usd_UsdVariantSet_t* _this, bool* _result) {
    try {
        *_result = _this->ClearVariantSelection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_BlockVariantSelection(usd_UsdVariantSet_t* _this, bool* _result) {
    try {
        *_result = _this->BlockVariantSelection();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_GetVariantEditTarget(usd_UsdVariantSet_t const* _this, sdf_LayerHandle_t const* layer, usd_EditTarget_t** _result) {
    try {
        *_result = new pxr::UsdEditTarget(_this->GetVariantEditTarget(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_GetVariantEditContext(usd_UsdVariantSet_t const* _this, sdf_LayerHandle_t const* layer, usd_StageEditTargetPair_t** _result) {
    try {
        *_result = new std::pair<pxr::UsdStagePtr, pxr::UsdEditTarget>(_this->GetVariantEditContext(*layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_GetPrim(usd_UsdVariantSet_t const* _this, usd_Prim_t const** _result) {
    try {
        *_result = &_this->GetPrim();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_GetName(usd_UsdVariantSet_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_IsValid(usd_UsdVariantSet_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_op_bool(usd_UsdVariantSet_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSet_dtor(usd_UsdVariantSet_t* _this) {
    delete _this;
    return 0;
}

int usd_UsdVariantSets_AddVariantSet(usd_UsdVariantSets_t* _this, std_String_t const* variantSetName, unsigned int position, usd_UsdVariantSet_t** _result) {
    try {
        *_result = new pxr::UsdVariantSet(_this->AddVariantSet(*variantSetName, static_cast<pxr::UsdListPosition>(position)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_GetNames_into(usd_UsdVariantSets_t const* _this, std_StringVector_t* names, bool* _result) {
    try {
        *_result = _this->GetNames(names);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_GetNames(usd_UsdVariantSets_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->GetNames());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_op_index(usd_UsdVariantSets_t const* _this, std_String_t const* variantSetName, usd_UsdVariantSet_t** _result) {
    try {
        *_result = new pxr::UsdVariantSet(_this->operator[](*variantSetName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_GetVariantSet(usd_UsdVariantSets_t const* _this, std_String_t const* variantSetName, usd_UsdVariantSet_t** _result) {
    try {
        *_result = new pxr::UsdVariantSet(_this->GetVariantSet(*variantSetName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_HasVariantSet(usd_UsdVariantSets_t const* _this, std_String_t const* variantSetName, bool* _result) {
    try {
        *_result = _this->HasVariantSet(*variantSetName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_GetVariantSelection(usd_UsdVariantSets_t const* _this, std_String_t const* variantSetName, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetVariantSelection(*variantSetName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_SetSelection(usd_UsdVariantSets_t* _this, std_String_t const* variantSetName, std_String_t const* variantName, bool* _result) {
    try {
        *_result = _this->SetSelection(*variantSetName, *variantName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_GetAllVariantSelections(usd_UsdVariantSets_t const* _this, sdf_FileFormatFileFormatArguments_t** _result) {
    try {
        *_result = new pxr::SdfFileFormat::FileFormatArguments(_this->GetAllVariantSelections());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdVariantSets_dtor(usd_UsdVariantSets_t* _this) {
    delete _this;
    return 0;
}

int usd_StageEditTargetPair_dtor(usd_StageEditTargetPair_t* _this) {
    delete _this;
    return 0;
}

int usd_UsdIsSubtype(unsigned int baseType, unsigned int subType, bool* _result) {
    try {
        *_result = pxr::UsdIsSubtype(static_cast<pxr::UsdObjType>(baseType), static_cast<pxr::UsdObjType>(subType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdIsConvertible(unsigned int from, unsigned int to, bool* _result) {
    try {
        *_result = pxr::UsdIsConvertible(static_cast<pxr::UsdObjType>(from), static_cast<pxr::UsdObjType>(to));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdIsConcrete(unsigned int type, bool* _result) {
    try {
        *_result = pxr::UsdIsConcrete(static_cast<pxr::UsdObjType>(type));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetProperties(usd_Prim_t* prim, usd_PropertyVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdProperty>(bblext::UsdPrim_GetProperties(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Prim_GetAuthoredProperties(usd_Prim_t* prim, usd_PropertyVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdProperty>(bblext::UsdPrim_GetAuthoredProperties(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_PrimSiblingIterator_op_eq(usd_PrimSiblingIterator_t const* lhs, usd_PrimSiblingIterator_t const* rhs, bool* _result) {
    try {
        *_result = bblext::PrimSiblingIterator_op_eq(*lhs, *rhs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdSchemaRegistrySchemaInfo_identifier(usd_SchemaRegistrySchemaInfo_t const* info, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(bblext::UsdSchemaRegistrySchemaInfo_identifier(*info));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdSchemaRegistrySchemaInfo_type(usd_SchemaRegistrySchemaInfo_t const* info, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(bblext::UsdSchemaRegistrySchemaInfo_type(*info));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdSchemaRegistrySchemaInfo_family(usd_SchemaRegistrySchemaInfo_t const* info, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(bblext::UsdSchemaRegistrySchemaInfo_family(*info));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdSchemaRegistrySchemaInfo_version(usd_SchemaRegistrySchemaInfo_t const* info, unsigned int* _result) {
    try {
        *_result = bblext::UsdSchemaRegistrySchemaInfo_version(*info);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_UsdSchemaRegistrySchemaInfo_kind(usd_SchemaRegistrySchemaInfo_t const* info, int* _result) {
    try {
        *_result = static_cast<int>(bblext::UsdSchemaRegistrySchemaInfo_kind(*info));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_Stage_Open(char const* filename, unsigned int loadSet, usd_StageRefPtr_t** _result) {
    try {
        *_result = new pxr::UsdStageRefPtr(bblext::Stage_Open(filename, static_cast<pxr::UsdStage::InitialLoadSet>(loadSet)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usd_StageRefPtr_ExportToString(usd_StageRefPtr_t const* stage, std_String_t** output, bool addSourceFileComment, bool* _result) {
    try {
        *_result = bblext::StageRefPtr_ExportToString(*stage, output, addSourceFileComment);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetTypeAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTypeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateTypeAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTypeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetBasisAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetBasisAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateBasisAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateBasisAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetWrapAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWrapAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateWrapAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWrapAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetCurveVertexCountsAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCurveVertexCountsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateCurveVertexCountsAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCurveVertexCountsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetWidthsAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWidthsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateWidthsAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWidthsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetWidthsInterpolation(usdGeom_BasisCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetWidthsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_SetWidthsInterpolation(usdGeom_BasisCurves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetWidthsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetCurveCount(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t timeCode, size_t* _result) {
    try {
        *_result = _this->GetCurveCount(timeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetPointsAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreatePointsAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetVelocitiesAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateVelocitiesAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetAccelerationsAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateAccelerationsAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetNormalsAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateNormalsAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetNormalsInterpolation(usdGeom_BasisCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_SetNormalsInterpolation(usdGeom_BasisCurves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputePointsAtTime(usdGeom_BasisCurves_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetDisplayColorAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateDisplayColorAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetDisplayOpacityAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateDisplayOpacityAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetDoubleSidedAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateDoubleSidedAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetOrientationAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateOrientationAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetDisplayColorPrimvar(usdGeom_BasisCurves_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateDisplayColorPrimvar(usdGeom_BasisCurves_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetExtentAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateExtentAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetXformOpOrderAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddXformOp(usdGeom_BasisCurves_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetXformOp(usdGeom_BasisCurves_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddTranslateOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddScaleOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateXOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateYOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateZOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateXYZOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateXZYOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateYXZOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateYZXOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateZXYOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddRotateZYXOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddOrientOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_AddTransformOp(usdGeom_BasisCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_SetResetXformStack(usdGeom_BasisCurves_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_SetXformOpOrder(usdGeom_BasisCurves_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetOrderedXformOps(usdGeom_BasisCurves_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ClearXformOpOrder(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_MakeMatrixXform(usdGeom_BasisCurves_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_TransformMightBeTimeVarying(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_TransformMightBeTimeVarying_using(usdGeom_BasisCurves_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetTimeSamples(usdGeom_BasisCurves_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetTimeSamplesInInterval(usdGeom_BasisCurves_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetLocalTransformation(usdGeom_BasisCurves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetLocalTransformation_with_ops(usdGeom_BasisCurves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetVisibilityAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateVisibilityAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetPurposeAttr(usdGeom_BasisCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreatePurposeAttr(usdGeom_BasisCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetProxyPrimRel(usdGeom_BasisCurves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_CreateProxyPrimRel(usdGeom_BasisCurves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_MakeVisible(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_MakeInvisible(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputeVisibility(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetPurposeVisibilityAttr(usdGeom_BasisCurves_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputePurposeInfo(usdGeom_BasisCurves_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputePurposeInfo_given_parent(usdGeom_BasisCurves_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputePurpose(usdGeom_BasisCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputeProxyPrim(usdGeom_BasisCurves_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_SetProxyPrim(usdGeom_BasisCurves_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputeWorldBound(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputeLocalBound(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputeUntransformedBound(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputeLocalToWorldTransform(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_ComputeParentToWorldTransform(usdGeom_BasisCurves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_IsConcrete(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_IsTyped(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_IsAPISchema(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_IsAppliedAPISchema(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_IsMultipleApplyAPISchema(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetSchemaKind(usdGeom_BasisCurves_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetPrim(usdGeom_BasisCurves_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetPath(usdGeom_BasisCurves_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_GetSchemaClassPrimDefinition(usdGeom_BasisCurves_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_op_bool(usdGeom_BasisCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_new(usd_Prim_t const* param00, usdGeom_BasisCurves_t** _result) {
    try {
        *_result = new pxr::UsdGeomBasisCurves(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BasisCurves_dtor(usdGeom_BasisCurves_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_BBoxCache_ComputeWorldBound(usdGeom_BBoxCache_t* _this, usd_Prim_t const* prim, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputeWorldBoundWithOverrides(usdGeom_BBoxCache_t* _this, usd_Prim_t const* prim, sdf_PathSet_t const* pathsToSkip, gf_Matrix4d_t const* primOverride, usdGeom_PathMatrixHashMap_t const* ctmOverrides, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBoundWithOverrides(*prim, *pathsToSkip, *primOverride, *ctmOverrides));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputeRelativeBound(usdGeom_BBoxCache_t* _this, usd_Prim_t const* prim, usd_Prim_t const* relativeToAncestorPrim, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeRelativeBound(*prim, *relativeToAncestorPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputeLocalBound(usdGeom_BBoxCache_t* _this, usd_Prim_t const* prim, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputeUntransformedBound(usdGeom_BBoxCache_t* _this, usd_Prim_t const* prim, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceWorldBound(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t instanceId, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputePointInstanceWorldBound(*instancer, instanceId));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceWorldBounds(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t const* instanceIdBegin, size_t numIds, gf_BBox3d_t* result, bool* _result) {
    try {
        *_result = _this->ComputePointInstanceWorldBounds(*instancer, instanceIdBegin, numIds, result);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceRelativeBounds(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t const* instanceIdBegin, size_t numIds, usd_Prim_t const* relativeToAncestorPrim, gf_BBox3d_t* result, bool* _result) {
    try {
        *_result = _this->ComputePointInstanceRelativeBounds(*instancer, instanceIdBegin, numIds, *relativeToAncestorPrim, result);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceRelativeBound(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t instanceId, usd_Prim_t const* relativeToAncestorPrim, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputePointInstanceRelativeBound(*instancer, instanceId, *relativeToAncestorPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceLocalBounds(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t const* instanceIdBegin, size_t numIds, gf_BBox3d_t* result, bool* _result) {
    try {
        *_result = _this->ComputePointInstanceLocalBounds(*instancer, instanceIdBegin, numIds, result);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceLocalBound(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t instanceId, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputePointInstanceLocalBound(*instancer, instanceId));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceUntransformedBounds(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t const* instanceIdBegin, size_t numIds, gf_BBox3d_t* result, bool* _result) {
    try {
        *_result = _this->ComputePointInstanceUntransformedBounds(*instancer, instanceIdBegin, numIds, result);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ComputePointInstanceUntransformedBound(usdGeom_BBoxCache_t* _this, usdGeom_PointInstancer_t const* instancer, int64_t instanceId, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputePointInstanceUntransformedBound(*instancer, instanceId));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_Clear(usdGeom_BBoxCache_t* _this) {
    try {
        _this->Clear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_SetIncludedPurposes(usdGeom_BBoxCache_t* _this, tf_TokenVector_t const* includedPurposes) {
    try {
        _this->SetIncludedPurposes(*includedPurposes);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_GetIncludedPurposes(usdGeom_BBoxCache_t* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetIncludedPurposes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_GetUseExtentsHint(usdGeom_BBoxCache_t const* _this, bool* _result) {
    try {
        *_result = _this->GetUseExtentsHint();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_GetIgnoreVisibility(usdGeom_BBoxCache_t const* _this, bool* _result) {
    try {
        *_result = _this->GetIgnoreVisibility();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_SetTime(usdGeom_BBoxCache_t* _this, usd_TimeCode_t time) {
    try {
        _this->SetTime(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_GetTime(usdGeom_BBoxCache_t const* _this, usd_TimeCode_t* _result) {
    try {
        *_result = _this->GetTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_SetBaseTime(usdGeom_BBoxCache_t* _this, usd_TimeCode_t baseTime) {
    try {
        _this->SetBaseTime(baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_GetBaseTime(usdGeom_BBoxCache_t const* _this, usd_TimeCode_t* _result) {
    try {
        *_result = _this->GetBaseTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ClearBaseTime(usdGeom_BBoxCache_t* _this) {
    try {
        _this->ClearBaseTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_HasBaseTime(usdGeom_BBoxCache_t const* _this, bool* _result) {
    try {
        *_result = _this->HasBaseTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_ctor(usd_TimeCode_t time, tf_TokenVector_t* includedPurposes, bool useExtentsHint, bool ignoreVisibility, usdGeom_BBoxCache_t** _result) {
    try {
        *_result = new pxr::UsdGeomBBoxCache(time, *includedPurposes, useExtentsHint, ignoreVisibility);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_BBoxCache_dtor(usdGeom_BBoxCache_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_PathMatrixHashMap_dtor(usdGeom_PathMatrixHashMap_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Boundable_GetExtentAttr(usdGeom_Boundable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_CreateExtentAttr(usdGeom_Boundable_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetXformOpOrderAttr(usdGeom_Boundable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddXformOp(usdGeom_Boundable_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetXformOp(usdGeom_Boundable_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddTranslateOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddScaleOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateXOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateYOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateZOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateXYZOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateXZYOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateYXZOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateYZXOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateZXYOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddRotateZYXOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddOrientOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_AddTransformOp(usdGeom_Boundable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_SetResetXformStack(usdGeom_Boundable_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_SetXformOpOrder(usdGeom_Boundable_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetOrderedXformOps(usdGeom_Boundable_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ClearXformOpOrder(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_MakeMatrixXform(usdGeom_Boundable_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_TransformMightBeTimeVarying(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_TransformMightBeTimeVarying_using(usdGeom_Boundable_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetTimeSamples(usdGeom_Boundable_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetTimeSamplesInInterval(usdGeom_Boundable_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetLocalTransformation(usdGeom_Boundable_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetLocalTransformation_with_ops(usdGeom_Boundable_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetVisibilityAttr(usdGeom_Boundable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_CreateVisibilityAttr(usdGeom_Boundable_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetPurposeAttr(usdGeom_Boundable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_CreatePurposeAttr(usdGeom_Boundable_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetProxyPrimRel(usdGeom_Boundable_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_CreateProxyPrimRel(usdGeom_Boundable_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_MakeVisible(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_MakeInvisible(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputeVisibility(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetPurposeVisibilityAttr(usdGeom_Boundable_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputePurposeInfo(usdGeom_Boundable_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputePurposeInfo_given_parent(usdGeom_Boundable_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputePurpose(usdGeom_Boundable_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputeProxyPrim(usdGeom_Boundable_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_SetProxyPrim(usdGeom_Boundable_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputeWorldBound(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputeLocalBound(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputeUntransformedBound(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputeLocalToWorldTransform(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_ComputeParentToWorldTransform(usdGeom_Boundable_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_IsConcrete(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_IsTyped(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_IsAPISchema(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_IsAppliedAPISchema(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_IsMultipleApplyAPISchema(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetSchemaKind(usdGeom_Boundable_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetPrim(usdGeom_Boundable_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetPath(usdGeom_Boundable_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_GetSchemaClassPrimDefinition(usdGeom_Boundable_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_op_bool(usdGeom_Boundable_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_new(usd_Prim_t const* param00, usdGeom_Boundable_t** _result) {
    try {
        *_result = new pxr::UsdGeomBoundable(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Boundable_dtor(usdGeom_Boundable_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Camera_GetProjectionAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetProjectionAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateProjectionAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateProjectionAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetHorizontalApertureAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetHorizontalApertureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateHorizontalApertureAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateHorizontalApertureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetVerticalApertureAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVerticalApertureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateVerticalApertureAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVerticalApertureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetHorizontalApertureOffsetAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetHorizontalApertureOffsetAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateHorizontalApertureOffsetAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateHorizontalApertureOffsetAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetVerticalApertureOffsetAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVerticalApertureOffsetAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateVerticalApertureOffsetAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVerticalApertureOffsetAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetFocalLengthAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFocalLengthAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateFocalLengthAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFocalLengthAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetClippingRangeAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetClippingRangeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateClippingRangeAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateClippingRangeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetClippingPlanesAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetClippingPlanesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateClippingPlanesAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateClippingPlanesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetFStopAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFStopAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateFStopAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFStopAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetFocusDistanceAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFocusDistanceAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateFocusDistanceAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFocusDistanceAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetStereoRoleAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetStereoRoleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateStereoRoleAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateStereoRoleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetShutterOpenAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShutterOpenAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateShutterOpenAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShutterOpenAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetShutterCloseAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShutterCloseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateShutterCloseAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShutterCloseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetExposureAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateExposureAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetCamera(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time, gf_Camera_t** _result) {
    try {
        *_result = new pxr::GfCamera(_this->GetCamera(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_SetFromCamera(usdGeom_Camera_t* _this, gf_Camera_t const* camera, usd_TimeCode_t const* time) {
    try {
        _this->SetFromCamera(*camera, *time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetXformOpOrderAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddXformOp(usdGeom_Camera_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetXformOp(usdGeom_Camera_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddTranslateOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddScaleOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateXOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateYOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateZOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateXYZOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateXZYOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateYXZOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateYZXOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateZXYOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddRotateZYXOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddOrientOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_AddTransformOp(usdGeom_Camera_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_SetResetXformStack(usdGeom_Camera_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_SetXformOpOrder(usdGeom_Camera_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetOrderedXformOps(usdGeom_Camera_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ClearXformOpOrder(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_MakeMatrixXform(usdGeom_Camera_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_TransformMightBeTimeVarying(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_TransformMightBeTimeVarying_using(usdGeom_Camera_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetTimeSamples(usdGeom_Camera_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetTimeSamplesInInterval(usdGeom_Camera_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetLocalTransformation(usdGeom_Camera_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetLocalTransformation_with_ops(usdGeom_Camera_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetVisibilityAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateVisibilityAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetPurposeAttr(usdGeom_Camera_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreatePurposeAttr(usdGeom_Camera_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetProxyPrimRel(usdGeom_Camera_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_CreateProxyPrimRel(usdGeom_Camera_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_MakeVisible(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_MakeInvisible(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputeVisibility(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetPurposeVisibilityAttr(usdGeom_Camera_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputePurposeInfo(usdGeom_Camera_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputePurposeInfo_given_parent(usdGeom_Camera_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputePurpose(usdGeom_Camera_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputeProxyPrim(usdGeom_Camera_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_SetProxyPrim(usdGeom_Camera_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputeWorldBound(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputeLocalBound(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputeUntransformedBound(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputeLocalToWorldTransform(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_ComputeParentToWorldTransform(usdGeom_Camera_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_IsConcrete(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_IsTyped(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_IsAPISchema(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_IsAppliedAPISchema(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_IsMultipleApplyAPISchema(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetSchemaKind(usdGeom_Camera_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetPrim(usdGeom_Camera_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetPath(usdGeom_Camera_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_GetSchemaClassPrimDefinition(usdGeom_Camera_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_op_bool(usdGeom_Camera_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_new(usd_Prim_t const* param00, usdGeom_Camera_t** _result) {
    try {
        *_result = new pxr::UsdGeomCamera(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Camera_dtor(usdGeom_Camera_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Capsule_GetHeightAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetHeightAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateHeightAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateHeightAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetRadiusAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateRadiusAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetAxisAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAxisAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateAxisAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAxisAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetDisplayColorAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateDisplayColorAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetDisplayOpacityAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateDisplayOpacityAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetDoubleSidedAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateDoubleSidedAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetOrientationAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateOrientationAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetDisplayColorPrimvar(usdGeom_Capsule_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateDisplayColorPrimvar(usdGeom_Capsule_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetExtentAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateExtentAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetXformOpOrderAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddXformOp(usdGeom_Capsule_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetXformOp(usdGeom_Capsule_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddTranslateOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddScaleOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateXOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateYOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateZOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateXYZOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateXZYOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateYXZOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateYZXOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateZXYOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddRotateZYXOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddOrientOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_AddTransformOp(usdGeom_Capsule_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_SetResetXformStack(usdGeom_Capsule_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_SetXformOpOrder(usdGeom_Capsule_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetOrderedXformOps(usdGeom_Capsule_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ClearXformOpOrder(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_MakeMatrixXform(usdGeom_Capsule_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_TransformMightBeTimeVarying(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_TransformMightBeTimeVarying_using(usdGeom_Capsule_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetTimeSamples(usdGeom_Capsule_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetTimeSamplesInInterval(usdGeom_Capsule_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetLocalTransformation(usdGeom_Capsule_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetLocalTransformation_with_ops(usdGeom_Capsule_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetVisibilityAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateVisibilityAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetPurposeAttr(usdGeom_Capsule_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreatePurposeAttr(usdGeom_Capsule_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetProxyPrimRel(usdGeom_Capsule_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_CreateProxyPrimRel(usdGeom_Capsule_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_MakeVisible(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_MakeInvisible(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputeVisibility(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetPurposeVisibilityAttr(usdGeom_Capsule_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputePurposeInfo(usdGeom_Capsule_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputePurposeInfo_given_parent(usdGeom_Capsule_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputePurpose(usdGeom_Capsule_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputeProxyPrim(usdGeom_Capsule_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_SetProxyPrim(usdGeom_Capsule_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputeWorldBound(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputeLocalBound(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputeUntransformedBound(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputeLocalToWorldTransform(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_ComputeParentToWorldTransform(usdGeom_Capsule_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_IsConcrete(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_IsTyped(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_IsAPISchema(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_IsAppliedAPISchema(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_IsMultipleApplyAPISchema(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetSchemaKind(usdGeom_Capsule_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetPrim(usdGeom_Capsule_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetPath(usdGeom_Capsule_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_GetSchemaClassPrimDefinition(usdGeom_Capsule_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_op_bool(usdGeom_Capsule_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_new(usd_Prim_t const* param00, usdGeom_Capsule_t** _result) {
    try {
        *_result = new pxr::UsdGeomCapsule(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Capsule_dtor(usdGeom_Capsule_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Cone_GetHeightAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetHeightAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateHeightAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateHeightAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetRadiusAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateRadiusAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetAxisAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAxisAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateAxisAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAxisAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetDisplayColorAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateDisplayColorAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetDisplayOpacityAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateDisplayOpacityAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetDoubleSidedAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateDoubleSidedAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetOrientationAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateOrientationAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetDisplayColorPrimvar(usdGeom_Cone_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateDisplayColorPrimvar(usdGeom_Cone_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetExtentAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateExtentAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetXformOpOrderAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddXformOp(usdGeom_Cone_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetXformOp(usdGeom_Cone_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddTranslateOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddScaleOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateXOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateYOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateZOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateXYZOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateXZYOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateYXZOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateYZXOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateZXYOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddRotateZYXOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddOrientOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_AddTransformOp(usdGeom_Cone_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_SetResetXformStack(usdGeom_Cone_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_SetXformOpOrder(usdGeom_Cone_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetOrderedXformOps(usdGeom_Cone_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ClearXformOpOrder(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_MakeMatrixXform(usdGeom_Cone_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_TransformMightBeTimeVarying(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_TransformMightBeTimeVarying_using(usdGeom_Cone_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetTimeSamples(usdGeom_Cone_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetTimeSamplesInInterval(usdGeom_Cone_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetLocalTransformation(usdGeom_Cone_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetLocalTransformation_with_ops(usdGeom_Cone_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetVisibilityAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateVisibilityAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetPurposeAttr(usdGeom_Cone_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreatePurposeAttr(usdGeom_Cone_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetProxyPrimRel(usdGeom_Cone_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_CreateProxyPrimRel(usdGeom_Cone_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_MakeVisible(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_MakeInvisible(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputeVisibility(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetPurposeVisibilityAttr(usdGeom_Cone_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputePurposeInfo(usdGeom_Cone_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputePurposeInfo_given_parent(usdGeom_Cone_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputePurpose(usdGeom_Cone_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputeProxyPrim(usdGeom_Cone_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_SetProxyPrim(usdGeom_Cone_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputeWorldBound(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputeLocalBound(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputeUntransformedBound(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputeLocalToWorldTransform(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_ComputeParentToWorldTransform(usdGeom_Cone_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_IsConcrete(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_IsTyped(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_IsAPISchema(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_IsAppliedAPISchema(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_IsMultipleApplyAPISchema(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetSchemaKind(usdGeom_Cone_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetPrim(usdGeom_Cone_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetPath(usdGeom_Cone_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_GetSchemaClassPrimDefinition(usdGeom_Cone_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_op_bool(usdGeom_Cone_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_new(usd_Prim_t const* param00, usdGeom_Cone_t** _result) {
    try {
        *_result = new pxr::UsdGeomCone(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cone_dtor(usdGeom_Cone_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_ConstraintTarget_IsValid(usd_Attribute_t const* attr, bool* _result) {
    try {
        *_result = pxr::UsdGeomConstraintTarget::IsValid(*attr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_GetAttr(usdGeom_ConstraintTarget_t const* _this, usd_Attribute_t const** _result) {
    try {
        *_result = &_this->GetAttr();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_IsDefined(usdGeom_ConstraintTarget_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_Get(usdGeom_ConstraintTarget_t const* _this, gf_Matrix4d_t* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Get(value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_Set(usdGeom_ConstraintTarget_t const* _this, gf_Matrix4d_t const* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Set(*value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_GetIdentifier(usdGeom_ConstraintTarget_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetIdentifier());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_SetIdentifier(usdGeom_ConstraintTarget_t* _this, tf_Token_t const* identifier) {
    try {
        _this->SetIdentifier(*identifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_ComputeInWorldSpace(usdGeom_ConstraintTarget_t const* _this, usd_TimeCode_t time, usdGeom_XformCache_t* xfCache, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeInWorldSpace(time, xfCache);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_GetConstraintAttrName(std_String_t const* constraintName, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdGeomConstraintTarget::GetConstraintAttrName(*constraintName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_new(usd_Attribute_t const* param00, usdGeom_ConstraintTarget_t** _result) {
    try {
        *_result = new pxr::UsdGeomConstraintTarget(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ConstraintTarget_dtor(usdGeom_ConstraintTarget_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_ConstraintTargetVector_data(usdGeom_ConstraintTargetVector_t* _this, usdGeom_ConstraintTarget_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_ConstraintTargetVector_data_const(usdGeom_ConstraintTargetVector_t const* _this, usdGeom_ConstraintTarget_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_ConstraintTargetVector_empty(usdGeom_ConstraintTargetVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdGeom_ConstraintTargetVector_size(usdGeom_ConstraintTargetVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdGeom_ConstraintTargetVector_max_size(usdGeom_ConstraintTargetVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdGeom_ConstraintTargetVector_capacity(usdGeom_ConstraintTargetVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdGeom_ConstraintTargetVector_clear(usdGeom_ConstraintTargetVector_t* _this) {
    _this->clear();
    return 0;
}

int usdGeom_ConstraintTargetVector_pop_back(usdGeom_ConstraintTargetVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdGeom_ConstraintTargetVector_op_index(usdGeom_ConstraintTargetVector_t const* _this, size_t __n, usdGeom_ConstraintTarget_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdGeom_ConstraintTargetVector_default(usdGeom_ConstraintTargetVector_t** _result) {
    *_result = new std::vector<pxr::UsdGeomConstraintTarget>();
    return 0;
}

int usdGeom_ConstraintTargetVector_dtor(usdGeom_ConstraintTargetVector_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Cube_GetSizeAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateSizeAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetDisplayColorAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateDisplayColorAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetDisplayOpacityAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateDisplayOpacityAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetDoubleSidedAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateDoubleSidedAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetOrientationAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateOrientationAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetDisplayColorPrimvar(usdGeom_Cube_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateDisplayColorPrimvar(usdGeom_Cube_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetExtentAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateExtentAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetXformOpOrderAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddXformOp(usdGeom_Cube_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetXformOp(usdGeom_Cube_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddTranslateOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddScaleOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateXOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateYOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateZOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateXYZOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateXZYOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateYXZOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateYZXOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateZXYOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddRotateZYXOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddOrientOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_AddTransformOp(usdGeom_Cube_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_SetResetXformStack(usdGeom_Cube_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_SetXformOpOrder(usdGeom_Cube_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetOrderedXformOps(usdGeom_Cube_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ClearXformOpOrder(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_MakeMatrixXform(usdGeom_Cube_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_TransformMightBeTimeVarying(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_TransformMightBeTimeVarying_using(usdGeom_Cube_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetTimeSamples(usdGeom_Cube_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetTimeSamplesInInterval(usdGeom_Cube_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetLocalTransformation(usdGeom_Cube_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetLocalTransformation_with_ops(usdGeom_Cube_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetVisibilityAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateVisibilityAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetPurposeAttr(usdGeom_Cube_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreatePurposeAttr(usdGeom_Cube_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetProxyPrimRel(usdGeom_Cube_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_CreateProxyPrimRel(usdGeom_Cube_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_MakeVisible(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_MakeInvisible(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputeVisibility(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetPurposeVisibilityAttr(usdGeom_Cube_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputePurposeInfo(usdGeom_Cube_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputePurposeInfo_given_parent(usdGeom_Cube_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputePurpose(usdGeom_Cube_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputeProxyPrim(usdGeom_Cube_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_SetProxyPrim(usdGeom_Cube_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputeWorldBound(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputeLocalBound(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputeUntransformedBound(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputeLocalToWorldTransform(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_ComputeParentToWorldTransform(usdGeom_Cube_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_IsConcrete(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_IsTyped(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_IsAPISchema(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_IsAppliedAPISchema(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_IsMultipleApplyAPISchema(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetSchemaKind(usdGeom_Cube_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetPrim(usdGeom_Cube_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetPath(usdGeom_Cube_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_GetSchemaClassPrimDefinition(usdGeom_Cube_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_op_bool(usdGeom_Cube_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_new(usd_Prim_t const* param00, usdGeom_Cube_t** _result) {
    try {
        *_result = new pxr::UsdGeomCube(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cube_dtor(usdGeom_Cube_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Curves_GetCurveVertexCountsAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCurveVertexCountsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateCurveVertexCountsAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCurveVertexCountsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetWidthsAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWidthsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateWidthsAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWidthsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetWidthsInterpolation(usdGeom_Curves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetWidthsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_SetWidthsInterpolation(usdGeom_Curves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetWidthsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetCurveCount(usdGeom_Curves_t const* _this, usd_TimeCode_t timeCode, size_t* _result) {
    try {
        *_result = _this->GetCurveCount(timeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetPointsAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreatePointsAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetVelocitiesAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateVelocitiesAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetAccelerationsAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateAccelerationsAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetNormalsAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateNormalsAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetNormalsInterpolation(usdGeom_Curves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_SetNormalsInterpolation(usdGeom_Curves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputePointsAtTime(usdGeom_Curves_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetDisplayColorAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateDisplayColorAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetDisplayOpacityAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateDisplayOpacityAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetDoubleSidedAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateDoubleSidedAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetOrientationAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateOrientationAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetDisplayColorPrimvar(usdGeom_Curves_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateDisplayColorPrimvar(usdGeom_Curves_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetExtentAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateExtentAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetXformOpOrderAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddXformOp(usdGeom_Curves_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetXformOp(usdGeom_Curves_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddTranslateOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddScaleOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateXOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateYOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateZOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateXYZOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateXZYOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateYXZOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateYZXOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateZXYOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddRotateZYXOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddOrientOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_AddTransformOp(usdGeom_Curves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_SetResetXformStack(usdGeom_Curves_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_SetXformOpOrder(usdGeom_Curves_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetOrderedXformOps(usdGeom_Curves_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ClearXformOpOrder(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_MakeMatrixXform(usdGeom_Curves_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_TransformMightBeTimeVarying(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_TransformMightBeTimeVarying_using(usdGeom_Curves_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetTimeSamples(usdGeom_Curves_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetTimeSamplesInInterval(usdGeom_Curves_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetLocalTransformation(usdGeom_Curves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetLocalTransformation_with_ops(usdGeom_Curves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetVisibilityAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateVisibilityAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetPurposeAttr(usdGeom_Curves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreatePurposeAttr(usdGeom_Curves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetProxyPrimRel(usdGeom_Curves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_CreateProxyPrimRel(usdGeom_Curves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_MakeVisible(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_MakeInvisible(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputeVisibility(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetPurposeVisibilityAttr(usdGeom_Curves_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputePurposeInfo(usdGeom_Curves_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputePurposeInfo_given_parent(usdGeom_Curves_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputePurpose(usdGeom_Curves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputeProxyPrim(usdGeom_Curves_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_SetProxyPrim(usdGeom_Curves_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputeWorldBound(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputeLocalBound(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputeUntransformedBound(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputeLocalToWorldTransform(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_ComputeParentToWorldTransform(usdGeom_Curves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_IsConcrete(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_IsTyped(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_IsAPISchema(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_IsAppliedAPISchema(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_IsMultipleApplyAPISchema(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetSchemaKind(usdGeom_Curves_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetPrim(usdGeom_Curves_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetPath(usdGeom_Curves_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_GetSchemaClassPrimDefinition(usdGeom_Curves_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_op_bool(usdGeom_Curves_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_new(usd_Prim_t const* param00, usdGeom_Curves_t** _result) {
    try {
        *_result = new pxr::UsdGeomCurves(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Curves_dtor(usdGeom_Curves_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Cylinder_GetHeightAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetHeightAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateHeightAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateHeightAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetRadiusAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateRadiusAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetAxisAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAxisAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateAxisAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAxisAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetDisplayColorAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateDisplayColorAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetDisplayOpacityAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateDisplayOpacityAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetDoubleSidedAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateDoubleSidedAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetOrientationAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateOrientationAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetDisplayColorPrimvar(usdGeom_Cylinder_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateDisplayColorPrimvar(usdGeom_Cylinder_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetExtentAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateExtentAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetXformOpOrderAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddXformOp(usdGeom_Cylinder_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetXformOp(usdGeom_Cylinder_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddTranslateOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddScaleOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateXOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateYOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateZOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateXYZOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateXZYOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateYXZOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateYZXOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateZXYOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddRotateZYXOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddOrientOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_AddTransformOp(usdGeom_Cylinder_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_SetResetXformStack(usdGeom_Cylinder_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_SetXformOpOrder(usdGeom_Cylinder_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetOrderedXformOps(usdGeom_Cylinder_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ClearXformOpOrder(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_MakeMatrixXform(usdGeom_Cylinder_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_TransformMightBeTimeVarying(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_TransformMightBeTimeVarying_using(usdGeom_Cylinder_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetTimeSamples(usdGeom_Cylinder_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetTimeSamplesInInterval(usdGeom_Cylinder_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetLocalTransformation(usdGeom_Cylinder_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetLocalTransformation_with_ops(usdGeom_Cylinder_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetVisibilityAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateVisibilityAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetPurposeAttr(usdGeom_Cylinder_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreatePurposeAttr(usdGeom_Cylinder_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetProxyPrimRel(usdGeom_Cylinder_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_CreateProxyPrimRel(usdGeom_Cylinder_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_MakeVisible(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_MakeInvisible(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputeVisibility(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetPurposeVisibilityAttr(usdGeom_Cylinder_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputePurposeInfo(usdGeom_Cylinder_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputePurposeInfo_given_parent(usdGeom_Cylinder_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputePurpose(usdGeom_Cylinder_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputeProxyPrim(usdGeom_Cylinder_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_SetProxyPrim(usdGeom_Cylinder_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputeWorldBound(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputeLocalBound(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputeUntransformedBound(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputeLocalToWorldTransform(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_ComputeParentToWorldTransform(usdGeom_Cylinder_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_IsConcrete(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_IsTyped(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_IsAPISchema(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_IsAppliedAPISchema(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_IsMultipleApplyAPISchema(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetSchemaKind(usdGeom_Cylinder_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetPrim(usdGeom_Cylinder_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetPath(usdGeom_Cylinder_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_GetSchemaClassPrimDefinition(usdGeom_Cylinder_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_op_bool(usdGeom_Cylinder_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_new(usd_Prim_t const* param00, usdGeom_Cylinder_t** _result) {
    try {
        *_result = new pxr::UsdGeomCylinder(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Cylinder_dtor(usdGeom_Cylinder_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Gprim_GetDisplayColorAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateDisplayColorAttr(usdGeom_Gprim_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetDisplayOpacityAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateDisplayOpacityAttr(usdGeom_Gprim_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetDoubleSidedAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateDoubleSidedAttr(usdGeom_Gprim_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetOrientationAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateOrientationAttr(usdGeom_Gprim_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetDisplayColorPrimvar(usdGeom_Gprim_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateDisplayColorPrimvar(usdGeom_Gprim_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetExtentAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateExtentAttr(usdGeom_Gprim_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetXformOpOrderAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddXformOp(usdGeom_Gprim_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetXformOp(usdGeom_Gprim_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddTranslateOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddScaleOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateXOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateYOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateZOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateXYZOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateXZYOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateYXZOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateYZXOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateZXYOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddRotateZYXOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddOrientOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_AddTransformOp(usdGeom_Gprim_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_SetResetXformStack(usdGeom_Gprim_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_SetXformOpOrder(usdGeom_Gprim_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetOrderedXformOps(usdGeom_Gprim_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ClearXformOpOrder(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_MakeMatrixXform(usdGeom_Gprim_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_TransformMightBeTimeVarying(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_TransformMightBeTimeVarying_using(usdGeom_Gprim_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetTimeSamples(usdGeom_Gprim_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetTimeSamplesInInterval(usdGeom_Gprim_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetLocalTransformation(usdGeom_Gprim_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetLocalTransformation_with_ops(usdGeom_Gprim_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetVisibilityAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateVisibilityAttr(usdGeom_Gprim_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetPurposeAttr(usdGeom_Gprim_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreatePurposeAttr(usdGeom_Gprim_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetProxyPrimRel(usdGeom_Gprim_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_CreateProxyPrimRel(usdGeom_Gprim_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_MakeVisible(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_MakeInvisible(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputeVisibility(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetPurposeVisibilityAttr(usdGeom_Gprim_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputePurposeInfo(usdGeom_Gprim_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputePurposeInfo_given_parent(usdGeom_Gprim_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputePurpose(usdGeom_Gprim_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputeProxyPrim(usdGeom_Gprim_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_SetProxyPrim(usdGeom_Gprim_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputeWorldBound(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputeLocalBound(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputeUntransformedBound(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputeLocalToWorldTransform(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_ComputeParentToWorldTransform(usdGeom_Gprim_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_IsConcrete(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_IsTyped(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_IsAPISchema(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_IsAppliedAPISchema(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_IsMultipleApplyAPISchema(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetSchemaKind(usdGeom_Gprim_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetPrim(usdGeom_Gprim_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetPath(usdGeom_Gprim_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_GetSchemaClassPrimDefinition(usdGeom_Gprim_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_op_bool(usdGeom_Gprim_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_new(usd_Prim_t const* param00, usdGeom_Gprim_t** _result) {
    try {
        *_result = new pxr::UsdGeomGprim(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Gprim_dtor(usdGeom_Gprim_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_HermiteCurves_GetTangentsAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTangentsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateTangentsAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTangentsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetCurveVertexCountsAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCurveVertexCountsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateCurveVertexCountsAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCurveVertexCountsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetWidthsAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWidthsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateWidthsAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWidthsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetWidthsInterpolation(usdGeom_HermiteCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetWidthsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_SetWidthsInterpolation(usdGeom_HermiteCurves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetWidthsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetCurveCount(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t timeCode, size_t* _result) {
    try {
        *_result = _this->GetCurveCount(timeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetPointsAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreatePointsAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetVelocitiesAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateVelocitiesAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetAccelerationsAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateAccelerationsAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetNormalsAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateNormalsAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetNormalsInterpolation(usdGeom_HermiteCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_SetNormalsInterpolation(usdGeom_HermiteCurves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputePointsAtTime(usdGeom_HermiteCurves_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetDisplayColorAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateDisplayColorAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetDisplayOpacityAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateDisplayOpacityAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetDoubleSidedAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateDoubleSidedAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetOrientationAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateOrientationAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetDisplayColorPrimvar(usdGeom_HermiteCurves_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateDisplayColorPrimvar(usdGeom_HermiteCurves_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetExtentAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateExtentAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetXformOpOrderAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddXformOp(usdGeom_HermiteCurves_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetXformOp(usdGeom_HermiteCurves_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddTranslateOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddScaleOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateXOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateYOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateZOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateXYZOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateXZYOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateYXZOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateYZXOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateZXYOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddRotateZYXOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddOrientOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_AddTransformOp(usdGeom_HermiteCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_SetResetXformStack(usdGeom_HermiteCurves_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_SetXformOpOrder(usdGeom_HermiteCurves_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetOrderedXformOps(usdGeom_HermiteCurves_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ClearXformOpOrder(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_MakeMatrixXform(usdGeom_HermiteCurves_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_TransformMightBeTimeVarying(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_TransformMightBeTimeVarying_using(usdGeom_HermiteCurves_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetTimeSamples(usdGeom_HermiteCurves_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetTimeSamplesInInterval(usdGeom_HermiteCurves_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetLocalTransformation(usdGeom_HermiteCurves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetLocalTransformation_with_ops(usdGeom_HermiteCurves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetVisibilityAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateVisibilityAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetPurposeAttr(usdGeom_HermiteCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreatePurposeAttr(usdGeom_HermiteCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetProxyPrimRel(usdGeom_HermiteCurves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_CreateProxyPrimRel(usdGeom_HermiteCurves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_MakeVisible(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_MakeInvisible(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputeVisibility(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetPurposeVisibilityAttr(usdGeom_HermiteCurves_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputePurposeInfo(usdGeom_HermiteCurves_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputePurposeInfo_given_parent(usdGeom_HermiteCurves_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputePurpose(usdGeom_HermiteCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputeProxyPrim(usdGeom_HermiteCurves_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_SetProxyPrim(usdGeom_HermiteCurves_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputeWorldBound(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputeLocalBound(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputeUntransformedBound(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputeLocalToWorldTransform(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_ComputeParentToWorldTransform(usdGeom_HermiteCurves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_IsConcrete(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_IsTyped(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_IsAPISchema(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_IsAppliedAPISchema(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_IsMultipleApplyAPISchema(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetSchemaKind(usdGeom_HermiteCurves_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetPrim(usdGeom_HermiteCurves_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetPath(usdGeom_HermiteCurves_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_GetSchemaClassPrimDefinition(usdGeom_HermiteCurves_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_op_bool(usdGeom_HermiteCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_new(usd_Prim_t const* param00, usdGeom_HermiteCurves_t** _result) {
    try {
        *_result = new pxr::UsdGeomHermiteCurves(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_HermiteCurves_dtor(usdGeom_HermiteCurves_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Imageable_GetVisibilityAttr(usdGeom_Imageable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_CreateVisibilityAttr(usdGeom_Imageable_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_GetPurposeAttr(usdGeom_Imageable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_CreatePurposeAttr(usdGeom_Imageable_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_GetProxyPrimRel(usdGeom_Imageable_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_CreateProxyPrimRel(usdGeom_Imageable_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_MakeVisible(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_MakeInvisible(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputeVisibility(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_GetPurposeVisibilityAttr(usdGeom_Imageable_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputePurposeInfo(usdGeom_Imageable_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputePurposeInfo_given_parent(usdGeom_Imageable_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputePurpose(usdGeom_Imageable_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputeProxyPrim(usdGeom_Imageable_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_SetProxyPrim(usdGeom_Imageable_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputeWorldBound(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputeLocalBound(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputeUntransformedBound(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputeLocalToWorldTransform(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_ComputeParentToWorldTransform(usdGeom_Imageable_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_IsConcrete(usdGeom_Imageable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_IsTyped(usdGeom_Imageable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_IsAPISchema(usdGeom_Imageable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_IsAppliedAPISchema(usdGeom_Imageable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_IsMultipleApplyAPISchema(usdGeom_Imageable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_GetSchemaKind(usdGeom_Imageable_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_GetPrim(usdGeom_Imageable_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_GetPath(usdGeom_Imageable_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_GetSchemaClassPrimDefinition(usdGeom_Imageable_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_op_bool(usdGeom_Imageable_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_new(usd_Prim_t const* param00, usdGeom_Imageable_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Imageable_dtor(usdGeom_Imageable_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_ImageablePurposeInfo_dtor(usdGeom_ImageablePurposeInfo_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Mesh_GetFaceVertexIndicesAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFaceVertexIndicesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateFaceVertexIndicesAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFaceVertexIndicesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetFaceVertexCountsAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFaceVertexCountsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateFaceVertexCountsAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFaceVertexCountsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetSubdivisionSchemeAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSubdivisionSchemeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateSubdivisionSchemeAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSubdivisionSchemeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetInterpolateBoundaryAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetInterpolateBoundaryAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateInterpolateBoundaryAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateInterpolateBoundaryAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetFaceVaryingLinearInterpolationAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFaceVaryingLinearInterpolationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateFaceVaryingLinearInterpolationAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFaceVaryingLinearInterpolationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetTriangleSubdivisionRuleAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTriangleSubdivisionRuleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateTriangleSubdivisionRuleAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTriangleSubdivisionRuleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetHoleIndicesAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetHoleIndicesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateHoleIndicesAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateHoleIndicesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetCornerIndicesAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCornerIndicesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateCornerIndicesAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCornerIndicesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetCornerSharpnessesAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCornerSharpnessesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateCornerSharpnessesAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCornerSharpnessesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetCreaseIndicesAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCreaseIndicesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateCreaseIndicesAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCreaseIndicesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetCreaseLengthsAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCreaseLengthsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateCreaseLengthsAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCreaseLengthsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetCreaseSharpnessesAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCreaseSharpnessesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateCreaseSharpnessesAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCreaseSharpnessesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetFaceCount(usdGeom_Mesh_t const* _this, usd_TimeCode_t timeCode, size_t* _result) {
    try {
        *_result = _this->GetFaceCount(timeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetPointsAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreatePointsAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetVelocitiesAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateVelocitiesAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetAccelerationsAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateAccelerationsAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetNormalsAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateNormalsAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetNormalsInterpolation(usdGeom_Mesh_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_SetNormalsInterpolation(usdGeom_Mesh_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputePointsAtTime(usdGeom_Mesh_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetDisplayColorAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateDisplayColorAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetDisplayOpacityAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateDisplayOpacityAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetDoubleSidedAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateDoubleSidedAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetOrientationAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateOrientationAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetDisplayColorPrimvar(usdGeom_Mesh_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateDisplayColorPrimvar(usdGeom_Mesh_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetExtentAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateExtentAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetXformOpOrderAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddXformOp(usdGeom_Mesh_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetXformOp(usdGeom_Mesh_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddTranslateOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddScaleOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateXOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateYOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateZOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateXYZOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateXZYOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateYXZOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateYZXOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateZXYOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddRotateZYXOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddOrientOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_AddTransformOp(usdGeom_Mesh_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_SetResetXformStack(usdGeom_Mesh_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_SetXformOpOrder(usdGeom_Mesh_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetOrderedXformOps(usdGeom_Mesh_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ClearXformOpOrder(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_MakeMatrixXform(usdGeom_Mesh_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_TransformMightBeTimeVarying(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_TransformMightBeTimeVarying_using(usdGeom_Mesh_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetTimeSamples(usdGeom_Mesh_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetTimeSamplesInInterval(usdGeom_Mesh_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetLocalTransformation(usdGeom_Mesh_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetLocalTransformation_with_ops(usdGeom_Mesh_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetVisibilityAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateVisibilityAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetPurposeAttr(usdGeom_Mesh_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreatePurposeAttr(usdGeom_Mesh_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetProxyPrimRel(usdGeom_Mesh_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_CreateProxyPrimRel(usdGeom_Mesh_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_MakeVisible(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_MakeInvisible(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputeVisibility(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetPurposeVisibilityAttr(usdGeom_Mesh_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputePurposeInfo(usdGeom_Mesh_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputePurposeInfo_given_parent(usdGeom_Mesh_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputePurpose(usdGeom_Mesh_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputeProxyPrim(usdGeom_Mesh_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_SetProxyPrim(usdGeom_Mesh_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputeWorldBound(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputeLocalBound(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputeUntransformedBound(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputeLocalToWorldTransform(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_ComputeParentToWorldTransform(usdGeom_Mesh_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_IsConcrete(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_IsTyped(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_IsAPISchema(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_IsAppliedAPISchema(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_IsMultipleApplyAPISchema(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetSchemaKind(usdGeom_Mesh_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetPrim(usdGeom_Mesh_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetPath(usdGeom_Mesh_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_GetSchemaClassPrimDefinition(usdGeom_Mesh_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_op_bool(usdGeom_Mesh_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_new(usd_Prim_t const* param00, usdGeom_Mesh_t** _result) {
    try {
        *_result = new pxr::UsdGeomMesh(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Mesh_dtor(usdGeom_Mesh_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_ModelAPI_GetModelDrawModeAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelDrawModeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelDrawModeAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelDrawModeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelDrawModeColorAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelDrawModeColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelDrawModeColorAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelDrawModeColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelCardGeometryAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelCardGeometryAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelCardGeometryAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelCardGeometryAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelCardTextureXPosAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelCardTextureXPosAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelCardTextureXPosAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelCardTextureXPosAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelCardTextureXNegAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelCardTextureXNegAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelCardTextureXNegAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelCardTextureXNegAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelCardTextureYPosAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelCardTextureYPosAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelCardTextureYPosAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelCardTextureYPosAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelCardTextureYNegAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelCardTextureYNegAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelCardTextureYNegAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelCardTextureYNegAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelCardTextureZPosAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelCardTextureZPosAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelCardTextureZPosAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelCardTextureZPosAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetModelCardTextureZNegAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetModelCardTextureZNegAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateModelCardTextureZNegAttr(usdGeom_ModelAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateModelCardTextureZNegAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_ComputeModelDrawMode(usdGeom_ModelAPI_t const* _this, tf_Token_t const* parentDrawMode, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeModelDrawMode(*parentDrawMode));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetExtentsHint(usdGeom_ModelAPI_t const* _this, gf_Vec3fArray_t* extents, usd_TimeCode_t const* time, bool* _result) {
    try {
        *_result = _this->GetExtentsHint(extents, *time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_SetExtentsHint(usdGeom_ModelAPI_t const* _this, gf_Vec3fArray_t const* extents, usd_TimeCode_t const* time, bool* _result) {
    try {
        *_result = _this->SetExtentsHint(*extents, *time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetExtentsHintAttr(usdGeom_ModelAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentsHintAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_ComputeExtentsHint(usdGeom_ModelAPI_t const* _this, usdGeom_BBoxCache_t* bboxCache, gf_Vec3fArray_t** _result) {
    try {
        *_result = new pxr::VtArray<pxr::GfVec3f>(_this->ComputeExtentsHint(*bboxCache));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetConstraintTarget(usdGeom_ModelAPI_t const* _this, std_String_t const* constraintName, usdGeom_ConstraintTarget_t** _result) {
    try {
        *_result = new pxr::UsdGeomConstraintTarget(_this->GetConstraintTarget(*constraintName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetConstraintTargets(usdGeom_ModelAPI_t const* _this, usdGeom_ConstraintTargetVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomConstraintTarget>(_this->GetConstraintTargets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_CreateConstraintTarget(usdGeom_ModelAPI_t const* _this, std_String_t const* constraintName, usdGeom_ConstraintTarget_t** _result) {
    try {
        *_result = new pxr::UsdGeomConstraintTarget(_this->CreateConstraintTarget(*constraintName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_IsConcrete(usdGeom_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_IsTyped(usdGeom_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_IsAPISchema(usdGeom_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_IsAppliedAPISchema(usdGeom_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_IsMultipleApplyAPISchema(usdGeom_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetSchemaKind(usdGeom_ModelAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetPrim(usdGeom_ModelAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetPath(usdGeom_ModelAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_GetSchemaClassPrimDefinition(usdGeom_ModelAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_op_bool(usdGeom_ModelAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_new(usd_Prim_t const* param00, usdGeom_ModelAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomModelAPI(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_ModelAPI_dtor(usdGeom_ModelAPI_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_MotionAPI_GetMotionBlurScaleAttr(usdGeom_MotionAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetMotionBlurScaleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_CreateMotionBlurScaleAttr(usdGeom_MotionAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateMotionBlurScaleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_GetVelocityScaleAttr(usdGeom_MotionAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocityScaleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_CreateVelocityScaleAttr(usdGeom_MotionAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocityScaleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_GetNonlinearSampleCountAttr(usdGeom_MotionAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNonlinearSampleCountAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_CreateNonlinearSampleCountAttr(usdGeom_MotionAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNonlinearSampleCountAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_ComputeVelocityScale(usdGeom_MotionAPI_t const* _this, usd_TimeCode_t time, float* _result) {
    try {
        *_result = _this->ComputeVelocityScale(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_ComputeMotionBlurScale(usdGeom_MotionAPI_t const* _this, usd_TimeCode_t time, float* _result) {
    try {
        *_result = _this->ComputeMotionBlurScale(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_ComputeNonlinearSampleCount(usdGeom_MotionAPI_t const* _this, usd_TimeCode_t time, int* _result) {
    try {
        *_result = _this->ComputeNonlinearSampleCount(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_IsConcrete(usdGeom_MotionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_IsTyped(usdGeom_MotionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_IsAPISchema(usdGeom_MotionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_IsAppliedAPISchema(usdGeom_MotionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_IsMultipleApplyAPISchema(usdGeom_MotionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_GetSchemaKind(usdGeom_MotionAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_GetPrim(usdGeom_MotionAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_GetPath(usdGeom_MotionAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_GetSchemaClassPrimDefinition(usdGeom_MotionAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_op_bool(usdGeom_MotionAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_new(usd_Prim_t const* param00, usdGeom_MotionAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomMotionAPI(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_MotionAPI_dtor(usdGeom_MotionAPI_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_NurbsCurves_GetOrderAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateOrderAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrderAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetKnotsAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetKnotsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateKnotsAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateKnotsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetRangesAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRangesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateRangesAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRangesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetPointWeightsAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointWeightsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreatePointWeightsAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointWeightsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetCurveVertexCountsAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCurveVertexCountsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateCurveVertexCountsAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCurveVertexCountsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetWidthsAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWidthsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateWidthsAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWidthsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetWidthsInterpolation(usdGeom_NurbsCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetWidthsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_SetWidthsInterpolation(usdGeom_NurbsCurves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetWidthsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetCurveCount(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t timeCode, size_t* _result) {
    try {
        *_result = _this->GetCurveCount(timeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetPointsAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreatePointsAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetVelocitiesAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateVelocitiesAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetAccelerationsAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateAccelerationsAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetNormalsAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateNormalsAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetNormalsInterpolation(usdGeom_NurbsCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_SetNormalsInterpolation(usdGeom_NurbsCurves_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputePointsAtTime(usdGeom_NurbsCurves_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetDisplayColorAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateDisplayColorAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetDisplayOpacityAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateDisplayOpacityAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetDoubleSidedAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateDoubleSidedAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetOrientationAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateOrientationAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetDisplayColorPrimvar(usdGeom_NurbsCurves_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateDisplayColorPrimvar(usdGeom_NurbsCurves_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetExtentAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateExtentAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetXformOpOrderAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddXformOp(usdGeom_NurbsCurves_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetXformOp(usdGeom_NurbsCurves_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddTranslateOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddScaleOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateXOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateYOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateZOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateXYZOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateXZYOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateYXZOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateYZXOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateZXYOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddRotateZYXOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddOrientOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_AddTransformOp(usdGeom_NurbsCurves_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_SetResetXformStack(usdGeom_NurbsCurves_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_SetXformOpOrder(usdGeom_NurbsCurves_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetOrderedXformOps(usdGeom_NurbsCurves_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ClearXformOpOrder(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_MakeMatrixXform(usdGeom_NurbsCurves_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_TransformMightBeTimeVarying(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_TransformMightBeTimeVarying_using(usdGeom_NurbsCurves_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetTimeSamples(usdGeom_NurbsCurves_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetTimeSamplesInInterval(usdGeom_NurbsCurves_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetLocalTransformation(usdGeom_NurbsCurves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetLocalTransformation_with_ops(usdGeom_NurbsCurves_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetVisibilityAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateVisibilityAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetPurposeAttr(usdGeom_NurbsCurves_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreatePurposeAttr(usdGeom_NurbsCurves_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetProxyPrimRel(usdGeom_NurbsCurves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_CreateProxyPrimRel(usdGeom_NurbsCurves_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_MakeVisible(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_MakeInvisible(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputeVisibility(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetPurposeVisibilityAttr(usdGeom_NurbsCurves_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputePurposeInfo(usdGeom_NurbsCurves_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputePurposeInfo_given_parent(usdGeom_NurbsCurves_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputePurpose(usdGeom_NurbsCurves_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputeProxyPrim(usdGeom_NurbsCurves_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_SetProxyPrim(usdGeom_NurbsCurves_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputeWorldBound(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputeLocalBound(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputeUntransformedBound(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputeLocalToWorldTransform(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_ComputeParentToWorldTransform(usdGeom_NurbsCurves_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_IsConcrete(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_IsTyped(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_IsAPISchema(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_IsAppliedAPISchema(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_IsMultipleApplyAPISchema(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetSchemaKind(usdGeom_NurbsCurves_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetPrim(usdGeom_NurbsCurves_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetPath(usdGeom_NurbsCurves_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_GetSchemaClassPrimDefinition(usdGeom_NurbsCurves_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_op_bool(usdGeom_NurbsCurves_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_new(usd_Prim_t const* param00, usdGeom_NurbsCurves_t** _result) {
    try {
        *_result = new pxr::UsdGeomNurbsCurves(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsCurves_dtor(usdGeom_NurbsCurves_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_NurbsPatch_GetUVertexCountAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetUVertexCountAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateUVertexCountAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateUVertexCountAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetVVertexCountAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVVertexCountAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateVVertexCountAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVVertexCountAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetUOrderAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetUOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateUOrderAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateUOrderAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetVOrderAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateVOrderAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVOrderAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetUKnotsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetUKnotsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateUKnotsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateUKnotsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetVKnotsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVKnotsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateVKnotsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVKnotsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetUFormAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetUFormAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateUFormAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateUFormAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetVFormAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVFormAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateVFormAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVFormAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetURangeAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetURangeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateURangeAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateURangeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetVRangeAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVRangeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateVRangeAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVRangeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetPointWeightsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointWeightsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreatePointWeightsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointWeightsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTrimCurveCountsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTrimCurveCountsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateTrimCurveCountsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTrimCurveCountsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTrimCurveOrdersAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTrimCurveOrdersAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateTrimCurveOrdersAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTrimCurveOrdersAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTrimCurveVertexCountsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTrimCurveVertexCountsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateTrimCurveVertexCountsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTrimCurveVertexCountsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTrimCurveKnotsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTrimCurveKnotsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateTrimCurveKnotsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTrimCurveKnotsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTrimCurveRangesAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTrimCurveRangesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateTrimCurveRangesAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTrimCurveRangesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTrimCurvePointsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTrimCurvePointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateTrimCurvePointsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTrimCurvePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetPointsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreatePointsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetVelocitiesAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateVelocitiesAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetAccelerationsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateAccelerationsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetNormalsAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateNormalsAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetNormalsInterpolation(usdGeom_NurbsPatch_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_SetNormalsInterpolation(usdGeom_NurbsPatch_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputePointsAtTime(usdGeom_NurbsPatch_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetDisplayColorAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateDisplayColorAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetDisplayOpacityAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateDisplayOpacityAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetDoubleSidedAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateDoubleSidedAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetOrientationAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateOrientationAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetDisplayColorPrimvar(usdGeom_NurbsPatch_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateDisplayColorPrimvar(usdGeom_NurbsPatch_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetExtentAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateExtentAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetXformOpOrderAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddXformOp(usdGeom_NurbsPatch_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetXformOp(usdGeom_NurbsPatch_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddTranslateOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddScaleOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateXOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateYOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateZOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateXYZOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateXZYOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateYXZOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateYZXOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateZXYOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddRotateZYXOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddOrientOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_AddTransformOp(usdGeom_NurbsPatch_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_SetResetXformStack(usdGeom_NurbsPatch_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_SetXformOpOrder(usdGeom_NurbsPatch_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetOrderedXformOps(usdGeom_NurbsPatch_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ClearXformOpOrder(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_MakeMatrixXform(usdGeom_NurbsPatch_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_TransformMightBeTimeVarying(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_TransformMightBeTimeVarying_using(usdGeom_NurbsPatch_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTimeSamples(usdGeom_NurbsPatch_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetTimeSamplesInInterval(usdGeom_NurbsPatch_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetLocalTransformation(usdGeom_NurbsPatch_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetLocalTransformation_with_ops(usdGeom_NurbsPatch_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetVisibilityAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateVisibilityAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetPurposeAttr(usdGeom_NurbsPatch_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreatePurposeAttr(usdGeom_NurbsPatch_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetProxyPrimRel(usdGeom_NurbsPatch_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_CreateProxyPrimRel(usdGeom_NurbsPatch_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_MakeVisible(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_MakeInvisible(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputeVisibility(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetPurposeVisibilityAttr(usdGeom_NurbsPatch_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputePurposeInfo(usdGeom_NurbsPatch_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputePurposeInfo_given_parent(usdGeom_NurbsPatch_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputePurpose(usdGeom_NurbsPatch_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputeProxyPrim(usdGeom_NurbsPatch_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_SetProxyPrim(usdGeom_NurbsPatch_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputeWorldBound(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputeLocalBound(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputeUntransformedBound(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputeLocalToWorldTransform(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_ComputeParentToWorldTransform(usdGeom_NurbsPatch_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_IsConcrete(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_IsTyped(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_IsAPISchema(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_IsAppliedAPISchema(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_IsMultipleApplyAPISchema(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetSchemaKind(usdGeom_NurbsPatch_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetPrim(usdGeom_NurbsPatch_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetPath(usdGeom_NurbsPatch_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_GetSchemaClassPrimDefinition(usdGeom_NurbsPatch_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_op_bool(usdGeom_NurbsPatch_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_new(usd_Prim_t const* param00, usdGeom_NurbsPatch_t** _result) {
    try {
        *_result = new pxr::UsdGeomNurbsPatch(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_NurbsPatch_dtor(usdGeom_NurbsPatch_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Plane_GetWidthAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWidthAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateWidthAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWidthAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetLengthAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetLengthAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateLengthAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateLengthAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetAxisAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAxisAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateAxisAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAxisAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetDisplayColorAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateDisplayColorAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetDisplayOpacityAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateDisplayOpacityAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetDoubleSidedAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateDoubleSidedAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetOrientationAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateOrientationAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetDisplayColorPrimvar(usdGeom_Plane_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateDisplayColorPrimvar(usdGeom_Plane_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetExtentAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateExtentAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetXformOpOrderAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddXformOp(usdGeom_Plane_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetXformOp(usdGeom_Plane_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddTranslateOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddScaleOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateXOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateYOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateZOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateXYZOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateXZYOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateYXZOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateYZXOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateZXYOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddRotateZYXOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddOrientOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_AddTransformOp(usdGeom_Plane_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_SetResetXformStack(usdGeom_Plane_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_SetXformOpOrder(usdGeom_Plane_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetOrderedXformOps(usdGeom_Plane_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ClearXformOpOrder(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_MakeMatrixXform(usdGeom_Plane_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_TransformMightBeTimeVarying(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_TransformMightBeTimeVarying_using(usdGeom_Plane_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetTimeSamples(usdGeom_Plane_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetTimeSamplesInInterval(usdGeom_Plane_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetLocalTransformation(usdGeom_Plane_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetLocalTransformation_with_ops(usdGeom_Plane_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetVisibilityAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateVisibilityAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetPurposeAttr(usdGeom_Plane_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreatePurposeAttr(usdGeom_Plane_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetProxyPrimRel(usdGeom_Plane_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_CreateProxyPrimRel(usdGeom_Plane_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_MakeVisible(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_MakeInvisible(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputeVisibility(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetPurposeVisibilityAttr(usdGeom_Plane_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputePurposeInfo(usdGeom_Plane_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputePurposeInfo_given_parent(usdGeom_Plane_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputePurpose(usdGeom_Plane_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputeProxyPrim(usdGeom_Plane_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_SetProxyPrim(usdGeom_Plane_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputeWorldBound(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputeLocalBound(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputeUntransformedBound(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputeLocalToWorldTransform(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_ComputeParentToWorldTransform(usdGeom_Plane_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_IsConcrete(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_IsTyped(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_IsAPISchema(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_IsAppliedAPISchema(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_IsMultipleApplyAPISchema(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetSchemaKind(usdGeom_Plane_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetPrim(usdGeom_Plane_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetPath(usdGeom_Plane_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_GetSchemaClassPrimDefinition(usdGeom_Plane_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_op_bool(usdGeom_Plane_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_new(usd_Prim_t const* param00, usdGeom_Plane_t** _result) {
    try {
        *_result = new pxr::UsdGeomPlane(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Plane_dtor(usdGeom_Plane_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_PointBased_GetPointsAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreatePointsAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetVelocitiesAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateVelocitiesAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetAccelerationsAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateAccelerationsAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetNormalsAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateNormalsAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetNormalsInterpolation(usdGeom_PointBased_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_SetNormalsInterpolation(usdGeom_PointBased_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputePointsAtTime(usdGeom_PointBased_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetDisplayColorAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateDisplayColorAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetDisplayOpacityAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateDisplayOpacityAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetDoubleSidedAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateDoubleSidedAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetOrientationAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateOrientationAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetDisplayColorPrimvar(usdGeom_PointBased_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateDisplayColorPrimvar(usdGeom_PointBased_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetExtentAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateExtentAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetXformOpOrderAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddXformOp(usdGeom_PointBased_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetXformOp(usdGeom_PointBased_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddTranslateOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddScaleOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateXOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateYOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateZOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateXYZOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateXZYOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateYXZOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateYZXOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateZXYOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddRotateZYXOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddOrientOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_AddTransformOp(usdGeom_PointBased_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_SetResetXformStack(usdGeom_PointBased_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_SetXformOpOrder(usdGeom_PointBased_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetOrderedXformOps(usdGeom_PointBased_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ClearXformOpOrder(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_MakeMatrixXform(usdGeom_PointBased_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_TransformMightBeTimeVarying(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_TransformMightBeTimeVarying_using(usdGeom_PointBased_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetTimeSamples(usdGeom_PointBased_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetTimeSamplesInInterval(usdGeom_PointBased_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetLocalTransformation(usdGeom_PointBased_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetLocalTransformation_with_ops(usdGeom_PointBased_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetVisibilityAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateVisibilityAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetPurposeAttr(usdGeom_PointBased_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreatePurposeAttr(usdGeom_PointBased_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetProxyPrimRel(usdGeom_PointBased_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_CreateProxyPrimRel(usdGeom_PointBased_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_MakeVisible(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_MakeInvisible(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputeVisibility(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetPurposeVisibilityAttr(usdGeom_PointBased_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputePurposeInfo(usdGeom_PointBased_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputePurposeInfo_given_parent(usdGeom_PointBased_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputePurpose(usdGeom_PointBased_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputeProxyPrim(usdGeom_PointBased_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_SetProxyPrim(usdGeom_PointBased_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputeWorldBound(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputeLocalBound(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputeUntransformedBound(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputeLocalToWorldTransform(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_ComputeParentToWorldTransform(usdGeom_PointBased_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_IsConcrete(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_IsTyped(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_IsAPISchema(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_IsAppliedAPISchema(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_IsMultipleApplyAPISchema(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetSchemaKind(usdGeom_PointBased_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetPrim(usdGeom_PointBased_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetPath(usdGeom_PointBased_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_GetSchemaClassPrimDefinition(usdGeom_PointBased_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_op_bool(usdGeom_PointBased_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_new(usd_Prim_t const* param00, usdGeom_PointBased_t** _result) {
    try {
        *_result = new pxr::UsdGeomPointBased(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointBased_dtor(usdGeom_PointBased_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_PointInstancer_GetProtoIndicesAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetProtoIndicesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateProtoIndicesAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateProtoIndicesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetIdsAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIdsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateIdsAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIdsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetPositionsAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPositionsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreatePositionsAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePositionsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateOrientationsAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetOrientationsAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetScalesAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetScalesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateScalesAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateScalesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetVelocitiesAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateVelocitiesAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetAccelerationsAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateAccelerationsAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetAngularVelocitiesAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAngularVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateAngularVelocitiesAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAngularVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetPrototypesRel(usdGeom_PointInstancer_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetPrototypesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreatePrototypesRel(usdGeom_PointInstancer_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreatePrototypesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeInstanceTransformsAtTime(usdGeom_PointInstancer_t const* _this, gf_Matrix4dArray_t* xforms, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, unsigned int doProtoXforms, unsigned int applyMask, bool* _result) {
    try {
        *_result = _this->ComputeInstanceTransformsAtTime(xforms, time, baseTime, static_cast<pxr::UsdGeomPointInstancer::ProtoXformInclusion>(doProtoXforms), static_cast<pxr::UsdGeomPointInstancer::MaskApplication>(applyMask));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeInstanceTransformsAtTimes(usdGeom_PointInstancer_t const* _this, gf_Matrix4dArrayVector_t* xformsArray, usd_TimeCodeVector_t const* times, usd_TimeCode_t const baseTime, unsigned int doProtoXforms, unsigned int applyMask, bool* _result) {
    try {
        *_result = _this->ComputeInstanceTransformsAtTimes(xformsArray, *times, baseTime, static_cast<pxr::UsdGeomPointInstancer::ProtoXformInclusion>(doProtoXforms), static_cast<pxr::UsdGeomPointInstancer::MaskApplication>(applyMask));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeExtentAtTime(usdGeom_PointInstancer_t const* _this, gf_Vec3fArray_t* extent, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputeExtentAtTime(extent, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeExtentAtTime_with_transform(usdGeom_PointInstancer_t const* _this, gf_Vec3fArray_t* extent, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, gf_Matrix4d_t const* transform, bool* _result) {
    try {
        *_result = _this->ComputeExtentAtTime(extent, time, baseTime, *transform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeExtentAtTimes(usdGeom_PointInstancer_t const* _this, gf_Vec3fArrayVector_t* extents, usd_TimeCodeVector_t const* times, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputeExtentAtTimes(extents, *times, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeExtentAtTimes_with_transform(usdGeom_PointInstancer_t const* _this, gf_Vec3fArrayVector_t* extents, usd_TimeCodeVector_t const* times, usd_TimeCode_t const baseTime, gf_Matrix4d_t const* transform, bool* _result) {
    try {
        *_result = _this->ComputeExtentAtTimes(extents, *times, baseTime, *transform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetInstanceCount(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t timeCode, size_t* _result) {
    try {
        *_result = _this->GetInstanceCount(timeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetExtentAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateExtentAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetXformOpOrderAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddXformOp(usdGeom_PointInstancer_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetXformOp(usdGeom_PointInstancer_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddTranslateOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddScaleOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateXOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateYOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateZOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateXYZOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateXZYOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateYXZOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateYZXOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateZXYOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddRotateZYXOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddOrientOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_AddTransformOp(usdGeom_PointInstancer_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_SetResetXformStack(usdGeom_PointInstancer_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_SetXformOpOrder(usdGeom_PointInstancer_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetOrderedXformOps(usdGeom_PointInstancer_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ClearXformOpOrder(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_MakeMatrixXform(usdGeom_PointInstancer_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_TransformMightBeTimeVarying(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_TransformMightBeTimeVarying_using(usdGeom_PointInstancer_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetTimeSamples(usdGeom_PointInstancer_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetTimeSamplesInInterval(usdGeom_PointInstancer_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetLocalTransformation(usdGeom_PointInstancer_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetLocalTransformation_with_ops(usdGeom_PointInstancer_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetVisibilityAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateVisibilityAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetPurposeAttr(usdGeom_PointInstancer_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreatePurposeAttr(usdGeom_PointInstancer_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetProxyPrimRel(usdGeom_PointInstancer_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_CreateProxyPrimRel(usdGeom_PointInstancer_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_MakeVisible(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_MakeInvisible(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeVisibility(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetPurposeVisibilityAttr(usdGeom_PointInstancer_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputePurposeInfo(usdGeom_PointInstancer_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputePurposeInfo_given_parent(usdGeom_PointInstancer_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputePurpose(usdGeom_PointInstancer_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeProxyPrim(usdGeom_PointInstancer_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_SetProxyPrim(usdGeom_PointInstancer_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeWorldBound(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeLocalBound(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeUntransformedBound(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeLocalToWorldTransform(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_ComputeParentToWorldTransform(usdGeom_PointInstancer_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_IsConcrete(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_IsTyped(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_IsAPISchema(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_IsAppliedAPISchema(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_IsMultipleApplyAPISchema(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetSchemaKind(usdGeom_PointInstancer_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetPrim(usdGeom_PointInstancer_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetPath(usdGeom_PointInstancer_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_GetSchemaClassPrimDefinition(usdGeom_PointInstancer_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_op_bool(usdGeom_PointInstancer_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_new(usd_Prim_t const* param00, usdGeom_PointInstancer_t** _result) {
    try {
        *_result = new pxr::UsdGeomPointInstancer(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PointInstancer_dtor(usdGeom_PointInstancer_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Points_GetWidthsAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWidthsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateWidthsAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWidthsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetIdsAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIdsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateIdsAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIdsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetWidthsInterpolation(usdGeom_Points_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetWidthsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_SetWidthsInterpolation(usdGeom_Points_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetWidthsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetPointCount(usdGeom_Points_t const* _this, usd_TimeCode_t timeCode, size_t* _result) {
    try {
        *_result = _this->GetPointCount(timeCode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetPointsAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPointsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreatePointsAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePointsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetVelocitiesAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVelocitiesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateVelocitiesAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVelocitiesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetAccelerationsAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAccelerationsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateAccelerationsAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAccelerationsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetNormalsAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalsAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateNormalsAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalsAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetNormalsInterpolation(usdGeom_Points_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNormalsInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_SetNormalsInterpolation(usdGeom_Points_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetNormalsInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputePointsAtTime(usdGeom_Points_t const* _this, gf_Vec3fArray_t* points, usd_TimeCode_t const time, usd_TimeCode_t const baseTime, bool* _result) {
    try {
        *_result = _this->ComputePointsAtTime(points, time, baseTime);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetDisplayColorAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateDisplayColorAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetDisplayOpacityAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateDisplayOpacityAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetDoubleSidedAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateDoubleSidedAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetOrientationAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateOrientationAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetDisplayColorPrimvar(usdGeom_Points_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateDisplayColorPrimvar(usdGeom_Points_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetExtentAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateExtentAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetXformOpOrderAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddXformOp(usdGeom_Points_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetXformOp(usdGeom_Points_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddTranslateOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddScaleOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateXOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateYOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateZOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateXYZOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateXZYOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateYXZOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateYZXOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateZXYOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddRotateZYXOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddOrientOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_AddTransformOp(usdGeom_Points_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_SetResetXformStack(usdGeom_Points_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_SetXformOpOrder(usdGeom_Points_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetOrderedXformOps(usdGeom_Points_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ClearXformOpOrder(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_MakeMatrixXform(usdGeom_Points_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_TransformMightBeTimeVarying(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_TransformMightBeTimeVarying_using(usdGeom_Points_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetTimeSamples(usdGeom_Points_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetTimeSamplesInInterval(usdGeom_Points_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetLocalTransformation(usdGeom_Points_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetLocalTransformation_with_ops(usdGeom_Points_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetVisibilityAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateVisibilityAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetPurposeAttr(usdGeom_Points_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreatePurposeAttr(usdGeom_Points_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetProxyPrimRel(usdGeom_Points_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_CreateProxyPrimRel(usdGeom_Points_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_MakeVisible(usdGeom_Points_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_MakeInvisible(usdGeom_Points_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputeVisibility(usdGeom_Points_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetPurposeVisibilityAttr(usdGeom_Points_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputePurposeInfo(usdGeom_Points_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputePurposeInfo_given_parent(usdGeom_Points_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputePurpose(usdGeom_Points_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputeProxyPrim(usdGeom_Points_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_SetProxyPrim(usdGeom_Points_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputeWorldBound(usdGeom_Points_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputeLocalBound(usdGeom_Points_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputeUntransformedBound(usdGeom_Points_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputeLocalToWorldTransform(usdGeom_Points_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_ComputeParentToWorldTransform(usdGeom_Points_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_IsConcrete(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_IsTyped(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_IsAPISchema(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_IsAppliedAPISchema(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_IsMultipleApplyAPISchema(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetSchemaKind(usdGeom_Points_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetPrim(usdGeom_Points_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetPath(usdGeom_Points_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_GetSchemaClassPrimDefinition(usdGeom_Points_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_op_bool(usdGeom_Points_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_new(usd_Prim_t const* param00, usdGeom_Points_t** _result) {
    try {
        *_result = new pxr::UsdGeomPoints(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Points_dtor(usdGeom_Points_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Primvar_GetInterpolation(usdGeom_Primvar_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetInterpolation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_SetInterpolation(usdGeom_Primvar_t* _this, tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = _this->SetInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_HasAuthoredInterpolation(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredInterpolation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetElementSize(usdGeom_Primvar_t const* _this, int* _result) {
    try {
        *_result = _this->GetElementSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_SetElementSize(usdGeom_Primvar_t* _this, int eltSize, bool* _result) {
    try {
        *_result = _this->SetElementSize(eltSize);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_HasAuthoredElementSize(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredElementSize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetDeclarationInfo(usdGeom_Primvar_t const* _this, tf_Token_t* name, sdf_ValueTypeName_t* typeName, tf_Token_t* interpolation, int* elementSize) {
    try {
        _this->GetDeclarationInfo(name, typeName, interpolation, elementSize);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_Get(usdGeom_Primvar_t const* _this, vt_Value_t* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Get(value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetAttr(usdGeom_Primvar_t const* _this, usd_Attribute_t const** _result) {
    try {
        *_result = &_this->GetAttr();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_IsDefined(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_HasValue(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->HasValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_HasAuthoredValue(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->HasAuthoredValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetPrimvarName(usdGeom_Primvar_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetPrimvarName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetName(usdGeom_Primvar_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_NameContainsNamespaces(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->NameContainsNamespaces();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetBaseName(usdGeom_Primvar_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetNamespace(usdGeom_Primvar_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNamespace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetTypeName(usdGeom_Primvar_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_SplitName(usdGeom_Primvar_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->SplitName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetTimeSamples(usdGeom_Primvar_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_GetTimeSamplesInInterval(usdGeom_Primvar_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_ValueMightBeTimeVarying(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->ValueMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_IsIdTarget(usdGeom_Primvar_t const* _this, bool* _result) {
    try {
        *_result = _this->IsIdTarget();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_SetIdTarget(usdGeom_Primvar_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->SetIdTarget(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_IsPrimvar(usd_Attribute_t const* attr, bool* _result) {
    try {
        *_result = pxr::UsdGeomPrimvar::IsPrimvar(*attr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_IsValidPrimvarName(tf_Token_t const* name, bool* _result) {
    try {
        *_result = pxr::UsdGeomPrimvar::IsValidPrimvarName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_StripPrimvarsName(tf_Token_t const* name, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdGeomPrimvar::StripPrimvarsName(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_IsValidInterpolation(tf_Token_t const* interpolation, bool* _result) {
    try {
        *_result = pxr::UsdGeomPrimvar::IsValidInterpolation(*interpolation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_new(usd_Attribute_t const* param00, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Primvar_dtor(usdGeom_Primvar_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_PrimvarVector_data(usdGeom_PrimvarVector_t* _this, usdGeom_Primvar_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_PrimvarVector_data_const(usdGeom_PrimvarVector_t const* _this, usdGeom_Primvar_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_PrimvarVector_empty(usdGeom_PrimvarVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdGeom_PrimvarVector_size(usdGeom_PrimvarVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdGeom_PrimvarVector_max_size(usdGeom_PrimvarVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdGeom_PrimvarVector_capacity(usdGeom_PrimvarVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdGeom_PrimvarVector_clear(usdGeom_PrimvarVector_t* _this) {
    _this->clear();
    return 0;
}

int usdGeom_PrimvarVector_pop_back(usdGeom_PrimvarVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdGeom_PrimvarVector_op_index(usdGeom_PrimvarVector_t const* _this, size_t __n, usdGeom_Primvar_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdGeom_PrimvarVector_default(usdGeom_PrimvarVector_t** _result) {
    *_result = new std::vector<pxr::UsdGeomPrimvar>();
    return 0;
}

int usdGeom_PrimvarVector_dtor(usdGeom_PrimvarVector_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_PrimvarsAPI_CreatePrimvar(usdGeom_PrimvarsAPI_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreatePrimvar(*name, *typeName, *interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_RemovePrimvar(usdGeom_PrimvarsAPI_t* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->RemovePrimvar(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_BlockPrimvar(usdGeom_PrimvarsAPI_t* _this, tf_Token_t const* name) {
    try {
        _this->BlockPrimvar(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetPrimvar(usdGeom_PrimvarsAPI_t const* _this, tf_Token_t const* name, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetPrimvar(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetPrimvars(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->GetPrimvars());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetAuthoredPrimvars(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->GetAuthoredPrimvars());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetPrimvarsWithValues(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->GetPrimvarsWithValues());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetPrimvarsWithAuthoredValues(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->GetPrimvarsWithAuthoredValues());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_FindInheritablePrimvars(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->FindInheritablePrimvars());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_FindIncrementallyInheritablePrimvars(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t const* inheritedFromAncestors, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->FindIncrementallyInheritablePrimvars(*inheritedFromAncestors));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_FindPrimvarWithInheritance(usdGeom_PrimvarsAPI_t const* _this, tf_Token_t const* name, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->FindPrimvarWithInheritance(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_FindPrimvarWIthInheritance_from(usdGeom_PrimvarsAPI_t const* _this, tf_Token_t const* name, usdGeom_PrimvarVector_t const* inheritedFromAncestors, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->FindPrimvarWithInheritance(*name, *inheritedFromAncestors));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_FindPrimvarsWithInheritance(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->FindPrimvarsWithInheritance());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_FindPrimvarsWIthInheritance_from(usdGeom_PrimvarsAPI_t const* _this, usdGeom_PrimvarVector_t const* inheritedFromAncestors, usdGeom_PrimvarVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomPrimvar>(_this->FindPrimvarsWithInheritance(*inheritedFromAncestors));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_HasPrimvar(usdGeom_PrimvarsAPI_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasPrimvar(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_HasPossiblyInheritedPrimvar(usdGeom_PrimvarsAPI_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->HasPossiblyInheritedPrimvar(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdGeomPrimvarsAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_PrimvarsAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvarsAPI(pxr::UsdGeomPrimvarsAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_CanContainPropertyName(tf_Token_t const* name, bool* _result) {
    try {
        *_result = pxr::UsdGeomPrimvarsAPI::CanContainPropertyName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_IsConcrete(usdGeom_PrimvarsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_IsTyped(usdGeom_PrimvarsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_IsAPISchema(usdGeom_PrimvarsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_IsAppliedAPISchema(usdGeom_PrimvarsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_IsMultipleApplyAPISchema(usdGeom_PrimvarsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetSchemaKind(usdGeom_PrimvarsAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetPrim(usdGeom_PrimvarsAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetPath(usdGeom_PrimvarsAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_GetSchemaClassPrimDefinition(usdGeom_PrimvarsAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_op_bool(usdGeom_PrimvarsAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_new(usd_Prim_t const* param00, usdGeom_PrimvarsAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvarsAPI(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_PrimvarsAPI_dtor(usdGeom_PrimvarsAPI_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Scope_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_Scope_t** _result) {
    try {
        *_result = new pxr::UsdGeomScope(pxr::UsdGeomScope::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdGeomScope::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_Scope_t** _result) {
    try {
        *_result = new pxr::UsdGeomScope(pxr::UsdGeomScope::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetVisibilityAttr(usdGeom_Scope_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_CreateVisibilityAttr(usdGeom_Scope_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetPurposeAttr(usdGeom_Scope_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_CreatePurposeAttr(usdGeom_Scope_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetProxyPrimRel(usdGeom_Scope_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_CreateProxyPrimRel(usdGeom_Scope_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_MakeVisible(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_MakeInvisible(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputeVisibility(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetPurposeVisibilityAttr(usdGeom_Scope_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputePurposeInfo(usdGeom_Scope_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputePurposeInfo_given_parent(usdGeom_Scope_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputePurpose(usdGeom_Scope_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputeProxyPrim(usdGeom_Scope_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_SetProxyPrim(usdGeom_Scope_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputeWorldBound(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputeLocalBound(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputeUntransformedBound(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputeLocalToWorldTransform(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_ComputeParentToWorldTransform(usdGeom_Scope_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_IsConcrete(usdGeom_Scope_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_IsTyped(usdGeom_Scope_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_IsAPISchema(usdGeom_Scope_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_IsAppliedAPISchema(usdGeom_Scope_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_IsMultipleApplyAPISchema(usdGeom_Scope_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetSchemaKind(usdGeom_Scope_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetPrim(usdGeom_Scope_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetPath(usdGeom_Scope_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_GetSchemaClassPrimDefinition(usdGeom_Scope_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_op_bool(usdGeom_Scope_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_new(usd_Prim_t const* param00, usdGeom_Scope_t** _result) {
    try {
        *_result = new pxr::UsdGeomScope(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Scope_dtor(usdGeom_Scope_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Sphere_GetRadiusAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateRadiusAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetDisplayColorAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateDisplayColorAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetDisplayOpacityAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplayOpacityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateDisplayOpacityAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplayOpacityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetDoubleSidedAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDoubleSidedAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateDoubleSidedAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDoubleSidedAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetOrientationAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetOrientationAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateOrientationAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateOrientationAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetDisplayColorPrimvar(usdGeom_Sphere_t const* _this, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->GetDisplayColorPrimvar());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateDisplayColorPrimvar(usdGeom_Sphere_t const* _this, tf_Token_t const* interpolation, int elementSize, usdGeom_Primvar_t** _result) {
    try {
        *_result = new pxr::UsdGeomPrimvar(_this->CreateDisplayColorPrimvar(*interpolation, elementSize));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetExtentAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateExtentAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetXformOpOrderAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddXformOp(usdGeom_Sphere_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetXformOp(usdGeom_Sphere_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddTranslateOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddScaleOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateXOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateYOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateZOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateXYZOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateXZYOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateYXZOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateYZXOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateZXYOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddRotateZYXOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddOrientOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_AddTransformOp(usdGeom_Sphere_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_SetResetXformStack(usdGeom_Sphere_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_SetXformOpOrder(usdGeom_Sphere_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetOrderedXformOps(usdGeom_Sphere_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ClearXformOpOrder(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_MakeMatrixXform(usdGeom_Sphere_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_TransformMightBeTimeVarying(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_TransformMightBeTimeVarying_using(usdGeom_Sphere_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetTimeSamples(usdGeom_Sphere_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetTimeSamplesInInterval(usdGeom_Sphere_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetLocalTransformation(usdGeom_Sphere_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetLocalTransformation_with_ops(usdGeom_Sphere_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetVisibilityAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateVisibilityAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetPurposeAttr(usdGeom_Sphere_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreatePurposeAttr(usdGeom_Sphere_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetProxyPrimRel(usdGeom_Sphere_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_CreateProxyPrimRel(usdGeom_Sphere_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_MakeVisible(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_MakeInvisible(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputeVisibility(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetPurposeVisibilityAttr(usdGeom_Sphere_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputePurposeInfo(usdGeom_Sphere_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputePurposeInfo_given_parent(usdGeom_Sphere_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputePurpose(usdGeom_Sphere_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputeProxyPrim(usdGeom_Sphere_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_SetProxyPrim(usdGeom_Sphere_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputeWorldBound(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputeLocalBound(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputeUntransformedBound(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputeLocalToWorldTransform(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_ComputeParentToWorldTransform(usdGeom_Sphere_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_IsConcrete(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_IsTyped(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_IsAPISchema(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_IsAppliedAPISchema(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_IsMultipleApplyAPISchema(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetSchemaKind(usdGeom_Sphere_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetPrim(usdGeom_Sphere_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetPath(usdGeom_Sphere_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_GetSchemaClassPrimDefinition(usdGeom_Sphere_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_op_bool(usdGeom_Sphere_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_new(usd_Prim_t const* param00, usdGeom_Sphere_t** _result) {
    try {
        *_result = new pxr::UsdGeomSphere(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Sphere_dtor(usdGeom_Sphere_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Subset_GetElementTypeAttr(usdGeom_Subset_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetElementTypeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_CreateElementTypeAttr(usdGeom_Subset_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateElementTypeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetIndicesAttr(usdGeom_Subset_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIndicesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_CreateIndicesAttr(usdGeom_Subset_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIndicesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetFamilyNameAttr(usdGeom_Subset_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFamilyNameAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_CreateFamilyNameAttr(usdGeom_Subset_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFamilyNameAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_Subset_t** _result) {
    try {
        *_result = new pxr::UsdGeomSubset(pxr::UsdGeomSubset::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdGeomSubset::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_Subset_t** _result) {
    try {
        *_result = new pxr::UsdGeomSubset(pxr::UsdGeomSubset::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_CreateGeomSubset(usdGeom_Imageable_t const* geom, tf_Token_t const* subsetName, tf_Token_t const* elementType, vt_IntArray_t const* indices, tf_Token_t const* familyName, tf_Token_t const* familyType, usdGeom_Subset_t** _result) {
    try {
        *_result = new pxr::UsdGeomSubset(pxr::UsdGeomSubset::CreateGeomSubset(*geom, *subsetName, *elementType, *indices, *familyName, *familyType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_CreateUniqueGeomSubset(usdGeom_Imageable_t const* geom, tf_Token_t const* subsetName, tf_Token_t const* elementType, vt_IntArray_t const* indices, tf_Token_t const* familyName, tf_Token_t const* familyType, usdGeom_Subset_t** _result) {
    try {
        *_result = new pxr::UsdGeomSubset(pxr::UsdGeomSubset::CreateUniqueGeomSubset(*geom, *subsetName, *elementType, *indices, *familyName, *familyType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetAllGeomSubsets(usdGeom_Imageable_t const* geom, usdGeom_SubsetVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomSubset>(pxr::UsdGeomSubset::GetAllGeomSubsets(*geom));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetGeomSubsets(usdGeom_Imageable_t const* geom, tf_Token_t const* elementType, tf_Token_t const* familyName, usdGeom_SubsetVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomSubset>(pxr::UsdGeomSubset::GetGeomSubsets(*geom, *elementType, *familyName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_SetFamilyType(usdGeom_Imageable_t const* geom, tf_Token_t const* familyName, tf_Token_t const* familyType, bool* _result) {
    try {
        *_result = pxr::UsdGeomSubset::SetFamilyType(*geom, *familyName, *familyType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetFamilyType(usdGeom_Imageable_t const* geom, tf_Token_t const* familyName, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdGeomSubset::GetFamilyType(*geom, *familyName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetUnassignedIndices(usdGeom_SubsetVector_t const* subsets, size_t const elementCount, usd_TimeCode_t const* time, vt_IntArray_t** _result) {
    try {
        *_result = new pxr::VtIntArray(pxr::UsdGeomSubset::GetUnassignedIndices(*subsets, elementCount, *time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_ValidateSubsets(usdGeom_SubsetVector_t const* subsets, size_t const elementCount, tf_Token_t const* familyType, std_String_t* const reason, bool* _result) {
    try {
        *_result = pxr::UsdGeomSubset::ValidateSubsets(*subsets, elementCount, *familyType, reason);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_ValidateFamily(usdGeom_Imageable_t const* geom, tf_Token_t const* elementType, tf_Token_t const* familyName, std_String_t* const reason, bool* _result) {
    try {
        *_result = pxr::UsdGeomSubset::ValidateFamily(*geom, *elementType, *familyName, reason);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_IsConcrete(usdGeom_Subset_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_IsTyped(usdGeom_Subset_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_IsAPISchema(usdGeom_Subset_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_IsAppliedAPISchema(usdGeom_Subset_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_IsMultipleApplyAPISchema(usdGeom_Subset_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetSchemaKind(usdGeom_Subset_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetPrim(usdGeom_Subset_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetPath(usdGeom_Subset_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_GetSchemaClassPrimDefinition(usdGeom_Subset_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_op_bool(usdGeom_Subset_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_new(usd_Prim_t const* param00, usdGeom_Subset_t** _result) {
    try {
        *_result = new pxr::UsdGeomSubset(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Subset_dtor(usdGeom_Subset_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_SubsetVector_data(usdGeom_SubsetVector_t* _this, usdGeom_Subset_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_SubsetVector_data_const(usdGeom_SubsetVector_t const* _this, usdGeom_Subset_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_SubsetVector_empty(usdGeom_SubsetVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdGeom_SubsetVector_size(usdGeom_SubsetVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdGeom_SubsetVector_max_size(usdGeom_SubsetVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdGeom_SubsetVector_capacity(usdGeom_SubsetVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdGeom_SubsetVector_clear(usdGeom_SubsetVector_t* _this) {
    _this->clear();
    return 0;
}

int usdGeom_SubsetVector_pop_back(usdGeom_SubsetVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdGeom_SubsetVector_op_index(usdGeom_SubsetVector_t const* _this, size_t __n, usdGeom_Subset_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdGeom_SubsetVector_default(usdGeom_SubsetVector_t** _result) {
    *_result = new std::vector<pxr::UsdGeomSubset>();
    return 0;
}

int usdGeom_SubsetVector_dtor(usdGeom_SubsetVector_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_VisibilityAPI_GetGuideVisibilityAttr(usdGeom_VisibilityAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetGuideVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_CreateGuideVisibilityAttr(usdGeom_VisibilityAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateGuideVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetProxyVisibilityAttr(usdGeom_VisibilityAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetProxyVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_CreateProxyVisibilityAttr(usdGeom_VisibilityAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateProxyVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetRenderVisibilityAttr(usdGeom_VisibilityAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRenderVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_CreateRenderVisibilityAttr(usdGeom_VisibilityAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRenderVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetPurposeVisibilityAttr(usdGeom_VisibilityAPI_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdGeomVisibilityAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_VisibilityAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomVisibilityAPI(pxr::UsdGeomVisibilityAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdGeomVisibilityAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_Apply(usd_Prim_t const* prim, usdGeom_VisibilityAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomVisibilityAPI(pxr::UsdGeomVisibilityAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_IsConcrete(usdGeom_VisibilityAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_IsTyped(usdGeom_VisibilityAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_IsAPISchema(usdGeom_VisibilityAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_IsAppliedAPISchema(usdGeom_VisibilityAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_IsMultipleApplyAPISchema(usdGeom_VisibilityAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetSchemaKind(usdGeom_VisibilityAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetPrim(usdGeom_VisibilityAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetPath(usdGeom_VisibilityAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_GetSchemaClassPrimDefinition(usdGeom_VisibilityAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_op_bool(usdGeom_VisibilityAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_new(usd_Prim_t const* param00, usdGeom_VisibilityAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomVisibilityAPI(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_VisibilityAPI_dtor(usdGeom_VisibilityAPI_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Xform_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdGeomXform::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_Xform_t** _result) {
    try {
        *_result = new pxr::UsdGeomXform(pxr::UsdGeomXform::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_Xform_t** _result) {
    try {
        *_result = new pxr::UsdGeomXform(pxr::UsdGeomXform::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetXformOpOrderAttr(usdGeom_Xform_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddXformOp(usdGeom_Xform_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetXformOp(usdGeom_Xform_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddTranslateOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddScaleOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateXOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateYOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateZOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateXYZOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateXZYOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateYXZOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateYZXOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateZXYOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddRotateZYXOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddOrientOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_AddTransformOp(usdGeom_Xform_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_SetResetXformStack(usdGeom_Xform_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_SetXformOpOrder(usdGeom_Xform_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetOrderedXformOps(usdGeom_Xform_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ClearXformOpOrder(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_MakeMatrixXform(usdGeom_Xform_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_TransformMightBeTimeVarying(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_TransformMightBeTimeVarying_using(usdGeom_Xform_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetTimeSamples(usdGeom_Xform_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetTimeSamplesInInterval(usdGeom_Xform_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetLocalTransformation(usdGeom_Xform_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetLocalTransformation_with_ops(usdGeom_Xform_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetVisibilityAttr(usdGeom_Xform_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_CreateVisibilityAttr(usdGeom_Xform_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetPurposeAttr(usdGeom_Xform_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_CreatePurposeAttr(usdGeom_Xform_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetProxyPrimRel(usdGeom_Xform_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_CreateProxyPrimRel(usdGeom_Xform_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_MakeVisible(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_MakeInvisible(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputeVisibility(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetPurposeVisibilityAttr(usdGeom_Xform_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputePurposeInfo(usdGeom_Xform_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputePurposeInfo_given_parent(usdGeom_Xform_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputePurpose(usdGeom_Xform_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputeProxyPrim(usdGeom_Xform_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_SetProxyPrim(usdGeom_Xform_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputeWorldBound(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputeLocalBound(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputeUntransformedBound(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputeLocalToWorldTransform(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_ComputeParentToWorldTransform(usdGeom_Xform_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_IsConcrete(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_IsTyped(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_IsAPISchema(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_IsAppliedAPISchema(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_IsMultipleApplyAPISchema(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetSchemaKind(usdGeom_Xform_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetPrim(usdGeom_Xform_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetPath(usdGeom_Xform_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_GetSchemaClassPrimDefinition(usdGeom_Xform_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_op_bool(usdGeom_Xform_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_new(usdGeom_Xform_t** _result) {
    try {
        *_result = new pxr::UsdGeomXform();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xform_dtor(usdGeom_Xform_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_XformCache_GetLocalToWorldTransform(usdGeom_XformCache_t* _this, usd_Prim_t const* prim, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetLocalToWorldTransform(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_GetParentToWorldTransform(usdGeom_XformCache_t* _this, usd_Prim_t const* prim, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetParentToWorldTransform(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_GetLocalTransformation(usdGeom_XformCache_t* _this, usd_Prim_t const* prim, bool* resetsXformStack, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetLocalTransformation(*prim, resetsXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_ComputeRelativeTransform(usdGeom_XformCache_t* _this, usd_Prim_t const* prim, usd_Prim_t const* ancestor, bool* resetXformStack, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeRelativeTransform(*prim, *ancestor, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_IsAttributeIncludedInLocalTransform(usdGeom_XformCache_t* _this, usd_Prim_t const* prim, tf_Token_t const* attrName, bool* _result) {
    try {
        *_result = _this->IsAttributeIncludedInLocalTransform(*prim, *attrName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_TransformMightBeTimeVarying(usdGeom_XformCache_t* _this, usd_Prim_t const* prim, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_GetResetXformStack(usdGeom_XformCache_t* _this, usd_Prim_t const* prim, bool* _result) {
    try {
        *_result = _this->GetResetXformStack(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_Clear(usdGeom_XformCache_t* _this) {
    try {
        _this->Clear();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_GetTime(usdGeom_XformCache_t* _this, usd_TimeCode_t* _result) {
    try {
        *_result = _this->GetTime();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_SetTime(usdGeom_XformCache_t* _this, usd_TimeCode_t time) {
    try {
        _this->SetTime(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_Swap(usdGeom_XformCache_t* _this, usdGeom_XformCache_t* other) {
    try {
        _this->Swap(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_new(usd_TimeCode_t time, usdGeom_XformCache_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformCache(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCache_dtor(usdGeom_XformCache_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_XformCommonAPI_SetXformVectors(usdGeom_XformCommonAPI_t const* _this, gf_Vec3d_t const* translation, gf_Vec3f_t const* rotation, gf_Vec3f_t const* scale, gf_Vec3f_t const* pivot, unsigned int rotOrder, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->SetXformVectors(*translation, *rotation, *scale, *pivot, static_cast<pxr::UsdGeomXformCommonAPI::RotationOrder>(rotOrder), time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetXformVectors(usdGeom_XformCommonAPI_t const* _this, gf_Vec3d_t* translation, gf_Vec3f_t* rotation, gf_Vec3f_t* scale, gf_Vec3f_t* pivot, unsigned int* rotOrder, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetXformVectors(translation, rotation, scale, pivot, reinterpret_cast<pxr::UsdGeomXformCommonAPI::RotationOrder*>(rotOrder), time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetXformVectorsByAccumulation(usdGeom_XformCommonAPI_t const* _this, gf_Vec3d_t* translation, gf_Vec3f_t* rotation, gf_Vec3f_t* scale, gf_Vec3f_t* pivot, unsigned int* rotOrder, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetXformVectorsByAccumulation(translation, rotation, scale, pivot, reinterpret_cast<pxr::UsdGeomXformCommonAPI::RotationOrder*>(rotOrder), time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetResetXformStack(usdGeom_XformCommonAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->GetResetXformStack();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_SetResetXformStack(usdGeom_XformCommonAPI_t const* _this, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_SetTranslate(usdGeom_XformCommonAPI_t const* _this, gf_Vec3d_t const* translation, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->SetTranslate(*translation, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_SetPivot(usdGeom_XformCommonAPI_t const* _this, gf_Vec3f_t const* pivot, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->SetPivot(*pivot, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_SetRotate(usdGeom_XformCommonAPI_t const* _this, gf_Vec3f_t const* rotation, unsigned int rotOrder, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->SetRotate(*rotation, static_cast<pxr::UsdGeomXformCommonAPI::RotationOrder>(rotOrder), time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_SetScale(usdGeom_XformCommonAPI_t const* _this, gf_Vec3f_t const* scale, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->SetScale(*scale, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_CreateXformOps_with_rotation_order(usdGeom_XformCommonAPI_t const* _this, unsigned int rotOrder, unsigned int op1, unsigned int op2, unsigned int op3, unsigned int op4, usdGeom_XformCommonAPIOps_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformCommonAPI::Ops(_this->CreateXformOps(static_cast<pxr::UsdGeomXformCommonAPI::RotationOrder>(rotOrder), static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op1), static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op2), static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op3), static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op4)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_CreateXformOps(usdGeom_XformCommonAPI_t const* _this, unsigned int op1, unsigned int op2, unsigned int op3, unsigned int op4, usdGeom_XformCommonAPIOps_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformCommonAPI::Ops(_this->CreateXformOps(static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op1), static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op2), static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op3), static_cast<pxr::UsdGeomXformCommonAPI::OpFlags>(op4)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdGeomXformCommonAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdGeom_XformCommonAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformCommonAPI(pxr::UsdGeomXformCommonAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_ConvertRotationOrderToOpType(unsigned int rotOrder, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(pxr::UsdGeomXformCommonAPI::ConvertRotationOrderToOpType(static_cast<pxr::UsdGeomXformCommonAPI::RotationOrder>(rotOrder)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_ConvertOpTypeToRotationOrder(unsigned int opType, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(pxr::UsdGeomXformCommonAPI::ConvertOpTypeToRotationOrder(static_cast<pxr::UsdGeomXformOp::Type>(opType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_CanConvertOpTypeToRotationOrder(unsigned int opType, bool* _result) {
    try {
        *_result = pxr::UsdGeomXformCommonAPI::CanConvertOpTypeToRotationOrder(static_cast<pxr::UsdGeomXformOp::Type>(opType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetRotationTransform(gf_Vec3f_t const* rotation, unsigned int rotationOrder, gf_Matrix4d_t* _result) {
    try {
        *_result = pxr::UsdGeomXformCommonAPI::GetRotationTransform(*rotation, static_cast<pxr::UsdGeomXformCommonAPI::RotationOrder>(rotationOrder));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_IsConcrete(usdGeom_XformCommonAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_IsTyped(usdGeom_XformCommonAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_IsAPISchema(usdGeom_XformCommonAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_IsAppliedAPISchema(usdGeom_XformCommonAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_IsMultipleApplyAPISchema(usdGeom_XformCommonAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetSchemaKind(usdGeom_XformCommonAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetPrim(usdGeom_XformCommonAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetPath(usdGeom_XformCommonAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_GetSchemaClassPrimDefinition(usdGeom_XformCommonAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_op_bool(usdGeom_XformCommonAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_new(usd_Prim_t const* param00, usdGeom_XformCommonAPI_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformCommonAPI(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformCommonAPI_dtor(usdGeom_XformCommonAPI_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_XformCommonAPIOps_dtor(usdGeom_XformCommonAPIOps_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_Xformable_GetXformOpOrderAttr(usdGeom_Xformable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddXformOp(usdGeom_Xformable_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetXformOp(usdGeom_Xformable_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddTranslateOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddScaleOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateXOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateYOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateZOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateXYZOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateXZYOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateYXZOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateYZXOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateZXYOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddRotateZYXOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddOrientOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_AddTransformOp(usdGeom_Xformable_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_SetResetXformStack(usdGeom_Xformable_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_SetXformOpOrder(usdGeom_Xformable_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetOrderedXformOps(usdGeom_Xformable_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ClearXformOpOrder(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_MakeMatrixXform(usdGeom_Xformable_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_TransformMightBeTimeVarying(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_TransformMightBeTimeVarying_using(usdGeom_Xformable_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetTimeSamples(usdGeom_Xformable_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetTimeSamplesInInterval(usdGeom_Xformable_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetLocalTransformation(usdGeom_Xformable_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetLocalTransformation_with_ops(usdGeom_Xformable_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetVisibilityAttr(usdGeom_Xformable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_CreateVisibilityAttr(usdGeom_Xformable_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetPurposeAttr(usdGeom_Xformable_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_CreatePurposeAttr(usdGeom_Xformable_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetProxyPrimRel(usdGeom_Xformable_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_CreateProxyPrimRel(usdGeom_Xformable_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_MakeVisible(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_MakeInvisible(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputeVisibility(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetPurposeVisibilityAttr(usdGeom_Xformable_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputePurposeInfo(usdGeom_Xformable_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputePurposeInfo_given_parent(usdGeom_Xformable_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputePurpose(usdGeom_Xformable_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputeProxyPrim(usdGeom_Xformable_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_SetProxyPrim(usdGeom_Xformable_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputeWorldBound(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputeLocalBound(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputeUntransformedBound(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputeLocalToWorldTransform(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_ComputeParentToWorldTransform(usdGeom_Xformable_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_IsConcrete(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_IsTyped(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_IsAPISchema(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_IsAppliedAPISchema(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_IsMultipleApplyAPISchema(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetSchemaKind(usdGeom_Xformable_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetPrim(usdGeom_Xformable_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetPath(usdGeom_Xformable_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_GetSchemaClassPrimDefinition(usdGeom_Xformable_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_op_bool(usdGeom_Xformable_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_new(usd_Prim_t const* param00, usdGeom_Xformable_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformable(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_Xformable_dtor(usdGeom_Xformable_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_XformOp_Set(usdGeom_XformOp_t const* _this, vt_Value_t const* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Set(*value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetOpType(usdGeom_XformOp_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetOpType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetPrecision(usdGeom_XformOp_t const* _this, unsigned int* _result) {
    try {
        *_result = static_cast<unsigned int>(_this->GetPrecision());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_IsInverseOp(usdGeom_XformOp_t const* _this, bool* _result) {
    try {
        *_result = _this->IsInverseOp();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetOpName(usdGeom_XformOp_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetOpName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_HasSuffix(usdGeom_XformOp_t const* _this, tf_Token_t const* suffix, bool* _result) {
    try {
        *_result = _this->HasSuffix(*suffix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetAttr(usdGeom_XformOp_t const* _this, usd_Attribute_t const** _result) {
    try {
        *_result = &_this->GetAttr();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_IsDefined(usdGeom_XformOp_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetName(usdGeom_XformOp_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetBaseName(usdGeom_XformOp_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetNamespace(usdGeom_XformOp_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetNamespace());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_SplitName(usdGeom_XformOp_t const* _this, std_StringVector_t** _result) {
    try {
        *_result = new std::vector<std::string>(_this->SplitName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetTypeName(usdGeom_XformOp_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetTimeSamples(usdGeom_XformOp_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetTimeSamplesInInterval(usdGeom_XformOp_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetNumTimeSamples(usdGeom_XformOp_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetNumTimeSamples();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_GetOpTransform(usdGeom_XformOp_t const* _this, usd_TimeCode_t time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->GetOpTransform(time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_MightBeTimeVarying(usdGeom_XformOp_t const* _this, bool* _result) {
    try {
        *_result = _this->MightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_new(usd_Attribute_t const* attr, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(*attr, isInverseOp);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdGeom_XformOp_dtor(usdGeom_XformOp_t* _this) {
    delete _this;
    return 0;
}

int usdGeom_XformOpVector_data(usdGeom_XformOpVector_t* _this, usdGeom_XformOp_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_XformOpVector_data_const(usdGeom_XformOpVector_t const* _this, usdGeom_XformOp_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdGeom_XformOpVector_empty(usdGeom_XformOpVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdGeom_XformOpVector_size(usdGeom_XformOpVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdGeom_XformOpVector_max_size(usdGeom_XformOpVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdGeom_XformOpVector_capacity(usdGeom_XformOpVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdGeom_XformOpVector_clear(usdGeom_XformOpVector_t* _this) {
    _this->clear();
    return 0;
}

int usdGeom_XformOpVector_pop_back(usdGeom_XformOpVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdGeom_XformOpVector_op_index(usdGeom_XformOpVector_t const* _this, size_t __n, usdGeom_XformOp_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdGeom_XformOpVector_default(usdGeom_XformOpVector_t** _result) {
    *_result = new std::vector<pxr::UsdGeomXformOp>();
    return 0;
}

int usdGeom_XformOpVector_dtor(usdGeom_XformOpVector_t* _this) {
    delete _this;
    return 0;
}

int usdLux_BoundableLightBase_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxBoundableLightBase::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_BoundableLightBase_t** _result) {
    try {
        *_result = new pxr::UsdLuxBoundableLightBase(pxr::UsdLuxBoundableLightBase::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_LightAPI(usdLux_BoundableLightBase_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetIntensityAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateIntensityAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetExposureAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateExposureAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetDiffuseAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateDiffuseAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetSpecularAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateSpecularAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetNormalizeAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateNormalizeAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetColorAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateColorAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetEnableColorTemperatureAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateEnableColorTemperatureAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetColorTemperatureAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateColorTemperatureAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetFiltersRel(usdLux_BoundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateFiltersRel(usdLux_BoundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetExtentAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateExtentAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetXformOpOrderAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddXformOp(usdLux_BoundableLightBase_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetXformOp(usdLux_BoundableLightBase_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddTranslateOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddScaleOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateXOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateYOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateZOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateXYZOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateXZYOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateYXZOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateYZXOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateZXYOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddRotateZYXOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddOrientOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_AddTransformOp(usdLux_BoundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_SetResetXformStack(usdLux_BoundableLightBase_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_SetXformOpOrder(usdLux_BoundableLightBase_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetOrderedXformOps(usdLux_BoundableLightBase_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ClearXformOpOrder(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_MakeMatrixXform(usdLux_BoundableLightBase_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_TransformMightBeTimeVarying(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_TransformMightBeTimeVarying_using(usdLux_BoundableLightBase_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetTimeSamples(usdLux_BoundableLightBase_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetTimeSamplesInInterval(usdLux_BoundableLightBase_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetLocalTransformation(usdLux_BoundableLightBase_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetLocalTransformation_with_ops(usdLux_BoundableLightBase_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetVisibilityAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateVisibilityAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetPurposeAttr(usdLux_BoundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreatePurposeAttr(usdLux_BoundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetProxyPrimRel(usdLux_BoundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_CreateProxyPrimRel(usdLux_BoundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_MakeVisible(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_MakeInvisible(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputeVisibility(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetPurposeVisibilityAttr(usdLux_BoundableLightBase_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputePurposeInfo(usdLux_BoundableLightBase_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputePurposeInfo_given_parent(usdLux_BoundableLightBase_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputePurpose(usdLux_BoundableLightBase_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputeProxyPrim(usdLux_BoundableLightBase_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_SetProxyPrim(usdLux_BoundableLightBase_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputeWorldBound(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputeLocalBound(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputeUntransformedBound(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputeLocalToWorldTransform(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_ComputeParentToWorldTransform(usdLux_BoundableLightBase_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_IsConcrete(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_IsTyped(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_IsAPISchema(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_IsAppliedAPISchema(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_IsMultipleApplyAPISchema(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetSchemaKind(usdLux_BoundableLightBase_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetPrim(usdLux_BoundableLightBase_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetPath(usdLux_BoundableLightBase_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_GetSchemaClassPrimDefinition(usdLux_BoundableLightBase_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_op_bool(usdLux_BoundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_from_prim(usd_Prim_t const* prim, usdLux_BoundableLightBase_t** _result) {
    try {
        *_result = new pxr::UsdLuxBoundableLightBase(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_BoundableLightBase_t** _result) {
    try {
        *_result = new pxr::UsdLuxBoundableLightBase(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_BoundableLightBase_dtor(usdLux_BoundableLightBase_t* _this) {
    delete _this;
    return 0;
}

int usdLux_CylinderLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxCylinderLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_CylinderLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxCylinderLight(pxr::UsdLuxCylinderLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_CylinderLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxCylinderLight(pxr::UsdLuxCylinderLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetLengthAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetLengthAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateLengthAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateLengthAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetRadiusAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateRadiusAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetTreatAsLineAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTreatAsLineAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateTreatAsLineAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTreatAsLineAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_LightAPI(usdLux_CylinderLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetIntensityAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateIntensityAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetExposureAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateExposureAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetDiffuseAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateDiffuseAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetSpecularAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateSpecularAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetNormalizeAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateNormalizeAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetColorAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateColorAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetEnableColorTemperatureAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateEnableColorTemperatureAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetColorTemperatureAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateColorTemperatureAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetFiltersRel(usdLux_CylinderLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateFiltersRel(usdLux_CylinderLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetExtentAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateExtentAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetXformOpOrderAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddXformOp(usdLux_CylinderLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetXformOp(usdLux_CylinderLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddTranslateOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddScaleOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateXOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateYOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateZOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateXYZOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateXZYOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateYXZOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateYZXOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateZXYOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddRotateZYXOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddOrientOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_AddTransformOp(usdLux_CylinderLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_SetResetXformStack(usdLux_CylinderLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_SetXformOpOrder(usdLux_CylinderLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetOrderedXformOps(usdLux_CylinderLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ClearXformOpOrder(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_MakeMatrixXform(usdLux_CylinderLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_TransformMightBeTimeVarying(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_TransformMightBeTimeVarying_using(usdLux_CylinderLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetTimeSamples(usdLux_CylinderLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetTimeSamplesInInterval(usdLux_CylinderLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetLocalTransformation(usdLux_CylinderLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetLocalTransformation_with_ops(usdLux_CylinderLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetVisibilityAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateVisibilityAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetPurposeAttr(usdLux_CylinderLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreatePurposeAttr(usdLux_CylinderLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetProxyPrimRel(usdLux_CylinderLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_CreateProxyPrimRel(usdLux_CylinderLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_MakeVisible(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_MakeInvisible(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputeVisibility(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetPurposeVisibilityAttr(usdLux_CylinderLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputePurposeInfo(usdLux_CylinderLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputePurposeInfo_given_parent(usdLux_CylinderLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputePurpose(usdLux_CylinderLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputeProxyPrim(usdLux_CylinderLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_SetProxyPrim(usdLux_CylinderLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputeWorldBound(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputeLocalBound(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputeUntransformedBound(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputeLocalToWorldTransform(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_ComputeParentToWorldTransform(usdLux_CylinderLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_IsConcrete(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_IsTyped(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_IsAPISchema(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_IsAppliedAPISchema(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_IsMultipleApplyAPISchema(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetSchemaKind(usdLux_CylinderLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetPrim(usdLux_CylinderLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetPath(usdLux_CylinderLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_GetSchemaClassPrimDefinition(usdLux_CylinderLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_op_bool(usdLux_CylinderLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_from_prim(usd_Prim_t const* prim, usdLux_CylinderLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxCylinderLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_CylinderLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxCylinderLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_CylinderLight_dtor(usdLux_CylinderLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_DiskLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxDiskLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_DiskLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDiskLight(pxr::UsdLuxDiskLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_DiskLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDiskLight(pxr::UsdLuxDiskLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetRadiusAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateRadiusAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_LightAPI(usdLux_DiskLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetIntensityAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateIntensityAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetExposureAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateExposureAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetDiffuseAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateDiffuseAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetSpecularAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateSpecularAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetNormalizeAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateNormalizeAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetColorAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateColorAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetEnableColorTemperatureAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateEnableColorTemperatureAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetColorTemperatureAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateColorTemperatureAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetFiltersRel(usdLux_DiskLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateFiltersRel(usdLux_DiskLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetExtentAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateExtentAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetXformOpOrderAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddXformOp(usdLux_DiskLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetXformOp(usdLux_DiskLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddTranslateOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddScaleOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateXOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateYOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateZOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateXYZOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateXZYOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateYXZOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateYZXOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateZXYOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddRotateZYXOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddOrientOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_AddTransformOp(usdLux_DiskLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_SetResetXformStack(usdLux_DiskLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_SetXformOpOrder(usdLux_DiskLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetOrderedXformOps(usdLux_DiskLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ClearXformOpOrder(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_MakeMatrixXform(usdLux_DiskLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_TransformMightBeTimeVarying(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_TransformMightBeTimeVarying_using(usdLux_DiskLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetTimeSamples(usdLux_DiskLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetTimeSamplesInInterval(usdLux_DiskLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetLocalTransformation(usdLux_DiskLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetLocalTransformation_with_ops(usdLux_DiskLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetVisibilityAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateVisibilityAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetPurposeAttr(usdLux_DiskLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreatePurposeAttr(usdLux_DiskLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetProxyPrimRel(usdLux_DiskLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_CreateProxyPrimRel(usdLux_DiskLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_MakeVisible(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_MakeInvisible(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputeVisibility(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetPurposeVisibilityAttr(usdLux_DiskLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputePurposeInfo(usdLux_DiskLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputePurposeInfo_given_parent(usdLux_DiskLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputePurpose(usdLux_DiskLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputeProxyPrim(usdLux_DiskLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_SetProxyPrim(usdLux_DiskLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputeWorldBound(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputeLocalBound(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputeUntransformedBound(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputeLocalToWorldTransform(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_ComputeParentToWorldTransform(usdLux_DiskLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_IsConcrete(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_IsTyped(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_IsAPISchema(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_IsAppliedAPISchema(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_IsMultipleApplyAPISchema(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetSchemaKind(usdLux_DiskLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetPrim(usdLux_DiskLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetPath(usdLux_DiskLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_GetSchemaClassPrimDefinition(usdLux_DiskLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_op_bool(usdLux_DiskLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_from_prim(usd_Prim_t const* prim, usdLux_DiskLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDiskLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_DiskLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDiskLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DiskLight_dtor(usdLux_DiskLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_DistantLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxDistantLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_DistantLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDistantLight(pxr::UsdLuxDistantLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_DistantLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDistantLight(pxr::UsdLuxDistantLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetAngleAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAngleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateAngleAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAngleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_op_assign(usdLux_DistantLight_t* _this, usdLux_DistantLight_t const* param00, usdLux_DistantLight_t** _result) {
    try {
        *_result = &_this->operator=(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_LightAPI(usdLux_DistantLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetIntensityAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateIntensityAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetExposureAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateExposureAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetDiffuseAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateDiffuseAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetSpecularAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateSpecularAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetNormalizeAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateNormalizeAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetColorAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateColorAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetEnableColorTemperatureAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateEnableColorTemperatureAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetColorTemperatureAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateColorTemperatureAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetFiltersRel(usdLux_DistantLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateFiltersRel(usdLux_DistantLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetXformOpOrderAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddXformOp(usdLux_DistantLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetXformOp(usdLux_DistantLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddTranslateOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddScaleOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateXOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateYOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateZOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateXYZOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateXZYOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateYXZOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateYZXOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateZXYOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddRotateZYXOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddOrientOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_AddTransformOp(usdLux_DistantLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_SetResetXformStack(usdLux_DistantLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_SetXformOpOrder(usdLux_DistantLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetOrderedXformOps(usdLux_DistantLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ClearXformOpOrder(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_MakeMatrixXform(usdLux_DistantLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_TransformMightBeTimeVarying(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_TransformMightBeTimeVarying_using(usdLux_DistantLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetTimeSamples(usdLux_DistantLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetTimeSamplesInInterval(usdLux_DistantLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetLocalTransformation(usdLux_DistantLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetLocalTransformation_with_ops(usdLux_DistantLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetVisibilityAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateVisibilityAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetPurposeAttr(usdLux_DistantLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreatePurposeAttr(usdLux_DistantLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetProxyPrimRel(usdLux_DistantLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_CreateProxyPrimRel(usdLux_DistantLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_MakeVisible(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_MakeInvisible(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputeVisibility(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetPurposeVisibilityAttr(usdLux_DistantLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputePurposeInfo(usdLux_DistantLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputePurposeInfo_given_parent(usdLux_DistantLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputePurpose(usdLux_DistantLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputeProxyPrim(usdLux_DistantLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_SetProxyPrim(usdLux_DistantLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputeWorldBound(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputeLocalBound(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputeUntransformedBound(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputeLocalToWorldTransform(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_ComputeParentToWorldTransform(usdLux_DistantLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_IsConcrete(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_IsTyped(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_IsAPISchema(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_IsAppliedAPISchema(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_IsMultipleApplyAPISchema(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetSchemaKind(usdLux_DistantLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetPrim(usdLux_DistantLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetPath(usdLux_DistantLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_GetSchemaClassPrimDefinition(usdLux_DistantLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_op_bool(usdLux_DistantLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_from_prim(usd_Prim_t const* prim, usdLux_DistantLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDistantLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_DistantLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDistantLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DistantLight_dtor(usdLux_DistantLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_DomeLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxDomeLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_DomeLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDomeLight(pxr::UsdLuxDomeLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_DomeLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDomeLight(pxr::UsdLuxDomeLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetTextureFileAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTextureFileAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateTextureFileAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTextureFileAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetTextureFormatAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTextureFormatAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateTextureFormatAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTextureFormatAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetGuideRadiusAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetGuideRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateGuideRadiusAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateGuideRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetPortalsRel(usdLux_DomeLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetPortalsRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreatePortalsRel(usdLux_DomeLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreatePortalsRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_OrientToStageUpAxis(usdLux_DomeLight_t const* _this) {
    try {
        _this->OrientToStageUpAxis();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_LightAPI(usdLux_DomeLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetIntensityAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateIntensityAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetExposureAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateExposureAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetDiffuseAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateDiffuseAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetSpecularAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateSpecularAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetNormalizeAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateNormalizeAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetColorAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateColorAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetEnableColorTemperatureAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateEnableColorTemperatureAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetColorTemperatureAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateColorTemperatureAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetFiltersRel(usdLux_DomeLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateFiltersRel(usdLux_DomeLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetXformOpOrderAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddXformOp(usdLux_DomeLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetXformOp(usdLux_DomeLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddTranslateOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddScaleOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateXOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateYOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateZOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateXYZOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateXZYOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateYXZOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateYZXOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateZXYOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddRotateZYXOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddOrientOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_AddTransformOp(usdLux_DomeLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_SetResetXformStack(usdLux_DomeLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_SetXformOpOrder(usdLux_DomeLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetOrderedXformOps(usdLux_DomeLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ClearXformOpOrder(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_MakeMatrixXform(usdLux_DomeLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_TransformMightBeTimeVarying(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_TransformMightBeTimeVarying_using(usdLux_DomeLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetTimeSamples(usdLux_DomeLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetTimeSamplesInInterval(usdLux_DomeLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetLocalTransformation(usdLux_DomeLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetLocalTransformation_with_ops(usdLux_DomeLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetVisibilityAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateVisibilityAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetPurposeAttr(usdLux_DomeLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreatePurposeAttr(usdLux_DomeLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetProxyPrimRel(usdLux_DomeLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_CreateProxyPrimRel(usdLux_DomeLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_MakeVisible(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_MakeInvisible(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputeVisibility(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetPurposeVisibilityAttr(usdLux_DomeLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputePurposeInfo(usdLux_DomeLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputePurposeInfo_given_parent(usdLux_DomeLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputePurpose(usdLux_DomeLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputeProxyPrim(usdLux_DomeLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_SetProxyPrim(usdLux_DomeLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputeWorldBound(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputeLocalBound(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputeUntransformedBound(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputeLocalToWorldTransform(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_ComputeParentToWorldTransform(usdLux_DomeLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_IsConcrete(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_IsTyped(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_IsAPISchema(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_IsAppliedAPISchema(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_IsMultipleApplyAPISchema(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetSchemaKind(usdLux_DomeLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetPrim(usdLux_DomeLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetPath(usdLux_DomeLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_GetSchemaClassPrimDefinition(usdLux_DomeLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_op_bool(usdLux_DomeLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_from_prim(usd_Prim_t const* prim, usdLux_DomeLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDomeLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_DomeLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxDomeLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_DomeLight_dtor(usdLux_DomeLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_GeometryLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxGeometryLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_GeometryLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxGeometryLight(pxr::UsdLuxGeometryLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_GeometryLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxGeometryLight(pxr::UsdLuxGeometryLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetGeometryRel(usdLux_GeometryLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetGeometryRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateGeometryRel(usdLux_GeometryLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateGeometryRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_LightAPI(usdLux_GeometryLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetIntensityAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateIntensityAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetExposureAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateExposureAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetDiffuseAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateDiffuseAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetSpecularAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateSpecularAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetNormalizeAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateNormalizeAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetColorAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateColorAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetEnableColorTemperatureAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateEnableColorTemperatureAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetColorTemperatureAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateColorTemperatureAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetFiltersRel(usdLux_GeometryLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateFiltersRel(usdLux_GeometryLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetXformOpOrderAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddXformOp(usdLux_GeometryLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetXformOp(usdLux_GeometryLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddTranslateOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddScaleOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateXOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateYOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateZOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateXYZOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateXZYOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateYXZOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateYZXOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateZXYOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddRotateZYXOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddOrientOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_AddTransformOp(usdLux_GeometryLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_SetResetXformStack(usdLux_GeometryLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_SetXformOpOrder(usdLux_GeometryLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetOrderedXformOps(usdLux_GeometryLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ClearXformOpOrder(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_MakeMatrixXform(usdLux_GeometryLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_TransformMightBeTimeVarying(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_TransformMightBeTimeVarying_using(usdLux_GeometryLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetTimeSamples(usdLux_GeometryLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetTimeSamplesInInterval(usdLux_GeometryLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetLocalTransformation(usdLux_GeometryLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetLocalTransformation_with_ops(usdLux_GeometryLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetVisibilityAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateVisibilityAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetPurposeAttr(usdLux_GeometryLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreatePurposeAttr(usdLux_GeometryLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetProxyPrimRel(usdLux_GeometryLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_CreateProxyPrimRel(usdLux_GeometryLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_MakeVisible(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_MakeInvisible(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputeVisibility(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetPurposeVisibilityAttr(usdLux_GeometryLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputePurposeInfo(usdLux_GeometryLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputePurposeInfo_given_parent(usdLux_GeometryLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputePurpose(usdLux_GeometryLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputeProxyPrim(usdLux_GeometryLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_SetProxyPrim(usdLux_GeometryLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputeWorldBound(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputeLocalBound(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputeUntransformedBound(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputeLocalToWorldTransform(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_ComputeParentToWorldTransform(usdLux_GeometryLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_IsConcrete(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_IsTyped(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_IsAPISchema(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_IsAppliedAPISchema(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_IsMultipleApplyAPISchema(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetSchemaKind(usdLux_GeometryLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetPrim(usdLux_GeometryLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetPath(usdLux_GeometryLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_GetSchemaClassPrimDefinition(usdLux_GeometryLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_op_bool(usdLux_GeometryLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_from_prim(usd_Prim_t const* prim, usdLux_GeometryLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxGeometryLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_GeometryLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxGeometryLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_GeometryLight_dtor(usdLux_GeometryLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_LightAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxLightAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(pxr::UsdLuxLightAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdLuxLightAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_Apply(usd_Prim_t const* prim, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(pxr::UsdLuxLightAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetShaderIdAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShaderIdAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateShaderIdAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShaderIdAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetMaterialSyncModeAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetMaterialSyncModeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateMaterialSyncModeAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateMaterialSyncModeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetIntensityAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateIntensityAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetExposureAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateExposureAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetDiffuseAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateDiffuseAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetSpecularAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateSpecularAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetNormalizeAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateNormalizeAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetColorAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateColorAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetEnableColorTemperatureAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateEnableColorTemperatureAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetColorTemperatureAttr(usdLux_LightAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateColorTemperatureAttr(usdLux_LightAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetFiltersRel(usdLux_LightAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateFiltersRel(usdLux_LightAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_ConnectableAPI(usdLux_LightAPI_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateOutput(usdLux_LightAPI_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetOutput(usdLux_LightAPI_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetOutputs(usdLux_LightAPI_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateInput(usdLux_LightAPI_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetInput(usdLux_LightAPI_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetInputs(usdLux_LightAPI_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetLightLinkCollectionAPI(usdLux_LightAPI_t const* _this, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(_this->GetLightLinkCollectionAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetShadowLinkCollectionAPI(usdLux_LightAPI_t const* _this, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(_this->GetShadowLinkCollectionAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetShaderIdAttrForRenderContext(usdLux_LightAPI_t const* _this, tf_Token_t const* renderContext, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShaderIdAttrForRenderContext(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_CreateShaderIdAttrForRenderContext(usdLux_LightAPI_t const* _this, tf_Token_t const* renderContext, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShaderIdAttrForRenderContext(*renderContext, *defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetShaderId(usdLux_LightAPI_t const* _this, tf_TokenVector_t const* renderContexts, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetShaderId(*renderContexts));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_IsConcrete(usdLux_LightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_IsTyped(usdLux_LightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_IsAPISchema(usdLux_LightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_IsAppliedAPISchema(usdLux_LightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_IsMultipleApplyAPISchema(usdLux_LightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetSchemaKind(usdLux_LightAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetPrim(usdLux_LightAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetPath(usdLux_LightAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_GetSchemaClassPrimDefinition(usdLux_LightAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_op_bool(usdLux_LightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_from_prim(usd_Prim_t const* prim, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_from_conneactable(usdShade_ConnectableAPI_t const* connectable, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(*connectable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightAPI_dtor(usdLux_LightAPI_t* _this) {
    delete _this;
    return 0;
}

int usdLux_LightFilter_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxLightFilter::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_LightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightFilter(pxr::UsdLuxLightFilter::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_LightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightFilter(pxr::UsdLuxLightFilter::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetShaderIdAttr(usdLux_LightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShaderIdAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_CreateShaderIdAttr(usdLux_LightFilter_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShaderIdAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ConnectableAPI(usdLux_LightFilter_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_CreateOutput(usdLux_LightFilter_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetOutput(usdLux_LightFilter_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetOutputs(usdLux_LightFilter_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_CreateInput(usdLux_LightFilter_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetInput(usdLux_LightFilter_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetInputs(usdLux_LightFilter_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetFilterLinkCollectionAPI(usdLux_LightFilter_t const* _this, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(_this->GetFilterLinkCollectionAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetShaderIdAttrForRenderContext(usdLux_LightFilter_t const* _this, tf_Token_t const* renderContext, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShaderIdAttrForRenderContext(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_CreateShaderIdAttrForRenderContext(usdLux_LightFilter_t const* _this, tf_Token_t const* renderContext, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShaderIdAttrForRenderContext(*renderContext, *defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetShaderId(usdLux_LightFilter_t const* _this, tf_TokenVector_t const* renderContexts, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetShaderId(*renderContexts));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetXformOpOrderAttr(usdLux_LightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddXformOp(usdLux_LightFilter_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetXformOp(usdLux_LightFilter_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddTranslateOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddScaleOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateXOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateYOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateZOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateXYZOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateXZYOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateYXZOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateYZXOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateZXYOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddRotateZYXOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddOrientOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_AddTransformOp(usdLux_LightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_SetResetXformStack(usdLux_LightFilter_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_SetXformOpOrder(usdLux_LightFilter_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetOrderedXformOps(usdLux_LightFilter_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ClearXformOpOrder(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_MakeMatrixXform(usdLux_LightFilter_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_TransformMightBeTimeVarying(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_TransformMightBeTimeVarying_using(usdLux_LightFilter_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetTimeSamples(usdLux_LightFilter_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetTimeSamplesInInterval(usdLux_LightFilter_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetLocalTransformation(usdLux_LightFilter_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetLocalTransformation_with_ops(usdLux_LightFilter_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetVisibilityAttr(usdLux_LightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_CreateVisibilityAttr(usdLux_LightFilter_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetPurposeAttr(usdLux_LightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_CreatePurposeAttr(usdLux_LightFilter_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetProxyPrimRel(usdLux_LightFilter_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_CreateProxyPrimRel(usdLux_LightFilter_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_MakeVisible(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_MakeInvisible(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputeVisibility(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetPurposeVisibilityAttr(usdLux_LightFilter_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputePurposeInfo(usdLux_LightFilter_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputePurposeInfo_given_parent(usdLux_LightFilter_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputePurpose(usdLux_LightFilter_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputeProxyPrim(usdLux_LightFilter_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_SetProxyPrim(usdLux_LightFilter_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputeWorldBound(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputeLocalBound(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputeUntransformedBound(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputeLocalToWorldTransform(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_ComputeParentToWorldTransform(usdLux_LightFilter_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_IsConcrete(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_IsTyped(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_IsAPISchema(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_IsAppliedAPISchema(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_IsMultipleApplyAPISchema(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetSchemaKind(usdLux_LightFilter_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetPrim(usdLux_LightFilter_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetPath(usdLux_LightFilter_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_GetSchemaClassPrimDefinition(usdLux_LightFilter_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_op_bool(usdLux_LightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_from_prim(usd_Prim_t const* prim, usdLux_LightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightFilter(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_LightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightFilter(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_from_conneactable(usdShade_ConnectableAPI_t const* connectable, usdLux_LightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightFilter(*connectable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightFilter_dtor(usdLux_LightFilter_t* _this) {
    delete _this;
    return 0;
}

int usdLux_LightListAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxLightListAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_LightListAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightListAPI(pxr::UsdLuxLightListAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdLuxLightListAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_Apply(usd_Prim_t const* prim, usdLux_LightListAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightListAPI(pxr::UsdLuxLightListAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_GetLightListCacheBehaviorAttr(usdLux_LightListAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetLightListCacheBehaviorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_CreateLightListCacheBehaviorAttr(usdLux_LightListAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateLightListCacheBehaviorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_GetLightListRel(usdLux_LightListAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetLightListRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_CreateLightListRel(usdLux_LightListAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateLightListRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_ComputeLightList(usdLux_LightListAPI_t const* _this, unsigned int mode, sdf_PathSet_t** _result) {
    try {
        *_result = new pxr::SdfPathSet(_this->ComputeLightList(static_cast<pxr::UsdLuxLightListAPI::ComputeMode>(mode)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_StoreLightList(usdLux_LightListAPI_t const* _this, sdf_PathSet_t const* param00) {
    try {
        _this->StoreLightList(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_InvalidateLightList(usdLux_LightListAPI_t const* _this) {
    try {
        _this->InvalidateLightList();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_IsConcrete(usdLux_LightListAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_IsTyped(usdLux_LightListAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_IsAPISchema(usdLux_LightListAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_IsAppliedAPISchema(usdLux_LightListAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_IsMultipleApplyAPISchema(usdLux_LightListAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_GetSchemaKind(usdLux_LightListAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_GetPrim(usdLux_LightListAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_GetPath(usdLux_LightListAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_GetSchemaClassPrimDefinition(usdLux_LightListAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_op_bool(usdLux_LightListAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_from_prim(usd_Prim_t const* prim, usdLux_LightListAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightListAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_LightListAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightListAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_LightListAPI_dtor(usdLux_LightListAPI_t* _this) {
    delete _this;
    return 0;
}

int usdLux_MeshLightAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxMeshLightAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_MeshLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxMeshLightAPI(pxr::UsdLuxMeshLightAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdLuxMeshLightAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_Apply(usd_Prim_t const* prim, usdLux_MeshLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxMeshLightAPI(pxr::UsdLuxMeshLightAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_IsConcrete(usdLux_MeshLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_IsTyped(usdLux_MeshLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_IsAPISchema(usdLux_MeshLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_IsAppliedAPISchema(usdLux_MeshLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_IsMultipleApplyAPISchema(usdLux_MeshLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_GetSchemaKind(usdLux_MeshLightAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_GetPrim(usdLux_MeshLightAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_GetPath(usdLux_MeshLightAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_GetSchemaClassPrimDefinition(usdLux_MeshLightAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_op_bool(usdLux_MeshLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_from_prim(usd_Prim_t const* prim, usdLux_MeshLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxMeshLightAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_MeshLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxMeshLightAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_MeshLightAPI_dtor(usdLux_MeshLightAPI_t* _this) {
    delete _this;
    return 0;
}

int usdLux_NonboundableLightBase_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxNonboundableLightBase::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_NonboundableLightBase_t** _result) {
    try {
        *_result = new pxr::UsdLuxNonboundableLightBase(pxr::UsdLuxNonboundableLightBase::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_LightAPI(usdLux_NonboundableLightBase_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetIntensityAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateIntensityAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetExposureAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateExposureAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetDiffuseAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateDiffuseAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetSpecularAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateSpecularAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetNormalizeAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateNormalizeAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetColorAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateColorAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetEnableColorTemperatureAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateEnableColorTemperatureAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetColorTemperatureAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateColorTemperatureAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetFiltersRel(usdLux_NonboundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateFiltersRel(usdLux_NonboundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetXformOpOrderAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddXformOp(usdLux_NonboundableLightBase_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetXformOp(usdLux_NonboundableLightBase_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddTranslateOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddScaleOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateXOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateYOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateZOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateXYZOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateXZYOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateYXZOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateYZXOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateZXYOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddRotateZYXOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddOrientOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_AddTransformOp(usdLux_NonboundableLightBase_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_SetResetXformStack(usdLux_NonboundableLightBase_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_SetXformOpOrder(usdLux_NonboundableLightBase_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetOrderedXformOps(usdLux_NonboundableLightBase_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ClearXformOpOrder(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_MakeMatrixXform(usdLux_NonboundableLightBase_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_TransformMightBeTimeVarying(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_TransformMightBeTimeVarying_using(usdLux_NonboundableLightBase_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetTimeSamples(usdLux_NonboundableLightBase_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetTimeSamplesInInterval(usdLux_NonboundableLightBase_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetLocalTransformation(usdLux_NonboundableLightBase_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetLocalTransformation_with_ops(usdLux_NonboundableLightBase_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetVisibilityAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateVisibilityAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetPurposeAttr(usdLux_NonboundableLightBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreatePurposeAttr(usdLux_NonboundableLightBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetProxyPrimRel(usdLux_NonboundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_CreateProxyPrimRel(usdLux_NonboundableLightBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_MakeVisible(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_MakeInvisible(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputeVisibility(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetPurposeVisibilityAttr(usdLux_NonboundableLightBase_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputePurposeInfo(usdLux_NonboundableLightBase_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputePurposeInfo_given_parent(usdLux_NonboundableLightBase_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputePurpose(usdLux_NonboundableLightBase_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputeProxyPrim(usdLux_NonboundableLightBase_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_SetProxyPrim(usdLux_NonboundableLightBase_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputeWorldBound(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputeLocalBound(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputeUntransformedBound(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputeLocalToWorldTransform(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_ComputeParentToWorldTransform(usdLux_NonboundableLightBase_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_IsConcrete(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_IsTyped(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_IsAPISchema(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_IsAppliedAPISchema(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_IsMultipleApplyAPISchema(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetSchemaKind(usdLux_NonboundableLightBase_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetPrim(usdLux_NonboundableLightBase_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetPath(usdLux_NonboundableLightBase_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_GetSchemaClassPrimDefinition(usdLux_NonboundableLightBase_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_op_bool(usdLux_NonboundableLightBase_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_from_prim(usd_Prim_t const* prim, usdLux_NonboundableLightBase_t** _result) {
    try {
        *_result = new pxr::UsdLuxNonboundableLightBase(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_NonboundableLightBase_t** _result) {
    try {
        *_result = new pxr::UsdLuxNonboundableLightBase(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_NonboundableLightBase_dtor(usdLux_NonboundableLightBase_t* _this) {
    delete _this;
    return 0;
}

int usdLux_PluginLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxPluginLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_PluginLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLight(pxr::UsdLuxPluginLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_PluginLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLight(pxr::UsdLuxPluginLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetNodeDefAPI(usdLux_PluginLight_t const* _this, usdShade_NodeDefAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeDefAPI(_this->GetNodeDefAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetXformOpOrderAttr(usdLux_PluginLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddXformOp(usdLux_PluginLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetXformOp(usdLux_PluginLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddTranslateOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddScaleOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateXOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateYOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateZOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateXYZOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateXZYOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateYXZOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateYZXOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateZXYOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddRotateZYXOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddOrientOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_AddTransformOp(usdLux_PluginLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_SetResetXformStack(usdLux_PluginLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_SetXformOpOrder(usdLux_PluginLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetOrderedXformOps(usdLux_PluginLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ClearXformOpOrder(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_MakeMatrixXform(usdLux_PluginLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_TransformMightBeTimeVarying(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_TransformMightBeTimeVarying_using(usdLux_PluginLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetTimeSamples(usdLux_PluginLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetTimeSamplesInInterval(usdLux_PluginLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetLocalTransformation(usdLux_PluginLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetLocalTransformation_with_ops(usdLux_PluginLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetVisibilityAttr(usdLux_PluginLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_CreateVisibilityAttr(usdLux_PluginLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetPurposeAttr(usdLux_PluginLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_CreatePurposeAttr(usdLux_PluginLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetProxyPrimRel(usdLux_PluginLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_CreateProxyPrimRel(usdLux_PluginLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_MakeVisible(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_MakeInvisible(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputeVisibility(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetPurposeVisibilityAttr(usdLux_PluginLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputePurposeInfo(usdLux_PluginLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputePurposeInfo_given_parent(usdLux_PluginLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputePurpose(usdLux_PluginLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputeProxyPrim(usdLux_PluginLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_SetProxyPrim(usdLux_PluginLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputeWorldBound(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputeLocalBound(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputeUntransformedBound(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputeLocalToWorldTransform(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_ComputeParentToWorldTransform(usdLux_PluginLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_IsConcrete(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_IsTyped(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_IsAPISchema(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_IsAppliedAPISchema(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_IsMultipleApplyAPISchema(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetSchemaKind(usdLux_PluginLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetPrim(usdLux_PluginLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetPath(usdLux_PluginLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_GetSchemaClassPrimDefinition(usdLux_PluginLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_op_bool(usdLux_PluginLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_from_prim(usd_Prim_t const* prim, usdLux_PluginLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_PluginLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLight_dtor(usdLux_PluginLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_PluginLightFilter_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxPluginLightFilter::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_PluginLightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLightFilter(pxr::UsdLuxPluginLightFilter::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_PluginLightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLightFilter(pxr::UsdLuxPluginLightFilter::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetNodeDefAPI(usdLux_PluginLightFilter_t const* _this, usdShade_NodeDefAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeDefAPI(_this->GetNodeDefAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetShaderIdAttr(usdLux_PluginLightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShaderIdAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_CreateShaderIdAttr(usdLux_PluginLightFilter_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShaderIdAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ConnectableAPI(usdLux_PluginLightFilter_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_CreateOutput(usdLux_PluginLightFilter_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetOutput(usdLux_PluginLightFilter_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetOutputs(usdLux_PluginLightFilter_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_CreateInput(usdLux_PluginLightFilter_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetInput(usdLux_PluginLightFilter_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetInputs(usdLux_PluginLightFilter_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetFilterLinkCollectionAPI(usdLux_PluginLightFilter_t const* _this, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(_this->GetFilterLinkCollectionAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetShaderIdAttrForRenderContext(usdLux_PluginLightFilter_t const* _this, tf_Token_t const* renderContext, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShaderIdAttrForRenderContext(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_CreateShaderIdAttrForRenderContext(usdLux_PluginLightFilter_t const* _this, tf_Token_t const* renderContext, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShaderIdAttrForRenderContext(*renderContext, *defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetShaderId(usdLux_PluginLightFilter_t const* _this, tf_TokenVector_t const* renderContexts, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetShaderId(*renderContexts));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetXformOpOrderAttr(usdLux_PluginLightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddXformOp(usdLux_PluginLightFilter_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetXformOp(usdLux_PluginLightFilter_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddTranslateOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddScaleOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateXOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateYOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateZOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateXYZOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateXZYOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateYXZOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateYZXOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateZXYOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddRotateZYXOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddOrientOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_AddTransformOp(usdLux_PluginLightFilter_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_SetResetXformStack(usdLux_PluginLightFilter_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_SetXformOpOrder(usdLux_PluginLightFilter_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetOrderedXformOps(usdLux_PluginLightFilter_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ClearXformOpOrder(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_MakeMatrixXform(usdLux_PluginLightFilter_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_TransformMightBeTimeVarying(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_TransformMightBeTimeVarying_using(usdLux_PluginLightFilter_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetTimeSamples(usdLux_PluginLightFilter_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetTimeSamplesInInterval(usdLux_PluginLightFilter_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetLocalTransformation(usdLux_PluginLightFilter_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetLocalTransformation_with_ops(usdLux_PluginLightFilter_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetVisibilityAttr(usdLux_PluginLightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_CreateVisibilityAttr(usdLux_PluginLightFilter_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetPurposeAttr(usdLux_PluginLightFilter_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_CreatePurposeAttr(usdLux_PluginLightFilter_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetProxyPrimRel(usdLux_PluginLightFilter_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_CreateProxyPrimRel(usdLux_PluginLightFilter_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_MakeVisible(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_MakeInvisible(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputeVisibility(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetPurposeVisibilityAttr(usdLux_PluginLightFilter_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputePurposeInfo(usdLux_PluginLightFilter_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputePurposeInfo_given_parent(usdLux_PluginLightFilter_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputePurpose(usdLux_PluginLightFilter_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputeProxyPrim(usdLux_PluginLightFilter_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_SetProxyPrim(usdLux_PluginLightFilter_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputeWorldBound(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputeLocalBound(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputeUntransformedBound(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputeLocalToWorldTransform(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_ComputeParentToWorldTransform(usdLux_PluginLightFilter_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_IsConcrete(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_IsTyped(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_IsAPISchema(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_IsAppliedAPISchema(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_IsMultipleApplyAPISchema(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetSchemaKind(usdLux_PluginLightFilter_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetPrim(usdLux_PluginLightFilter_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetPath(usdLux_PluginLightFilter_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_GetSchemaClassPrimDefinition(usdLux_PluginLightFilter_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_op_bool(usdLux_PluginLightFilter_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_from_prim(usd_Prim_t const* prim, usdLux_PluginLightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLightFilter(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_PluginLightFilter_t** _result) {
    try {
        *_result = new pxr::UsdLuxPluginLightFilter(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PluginLightFilter_dtor(usdLux_PluginLightFilter_t* _this) {
    delete _this;
    return 0;
}

int usdLux_PortalLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxPortalLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_PortalLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPortalLight(pxr::UsdLuxPortalLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_PortalLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPortalLight(pxr::UsdLuxPortalLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_LightAPI(usdLux_PortalLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetIntensityAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateIntensityAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetExposureAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateExposureAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetDiffuseAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateDiffuseAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetSpecularAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateSpecularAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetNormalizeAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateNormalizeAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetColorAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateColorAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetEnableColorTemperatureAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateEnableColorTemperatureAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetColorTemperatureAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateColorTemperatureAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetFiltersRel(usdLux_PortalLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateFiltersRel(usdLux_PortalLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetExtentAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateExtentAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetXformOpOrderAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddXformOp(usdLux_PortalLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetXformOp(usdLux_PortalLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddTranslateOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddScaleOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateXOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateYOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateZOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateXYZOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateXZYOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateYXZOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateYZXOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateZXYOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddRotateZYXOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddOrientOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_AddTransformOp(usdLux_PortalLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_SetResetXformStack(usdLux_PortalLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_SetXformOpOrder(usdLux_PortalLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetOrderedXformOps(usdLux_PortalLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ClearXformOpOrder(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_MakeMatrixXform(usdLux_PortalLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_TransformMightBeTimeVarying(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_TransformMightBeTimeVarying_using(usdLux_PortalLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetTimeSamples(usdLux_PortalLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetTimeSamplesInInterval(usdLux_PortalLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetLocalTransformation(usdLux_PortalLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetLocalTransformation_with_ops(usdLux_PortalLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetVisibilityAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateVisibilityAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetPurposeAttr(usdLux_PortalLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreatePurposeAttr(usdLux_PortalLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetProxyPrimRel(usdLux_PortalLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_CreateProxyPrimRel(usdLux_PortalLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_MakeVisible(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_MakeInvisible(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputeVisibility(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetPurposeVisibilityAttr(usdLux_PortalLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputePurposeInfo(usdLux_PortalLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputePurposeInfo_given_parent(usdLux_PortalLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputePurpose(usdLux_PortalLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputeProxyPrim(usdLux_PortalLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_SetProxyPrim(usdLux_PortalLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputeWorldBound(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputeLocalBound(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputeUntransformedBound(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputeLocalToWorldTransform(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_ComputeParentToWorldTransform(usdLux_PortalLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_IsConcrete(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_IsTyped(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_IsAPISchema(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_IsAppliedAPISchema(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_IsMultipleApplyAPISchema(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetSchemaKind(usdLux_PortalLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetPrim(usdLux_PortalLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetPath(usdLux_PortalLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_GetSchemaClassPrimDefinition(usdLux_PortalLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_op_bool(usdLux_PortalLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_from_prim(usd_Prim_t const* prim, usdLux_PortalLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPortalLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_PortalLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxPortalLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_PortalLight_dtor(usdLux_PortalLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_RectLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxRectLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_RectLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxRectLight(pxr::UsdLuxRectLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_RectLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxRectLight(pxr::UsdLuxRectLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetWidthAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetWidthAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateWidthAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateWidthAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetHeightAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetHeightAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateHeightAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateHeightAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetTextureFileAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTextureFileAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateTextureFileAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTextureFileAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_LightAPI(usdLux_RectLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetIntensityAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateIntensityAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetExposureAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateExposureAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetDiffuseAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateDiffuseAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetSpecularAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateSpecularAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetNormalizeAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateNormalizeAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetColorAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateColorAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetEnableColorTemperatureAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateEnableColorTemperatureAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetColorTemperatureAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateColorTemperatureAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetFiltersRel(usdLux_RectLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateFiltersRel(usdLux_RectLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetExtentAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateExtentAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetXformOpOrderAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddXformOp(usdLux_RectLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetXformOp(usdLux_RectLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddTranslateOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddScaleOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateXOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateYOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateZOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateXYZOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateXZYOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateYXZOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateYZXOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateZXYOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddRotateZYXOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddOrientOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_AddTransformOp(usdLux_RectLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_SetResetXformStack(usdLux_RectLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_SetXformOpOrder(usdLux_RectLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetOrderedXformOps(usdLux_RectLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ClearXformOpOrder(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_MakeMatrixXform(usdLux_RectLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_TransformMightBeTimeVarying(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_TransformMightBeTimeVarying_using(usdLux_RectLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetTimeSamples(usdLux_RectLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetTimeSamplesInInterval(usdLux_RectLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetLocalTransformation(usdLux_RectLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetLocalTransformation_with_ops(usdLux_RectLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetVisibilityAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateVisibilityAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetPurposeAttr(usdLux_RectLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreatePurposeAttr(usdLux_RectLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetProxyPrimRel(usdLux_RectLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_CreateProxyPrimRel(usdLux_RectLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_MakeVisible(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_MakeInvisible(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputeVisibility(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetPurposeVisibilityAttr(usdLux_RectLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputePurposeInfo(usdLux_RectLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputePurposeInfo_given_parent(usdLux_RectLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputePurpose(usdLux_RectLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputeProxyPrim(usdLux_RectLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_SetProxyPrim(usdLux_RectLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputeWorldBound(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputeLocalBound(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputeUntransformedBound(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputeLocalToWorldTransform(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_ComputeParentToWorldTransform(usdLux_RectLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_IsConcrete(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_IsTyped(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_IsAPISchema(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_IsAppliedAPISchema(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_IsMultipleApplyAPISchema(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetSchemaKind(usdLux_RectLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetPrim(usdLux_RectLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetPath(usdLux_RectLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_GetSchemaClassPrimDefinition(usdLux_RectLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_op_bool(usdLux_RectLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_from_prim(usd_Prim_t const* prim, usdLux_RectLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxRectLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_RectLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxRectLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_RectLight_dtor(usdLux_RectLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_ShadowAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxShadowAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_ShadowAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShadowAPI(pxr::UsdLuxShadowAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdLuxShadowAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_Apply(usd_Prim_t const* prim, usdLux_ShadowAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShadowAPI(pxr::UsdLuxShadowAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetShadowEnableAttr(usdLux_ShadowAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShadowEnableAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CreateShadowEnableAttr(usdLux_ShadowAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShadowEnableAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetShadowColorAttr(usdLux_ShadowAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShadowColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CreateShadowColorAttr(usdLux_ShadowAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShadowColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetShadowDistanceAttr(usdLux_ShadowAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShadowDistanceAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CreateShadowDistanceAttr(usdLux_ShadowAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShadowDistanceAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetShadowFalloffAttr(usdLux_ShadowAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShadowFalloffAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CreateShadowFalloffAttr(usdLux_ShadowAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShadowFalloffAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetShadowFalloffGammaAttr(usdLux_ShadowAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShadowFalloffGammaAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CreateShadowFalloffGammaAttr(usdLux_ShadowAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShadowFalloffGammaAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_ConnectableAPI(usdLux_ShadowAPI_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CreateOutput(usdLux_ShadowAPI_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetOutput(usdLux_ShadowAPI_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetOutputs(usdLux_ShadowAPI_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_CreateInput(usdLux_ShadowAPI_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetInput(usdLux_ShadowAPI_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetInputs(usdLux_ShadowAPI_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_IsConcrete(usdLux_ShadowAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_IsTyped(usdLux_ShadowAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_IsAPISchema(usdLux_ShadowAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_IsAppliedAPISchema(usdLux_ShadowAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_IsMultipleApplyAPISchema(usdLux_ShadowAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetSchemaKind(usdLux_ShadowAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetPrim(usdLux_ShadowAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetPath(usdLux_ShadowAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_GetSchemaClassPrimDefinition(usdLux_ShadowAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_op_bool(usdLux_ShadowAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_from_prim(usd_Prim_t const* prim, usdLux_ShadowAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShadowAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_ShadowAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShadowAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_from_conneactable(usdShade_ConnectableAPI_t const* connectable, usdLux_ShadowAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShadowAPI(*connectable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShadowAPI_dtor(usdLux_ShadowAPI_t* _this) {
    delete _this;
    return 0;
}

int usdLux_ShapingAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxShapingAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_ShapingAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShapingAPI(pxr::UsdLuxShapingAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdLuxShapingAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_Apply(usd_Prim_t const* prim, usdLux_ShapingAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShapingAPI(pxr::UsdLuxShapingAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetShapingFocusAttr(usdLux_ShapingAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShapingFocusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateShapingFocusAttr(usdLux_ShapingAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShapingFocusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetShapingFocusTintAttr(usdLux_ShapingAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShapingFocusTintAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateShapingFocusTintAttr(usdLux_ShapingAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShapingFocusTintAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetShapingConeAngleAttr(usdLux_ShapingAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShapingConeAngleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateShapingConeAngleAttr(usdLux_ShapingAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShapingConeAngleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetShapingConeSoftnessAttr(usdLux_ShapingAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShapingConeSoftnessAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateShapingConeSoftnessAttr(usdLux_ShapingAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShapingConeSoftnessAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetShapingIesFileAttr(usdLux_ShapingAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShapingIesFileAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateShapingIesFileAttr(usdLux_ShapingAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShapingIesFileAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetShapingIesAngleScaleAttr(usdLux_ShapingAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShapingIesAngleScaleAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateShapingIesAngleScaleAttr(usdLux_ShapingAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShapingIesAngleScaleAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetShapingIesNormalizeAttr(usdLux_ShapingAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetShapingIesNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateShapingIesNormalizeAttr(usdLux_ShapingAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateShapingIesNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_ConnectableAPI(usdLux_ShapingAPI_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateOutput(usdLux_ShapingAPI_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetOutput(usdLux_ShapingAPI_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetOutputs(usdLux_ShapingAPI_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_CreateInput(usdLux_ShapingAPI_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetInput(usdLux_ShapingAPI_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetInputs(usdLux_ShapingAPI_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_IsConcrete(usdLux_ShapingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_IsTyped(usdLux_ShapingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_IsAPISchema(usdLux_ShapingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_IsAppliedAPISchema(usdLux_ShapingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_IsMultipleApplyAPISchema(usdLux_ShapingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetSchemaKind(usdLux_ShapingAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetPrim(usdLux_ShapingAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetPath(usdLux_ShapingAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_GetSchemaClassPrimDefinition(usdLux_ShapingAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_op_bool(usdLux_ShapingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_from_prim(usd_Prim_t const* prim, usdLux_ShapingAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShapingAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_ShapingAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShapingAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_from_conneactable(usdShade_ConnectableAPI_t const* connectable, usdLux_ShapingAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxShapingAPI(*connectable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_ShapingAPI_dtor(usdLux_ShapingAPI_t* _this) {
    delete _this;
    return 0;
}

int usdLux_SphereLight_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxSphereLight::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_SphereLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxSphereLight(pxr::UsdLuxSphereLight::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_SphereLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxSphereLight(pxr::UsdLuxSphereLight::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetRadiusAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRadiusAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateRadiusAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRadiusAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetTreatAsPointAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetTreatAsPointAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateTreatAsPointAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateTreatAsPointAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_LightAPI(usdLux_SphereLight_t const* _this, usdLux_LightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxLightAPI(_this->LightAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetIntensityAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIntensityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateIntensityAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIntensityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetExposureAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExposureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateExposureAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExposureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetDiffuseAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDiffuseAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateDiffuseAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDiffuseAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetSpecularAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSpecularAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateSpecularAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSpecularAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetNormalizeAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetNormalizeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateNormalizeAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateNormalizeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetColorAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateColorAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetEnableColorTemperatureAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetEnableColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateEnableColorTemperatureAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateEnableColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetColorTemperatureAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetColorTemperatureAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateColorTemperatureAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateColorTemperatureAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetFiltersRel(usdLux_SphereLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateFiltersRel(usdLux_SphereLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateFiltersRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetExtentAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetExtentAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateExtentAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateExtentAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetXformOpOrderAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetXformOpOrderAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddXformOp(usdLux_SphereLight_t const* _this, unsigned int opType, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetXformOp(usdLux_SphereLight_t const* _this, unsigned int opType, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->GetXformOp(static_cast<pxr::UsdGeomXformOp::Type>(opType), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddTranslateOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTranslateOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddScaleOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddScaleOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateXOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateYOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateZOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateXYZOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXYZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateXZYOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateXZYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateYXZOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYXZOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateYZXOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateYZXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateZXYOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZXYOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddRotateZYXOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddRotateZYXOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddOrientOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddOrientOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_AddTransformOp(usdLux_SphereLight_t const* _this, unsigned int precision, tf_Token_t const* opSuffix, bool isInverseOp, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->AddTransformOp(static_cast<pxr::UsdGeomXformOp::Precision>(precision), *opSuffix, isInverseOp));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_SetResetXformStack(usdLux_SphereLight_t const* _this, bool resetXform, bool* _result) {
    try {
        *_result = _this->SetResetXformStack(resetXform);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_SetXformOpOrder(usdLux_SphereLight_t const* _this, usdGeom_XformOpVector_t const* orderedXformOps, bool resetXformStack, bool* _result) {
    try {
        *_result = _this->SetXformOpOrder(*orderedXformOps, resetXformStack);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetOrderedXformOps(usdLux_SphereLight_t const* _this, bool* resetsXformStack, usdGeom_XformOpVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomXformOp>(_this->GetOrderedXformOps(resetsXformStack));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ClearXformOpOrder(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearXformOpOrder();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_MakeMatrixXform(usdLux_SphereLight_t const* _this, usdGeom_XformOp_t** _result) {
    try {
        *_result = new pxr::UsdGeomXformOp(_this->MakeMatrixXform());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_TransformMightBeTimeVarying(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_TransformMightBeTimeVarying_using(usdLux_SphereLight_t const* _this, usdGeom_XformOpVector_t const* ops, bool* _result) {
    try {
        *_result = _this->TransformMightBeTimeVarying(*ops);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetTimeSamples(usdLux_SphereLight_t const* _this, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamples(times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetTimeSamplesInInterval(usdLux_SphereLight_t const* _this, gf_Interval_t const* interval, std_DoubleVector_t* times, bool* _result) {
    try {
        *_result = _this->GetTimeSamplesInInterval(*interval, times);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetLocalTransformation(usdLux_SphereLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetLocalTransformation_with_ops(usdLux_SphereLight_t const* _this, gf_Matrix4d_t* transform, bool* resetsXformStack, usdGeom_XformOpVector_t const* ops, usd_TimeCode_t const time, bool* _result) {
    try {
        *_result = _this->GetLocalTransformation(transform, resetsXformStack, *ops, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetVisibilityAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVisibilityAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateVisibilityAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVisibilityAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetPurposeAttr(usdLux_SphereLight_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreatePurposeAttr(usdLux_SphereLight_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePurposeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetProxyPrimRel(usdLux_SphereLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_CreateProxyPrimRel(usdLux_SphereLight_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProxyPrimRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_MakeVisible(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeVisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_MakeInvisible(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time) {
    try {
        _this->MakeInvisible(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputeVisibility(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputeVisibility(*time));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetPurposeVisibilityAttr(usdLux_SphereLight_t const* _this, tf_Token_t const* purpose, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPurposeVisibilityAttr(*purpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputePurposeInfo(usdLux_SphereLight_t const* _this, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputePurposeInfo_given_parent(usdLux_SphereLight_t const* _this, usdGeom_ImageablePurposeInfo_t const* parentPurposeInfo, usdGeom_ImageablePurposeInfo_t** _result) {
    try {
        *_result = new pxr::UsdGeomImageable::PurposeInfo(_this->ComputePurposeInfo(*parentPurposeInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputePurpose(usdLux_SphereLight_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->ComputePurpose());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputeProxyPrim(usdLux_SphereLight_t const* _this, usd_Prim_t* renderPrim, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->ComputeProxyPrim(renderPrim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_SetProxyPrim(usdLux_SphereLight_t const* _this, usd_Prim_t const* proxy, bool* _result) {
    try {
        *_result = _this->SetProxyPrim(*proxy);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputeWorldBound(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeWorldBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputeLocalBound(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeLocalBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputeUntransformedBound(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time, tf_Token_t const* purpose1, tf_Token_t const* purpose2, tf_Token_t const* purpose3, tf_Token_t const* purpose4, gf_BBox3d_t** _result) {
    try {
        *_result = new pxr::GfBBox3d(_this->ComputeUntransformedBound(*time, *purpose1, *purpose2, *purpose3, *purpose4));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputeLocalToWorldTransform(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeLocalToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_ComputeParentToWorldTransform(usdLux_SphereLight_t const* _this, usd_TimeCode_t const* time, gf_Matrix4d_t* _result) {
    try {
        *_result = _this->ComputeParentToWorldTransform(*time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_IsConcrete(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_IsTyped(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_IsAPISchema(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_IsAppliedAPISchema(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_IsMultipleApplyAPISchema(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetSchemaKind(usdLux_SphereLight_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetPrim(usdLux_SphereLight_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetPath(usdLux_SphereLight_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_GetSchemaClassPrimDefinition(usdLux_SphereLight_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_op_bool(usdLux_SphereLight_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_from_prim(usd_Prim_t const* prim, usdLux_SphereLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxSphereLight(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_SphereLight_t** _result) {
    try {
        *_result = new pxr::UsdLuxSphereLight(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_SphereLight_dtor(usdLux_SphereLight_t* _this) {
    delete _this;
    return 0;
}

int usdLux_VolumeLightAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdLuxVolumeLightAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdLux_VolumeLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxVolumeLightAPI(pxr::UsdLuxVolumeLightAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdLuxVolumeLightAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_Apply(usd_Prim_t const* prim, usdLux_VolumeLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxVolumeLightAPI(pxr::UsdLuxVolumeLightAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_IsConcrete(usdLux_VolumeLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_IsTyped(usdLux_VolumeLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_IsAPISchema(usdLux_VolumeLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_IsAppliedAPISchema(usdLux_VolumeLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_IsMultipleApplyAPISchema(usdLux_VolumeLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_GetSchemaKind(usdLux_VolumeLightAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_GetPrim(usdLux_VolumeLightAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_GetPath(usdLux_VolumeLightAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_GetSchemaClassPrimDefinition(usdLux_VolumeLightAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_op_bool(usdLux_VolumeLightAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_from_prim(usd_Prim_t const* prim, usdLux_VolumeLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxVolumeLightAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdLux_VolumeLightAPI_t** _result) {
    try {
        *_result = new pxr::UsdLuxVolumeLightAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdLux_VolumeLightAPI_dtor(usdLux_VolumeLightAPI_t* _this) {
    delete _this;
    return 0;
}

int usdRender_DenoisePass_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdRenderDenoisePass::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_DenoisePass_t** _result) {
    try {
        *_result = new pxr::UsdRenderDenoisePass(pxr::UsdRenderDenoisePass::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_DenoisePass_t** _result) {
    try {
        *_result = new pxr::UsdRenderDenoisePass(pxr::UsdRenderDenoisePass::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_IsConcrete(usdRender_DenoisePass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_IsTyped(usdRender_DenoisePass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_IsAPISchema(usdRender_DenoisePass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_IsAppliedAPISchema(usdRender_DenoisePass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_IsMultipleApplyAPISchema(usdRender_DenoisePass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_GetSchemaKind(usdRender_DenoisePass_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_GetPrim(usdRender_DenoisePass_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_GetPath(usdRender_DenoisePass_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_GetSchemaClassPrimDefinition(usdRender_DenoisePass_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_op_bool(usdRender_DenoisePass_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_from_prim(usd_Prim_t const* prim, usdRender_DenoisePass_t** _result) {
    try {
        *_result = new pxr::UsdRenderDenoisePass(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_from_schema(usd_SchemaBase_t const* schemaObj, usdRender_DenoisePass_t** _result) {
    try {
        *_result = new pxr::UsdRenderDenoisePass(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_DenoisePass_dtor(usdRender_DenoisePass_t* _this) {
    delete _this;
    return 0;
}

int usdRender_Pass_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdRenderPass::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Pass_t** _result) {
    try {
        *_result = new pxr::UsdRenderPass(pxr::UsdRenderPass::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Pass_t** _result) {
    try {
        *_result = new pxr::UsdRenderPass(pxr::UsdRenderPass::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetPassTypeAttr(usdRender_Pass_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPassTypeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_CreatePassTypeAttr(usdRender_Pass_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePassTypeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetCommandAttr(usdRender_Pass_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetCommandAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_CreateCommandAttr(usdRender_Pass_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateCommandAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetFileNameAttr(usdRender_Pass_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetFileNameAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_CreateFileNameAttr(usdRender_Pass_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateFileNameAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetDenoiseEnableAttr(usdRender_Pass_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDenoiseEnableAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_CreateDenoiseEnableAttr(usdRender_Pass_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDenoiseEnableAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetRenderSourceRel(usdRender_Pass_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetRenderSourceRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_CreateRenderSourceRel(usdRender_Pass_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateRenderSourceRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetInputPassesRel(usdRender_Pass_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetInputPassesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_CreateInputPassesRel(usdRender_Pass_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateInputPassesRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetDenoisePassRel(usdRender_Pass_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetDenoisePassRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_CreateDenoisePassRel(usdRender_Pass_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateDenoisePassRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetRenderVisibilityCollectionAPI(usdRender_Pass_t const* _this, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(_this->GetRenderVisibilityCollectionAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_IsConcrete(usdRender_Pass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_IsTyped(usdRender_Pass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_IsAPISchema(usdRender_Pass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_IsAppliedAPISchema(usdRender_Pass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_IsMultipleApplyAPISchema(usdRender_Pass_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetSchemaKind(usdRender_Pass_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetPrim(usdRender_Pass_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetPath(usdRender_Pass_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_GetSchemaClassPrimDefinition(usdRender_Pass_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_op_bool(usdRender_Pass_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_from_prim(usd_Prim_t const* prim, usdRender_Pass_t** _result) {
    try {
        *_result = new pxr::UsdRenderPass(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_from_schema(usd_SchemaBase_t const* schemaObj, usdRender_Pass_t** _result) {
    try {
        *_result = new pxr::UsdRenderPass(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Pass_dtor(usdRender_Pass_t* _this) {
    delete _this;
    return 0;
}

int usdRender_Product_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdRenderProduct::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Product_t** _result) {
    try {
        *_result = new pxr::UsdRenderProduct(pxr::UsdRenderProduct::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Product_t** _result) {
    try {
        *_result = new pxr::UsdRenderProduct(pxr::UsdRenderProduct::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetProductTypeAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetProductTypeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateProductTypeAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateProductTypeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetProductNameAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetProductNameAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateProductNameAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateProductNameAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetOrderedVarsRel(usdRender_Product_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetOrderedVarsRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateOrderedVarsRel(usdRender_Product_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateOrderedVarsRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetResolutionAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetResolutionAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateResolutionAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateResolutionAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetPixelAspectRatioAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPixelAspectRatioAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreatePixelAspectRatioAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePixelAspectRatioAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetAspectRatioConformPolicyAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAspectRatioConformPolicyAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateAspectRatioConformPolicyAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAspectRatioConformPolicyAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetDataWindowNDCAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDataWindowNDCAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateDataWindowNDCAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDataWindowNDCAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetInstantaneousShutterAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetInstantaneousShutterAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateInstantaneousShutterAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateInstantaneousShutterAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetDisableMotionBlurAttr(usdRender_Product_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisableMotionBlurAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateDisableMotionBlurAttr(usdRender_Product_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisableMotionBlurAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetCameraRel(usdRender_Product_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetCameraRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_CreateCameraRel(usdRender_Product_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateCameraRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_IsConcrete(usdRender_Product_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_IsTyped(usdRender_Product_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_IsAPISchema(usdRender_Product_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_IsAppliedAPISchema(usdRender_Product_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_IsMultipleApplyAPISchema(usdRender_Product_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetSchemaKind(usdRender_Product_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetPrim(usdRender_Product_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetPath(usdRender_Product_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_GetSchemaClassPrimDefinition(usdRender_Product_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_op_bool(usdRender_Product_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_from_prim(usd_Prim_t const* prim, usdRender_Product_t** _result) {
    try {
        *_result = new pxr::UsdRenderProduct(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_from_schema(usd_SchemaBase_t const* schemaObj, usdRender_Product_t** _result) {
    try {
        *_result = new pxr::UsdRenderProduct(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Product_dtor(usdRender_Product_t* _this) {
    delete _this;
    return 0;
}

int usdRender_Settings_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdRenderSettings::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Settings_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettings(pxr::UsdRenderSettings::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Settings_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettings(pxr::UsdRenderSettings::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetIncludedPurposesAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIncludedPurposesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateIncludedPurposesAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIncludedPurposesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetMaterialBindingPurposesAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetMaterialBindingPurposesAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateMaterialBindingPurposesAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateMaterialBindingPurposesAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetRenderingColorSpaceAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetRenderingColorSpaceAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateRenderingColorSpaceAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateRenderingColorSpaceAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetProductsRel(usdRender_Settings_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetProductsRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateProductsRel(usdRender_Settings_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateProductsRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetStageRenderSettings(usd_StageWeakPtr_t const* stage, usdRender_Settings_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettings(pxr::UsdRenderSettings::GetStageRenderSettings(*stage));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_op_assign(usdRender_Settings_t* _this, usdRender_Settings_t const* param00, usdRender_Settings_t** _result) {
    try {
        *_result = &_this->operator=(*param00);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetResolutionAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetResolutionAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateResolutionAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateResolutionAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetPixelAspectRatioAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPixelAspectRatioAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreatePixelAspectRatioAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePixelAspectRatioAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetAspectRatioConformPolicyAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAspectRatioConformPolicyAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateAspectRatioConformPolicyAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAspectRatioConformPolicyAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetDataWindowNDCAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDataWindowNDCAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateDataWindowNDCAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDataWindowNDCAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetInstantaneousShutterAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetInstantaneousShutterAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateInstantaneousShutterAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateInstantaneousShutterAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetDisableMotionBlurAttr(usdRender_Settings_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisableMotionBlurAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateDisableMotionBlurAttr(usdRender_Settings_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisableMotionBlurAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetCameraRel(usdRender_Settings_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetCameraRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_CreateCameraRel(usdRender_Settings_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateCameraRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_IsConcrete(usdRender_Settings_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_IsTyped(usdRender_Settings_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_IsAPISchema(usdRender_Settings_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_IsAppliedAPISchema(usdRender_Settings_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_IsMultipleApplyAPISchema(usdRender_Settings_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetSchemaKind(usdRender_Settings_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetPrim(usdRender_Settings_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetPath(usdRender_Settings_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_GetSchemaClassPrimDefinition(usdRender_Settings_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_op_bool(usdRender_Settings_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_from_prim(usd_Prim_t const* prim, usdRender_Settings_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettings(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_from_schema(usd_SchemaBase_t const* schemaObj, usdRender_Settings_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettings(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Settings_dtor(usdRender_Settings_t* _this) {
    delete _this;
    return 0;
}

int usdRender_SettingsBase_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdRenderSettingsBase::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_SettingsBase_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettingsBase(pxr::UsdRenderSettingsBase::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetResolutionAttr(usdRender_SettingsBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetResolutionAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_CreateResolutionAttr(usdRender_SettingsBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateResolutionAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetPixelAspectRatioAttr(usdRender_SettingsBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetPixelAspectRatioAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_CreatePixelAspectRatioAttr(usdRender_SettingsBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreatePixelAspectRatioAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetAspectRatioConformPolicyAttr(usdRender_SettingsBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAspectRatioConformPolicyAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_CreateAspectRatioConformPolicyAttr(usdRender_SettingsBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateAspectRatioConformPolicyAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetDataWindowNDCAttr(usdRender_SettingsBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDataWindowNDCAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_CreateDataWindowNDCAttr(usdRender_SettingsBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDataWindowNDCAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetInstantaneousShutterAttr(usdRender_SettingsBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetInstantaneousShutterAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_CreateInstantaneousShutterAttr(usdRender_SettingsBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateInstantaneousShutterAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetDisableMotionBlurAttr(usdRender_SettingsBase_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisableMotionBlurAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_CreateDisableMotionBlurAttr(usdRender_SettingsBase_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisableMotionBlurAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetCameraRel(usdRender_SettingsBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetCameraRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_CreateCameraRel(usdRender_SettingsBase_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateCameraRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_IsConcrete(usdRender_SettingsBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_IsTyped(usdRender_SettingsBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_IsAPISchema(usdRender_SettingsBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_IsAppliedAPISchema(usdRender_SettingsBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_IsMultipleApplyAPISchema(usdRender_SettingsBase_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetSchemaKind(usdRender_SettingsBase_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetPrim(usdRender_SettingsBase_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetPath(usdRender_SettingsBase_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_GetSchemaClassPrimDefinition(usdRender_SettingsBase_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_op_bool(usdRender_SettingsBase_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_from_prim(usd_Prim_t const* prim, usdRender_SettingsBase_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettingsBase(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_from_schema(usd_SchemaBase_t const* schemaObj, usdRender_SettingsBase_t** _result) {
    try {
        *_result = new pxr::UsdRenderSettingsBase(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_SettingsBase_dtor(usdRender_SettingsBase_t* _this) {
    delete _this;
    return 0;
}

int usdRender_Spec_dtor(usdRender_Spec_t* _this) {
    delete _this;
    return 0;
}

int usdRender_SpecProduct_dtor(usdRender_SpecProduct_t* _this) {
    delete _this;
    return 0;
}

int usdRender_SpecRenderVar_dtor(usdRender_SpecRenderVar_t* _this) {
    delete _this;
    return 0;
}

int usdRender_Var_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdRenderVar::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Var_t** _result) {
    try {
        *_result = new pxr::UsdRenderVar(pxr::UsdRenderVar::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdRender_Var_t** _result) {
    try {
        *_result = new pxr::UsdRenderVar(pxr::UsdRenderVar::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_GetDataTypeAttr(usdRender_Var_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDataTypeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_CreateDataTypeAttr(usdRender_Var_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDataTypeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_GetSourceNameAttr(usdRender_Var_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSourceNameAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_CreateSourceNameAttr(usdRender_Var_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSourceNameAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_GetSourceTypeAttr(usdRender_Var_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSourceTypeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_CreateSourceTypeAttr(usdRender_Var_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSourceTypeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_IsConcrete(usdRender_Var_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_IsTyped(usdRender_Var_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_IsAPISchema(usdRender_Var_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_IsAppliedAPISchema(usdRender_Var_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_IsMultipleApplyAPISchema(usdRender_Var_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_GetSchemaKind(usdRender_Var_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_GetPrim(usdRender_Var_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_GetPath(usdRender_Var_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_GetSchemaClassPrimDefinition(usdRender_Var_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_op_bool(usdRender_Var_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_from_prim(usd_Prim_t const* prim, usdRender_Var_t** _result) {
    try {
        *_result = new pxr::UsdRenderVar(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_from_schema(usd_SchemaBase_t const* schemaObj, usdRender_Var_t** _result) {
    try {
        *_result = new pxr::UsdRenderVar(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdRender_Var_dtor(usdRender_Var_t* _this) {
    delete _this;
    return 0;
}

int usdShade_AttributeVector_dtor(usdShade_AttributeVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_ConnectableAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdShadeConnectableAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(pxr::UsdShadeConnectableAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsContainer(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsContainer();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_RequiresEncapsulation(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->RequiresEncapsulation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CanConnect_00(usdShade_Input_t const* input, usd_Attribute_t const* source, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::CanConnect(*input, *source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CanConnect_01(usdShade_Input_t const* input, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::CanConnect(*input, *sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CanConnect_02(usdShade_Input_t const* input, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::CanConnect(*input, *sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CanConnect_03(usdShade_Output_t const* output, usd_Attribute_t const* source, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::CanConnect(*output, *source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CanConnect_04(usdShade_Output_t const* output, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::CanConnect(*output, *sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CanConnect_05(usdShade_Output_t const* output, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::CanConnect(*output, *sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_00(usd_Attribute_t const* shadingAttr, usdShade_ConnectionSourceInfo_t const* source, int mod, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*shadingAttr, *source, static_cast<pxr::UsdShadeConnectionModification>(mod));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_01(usdShade_Input_t const* input, usdShade_ConnectionSourceInfo_t const* source, int mod, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*input, *source, static_cast<pxr::UsdShadeConnectionModification>(mod));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_02(usdShade_Output_t const* output, usdShade_ConnectionSourceInfo_t const* source, int mod, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*output, *source, static_cast<pxr::UsdShadeConnectionModification>(mod));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_03(usd_Attribute_t const* shadingAttr, usdShade_ConnectableAPI_t const* source, tf_Token_t const* sourceName, int sourceType, sdf_ValueTypeName_t* typeName, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*shadingAttr, *source, *sourceName, static_cast<pxr::UsdShadeAttributeType>(sourceType), *typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_04(usdShade_Input_t const* input, usdShade_ConnectableAPI_t const* source, tf_Token_t const* sourceName, int sourceType, sdf_ValueTypeName_t* typeName, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*input, *source, *sourceName, static_cast<pxr::UsdShadeAttributeType>(sourceType), *typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_05(usdShade_Output_t const* output, usdShade_ConnectableAPI_t const* source, tf_Token_t const* sourceName, int sourceType, sdf_ValueTypeName_t* typeName, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*output, *source, *sourceName, static_cast<pxr::UsdShadeAttributeType>(sourceType), *typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_06(usd_Attribute_t const* shadingAttr, sdf_Path_t const* sourcePath, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*shadingAttr, *sourcePath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_07(usdShade_Input_t const* input, sdf_Path_t const* sourcePath, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*input, *sourcePath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_08(usdShade_Output_t const* output, sdf_Path_t const* sourcePath, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*output, *sourcePath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_09(usd_Attribute_t const* shadingAttr, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*shadingAttr, *sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_10(usdShade_Input_t const* input, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*input, *sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_11(usdShade_Output_t const* output, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*output, *sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_12(usd_Attribute_t const* shadingAttr, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*shadingAttr, *sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_13(usdShade_Input_t const* input, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*input, *sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ConnectToSource_14(usdShade_Output_t const* output, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ConnectToSource(*output, *sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_SetConnectedSources(usd_Attribute_t const* shadingAttr, usdShade_ConnectionSourceInfoVector_t const* sourceInfos, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::SetConnectedSources(*shadingAttr, *sourceInfos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetConnectedSource_00(usd_Attribute_t const* shadingAttr, usdShade_ConnectableAPI_t* source, tf_Token_t* sourceName, int* sourceType, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::GetConnectedSource(*shadingAttr, source, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetConnectedSource_01(usdShade_Input_t const* input, usdShade_ConnectableAPI_t* source, tf_Token_t* sourceName, int* sourceType, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::GetConnectedSource(*input, source, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetConnectedSource_02(usdShade_Output_t const* output, usdShade_ConnectableAPI_t* source, tf_Token_t* sourceName, int* sourceType, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::GetConnectedSource(*output, source, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetConnectedSources_00(usd_Attribute_t const* shadingAttr, sdf_PathVector_t* invalidSourcePaths, usdShade_InputSourceInfoVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput::SourceInfoVector(pxr::UsdShadeConnectableAPI::GetConnectedSources(*shadingAttr, invalidSourcePaths));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetConnectedSources_01(usdShade_Input_t const* input, sdf_PathVector_t* invalidSourcePaths, usdShade_InputSourceInfoVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput::SourceInfoVector(pxr::UsdShadeConnectableAPI::GetConnectedSources(*input, invalidSourcePaths));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetConnectedSources_02(usdShade_Output_t const* output, sdf_PathVector_t* invalidSourcePaths, usdShade_InputSourceInfoVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput::SourceInfoVector(pxr::UsdShadeConnectableAPI::GetConnectedSources(*output, invalidSourcePaths));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetRawConnectedSourcePaths_00(usd_Attribute_t const* shadingAttr, sdf_PathVector_t* sourcePaths, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::GetRawConnectedSourcePaths(*shadingAttr, sourcePaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetRawConnectedSourcePaths_01(usdShade_Input_t const* input, sdf_PathVector_t* sourcePaths, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::GetRawConnectedSourcePaths(*input, sourcePaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetRawConnectedSourcePaths_02(usdShade_Output_t const* output, sdf_PathVector_t* sourcePaths, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::GetRawConnectedSourcePaths(*output, sourcePaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_HasConnectedSource_00(usd_Attribute_t const* shadingAttr, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::HasConnectedSource(*shadingAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_HasConnectedSource_01(usdShade_Input_t const* input, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::HasConnectedSource(*input);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_HasConnectedSource_02(usdShade_Output_t const* output, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::HasConnectedSource(*output);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsSourceConnectionFromBaseMaterial_00(usd_Attribute_t const* shadingAttr, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial(*shadingAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsSourceConnectionFromBaseMaterial_01(usdShade_Input_t const* input, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial(*input);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsSourceConnectionFromBaseMaterial_02(usdShade_Output_t const* output, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::IsSourceConnectionFromBaseMaterial(*output);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_DisconnectSource_00(usd_Attribute_t const* shadingAttr, usd_Attribute_t const* sourceAttr, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::DisconnectSource(*shadingAttr, *sourceAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_DisconnectSource_01(usdShade_Input_t const* input, usd_Attribute_t const* sourceAttr, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::DisconnectSource(*input, *sourceAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_DisconnectSource_02(usdShade_Output_t const* output, usd_Attribute_t const* sourceAttr, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::DisconnectSource(*output, *sourceAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ClearSources_00(usd_Attribute_t const* shadingAttr, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ClearSources(*shadingAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ClearSources_01(usdShade_Input_t const* input, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ClearSources(*input);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ClearSources_02(usdShade_Output_t const* output, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ClearSources(*output);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ClearSource_00(usd_Attribute_t const* shadingAttr, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ClearSource(*shadingAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ClearSource_01(usdShade_Input_t const* input, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ClearSource(*input);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_ClearSource_02(usdShade_Output_t const* output, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::ClearSource(*output);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_HasConnectableAPI_00(tf_Type_t const* schemaType, bool* _result) {
    try {
        *_result = pxr::UsdShadeConnectableAPI::HasConnectableAPI(*schemaType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CreateOutput(usdShade_ConnectableAPI_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetOutput(usdShade_ConnectableAPI_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetOutputs(usdShade_ConnectableAPI_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_CreateInput(usdShade_ConnectableAPI_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetInput(usdShade_ConnectableAPI_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetInputs(usdShade_ConnectableAPI_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsConcrete(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsTyped(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsAPISchema(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsAppliedAPISchema(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_IsMultipleApplyAPISchema(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetSchemaKind(usdShade_ConnectableAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetPrim(usdShade_ConnectableAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetPath(usdShade_ConnectableAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_GetSchemaClassPrimDefinition(usdShade_ConnectableAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_op_bool(usdShade_ConnectableAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_from_prim(usd_Prim_t const* prim, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPI_dtor(usdShade_ConnectableAPI_t* _this) {
    delete _this;
    return 0;
}

int usdShade_ConnectionSourceInfo_IsValid(usdShade_ConnectionSourceInfo_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_op_bool(usdShade_ConnectionSourceInfo_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_op_eq(usdShade_ConnectionSourceInfo_t const* _this, usdShade_ConnectionSourceInfo_t const* other, bool* _result) {
    try {
        *_result = _this->operator==(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_op_neq(usdShade_ConnectionSourceInfo_t const* _this, usdShade_ConnectionSourceInfo_t const* other, bool* _result) {
    try {
        *_result = _this->operator!=(*other);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_default(usdShade_ConnectionSourceInfo_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectionSourceInfo();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_from_schema(usdShade_ConnectableAPI_t const* source_, tf_Token_t const* sourceName_, int sourceType_, sdf_ValueTypeName_t* typeName_, usdShade_ConnectionSourceInfo_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectionSourceInfo(*source_, *sourceName_, static_cast<pxr::UsdShadeAttributeType>(sourceType_), *typeName_);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_from_connectable(usdShade_Input_t const* input, usdShade_ConnectionSourceInfo_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectionSourceInfo(*input);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_ctor_03(usdShade_Output_t const* output, usdShade_ConnectionSourceInfo_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectionSourceInfo(*output);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_ctor_04(usd_StageWeakPtr_t const* stage, sdf_Path_t const* sourcePath, usdShade_ConnectionSourceInfo_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectionSourceInfo(*stage, *sourcePath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectionSourceInfo_dtor(usdShade_ConnectionSourceInfo_t* _this) {
    delete _this;
    return 0;
}

int usdShade_ConnectionSourceInfoVector_data(usdShade_ConnectionSourceInfoVector_t* _this, usdShade_ConnectionSourceInfo_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_data_const(usdShade_ConnectionSourceInfoVector_t const* _this, usdShade_ConnectionSourceInfo_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_empty(usdShade_ConnectionSourceInfoVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_size(usdShade_ConnectionSourceInfoVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_max_size(usdShade_ConnectionSourceInfoVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_capacity(usdShade_ConnectionSourceInfoVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_clear(usdShade_ConnectionSourceInfoVector_t* _this) {
    _this->clear();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_pop_back(usdShade_ConnectionSourceInfoVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_op_index(usdShade_ConnectionSourceInfoVector_t const* _this, size_t __n, usdShade_ConnectionSourceInfo_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdShade_ConnectionSourceInfoVector_default(usdShade_ConnectionSourceInfoVector_t** _result) {
    *_result = new std::vector<pxr::UsdShadeConnectionSourceInfo>();
    return 0;
}

int usdShade_ConnectionSourceInfoVector_dtor(usdShade_ConnectionSourceInfoVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_ConnectableAPIBehavior_CanConnectInputToSource(usdShade_ConnectableAPIBehavior_t const* _this, usdShade_Input_t const* param00, usd_Attribute_t const* param01, std_String_t* reason, bool* _result) {
    try {
        *_result = _this->CanConnectInputToSource(*param00, *param01, reason);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPIBehavior_CanConnectOutputToSource(usdShade_ConnectableAPIBehavior_t const* _this, usdShade_Output_t const* param00, usd_Attribute_t const* param01, std_String_t* reason, bool* _result) {
    try {
        *_result = _this->CanConnectOutputToSource(*param00, *param01, reason);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPIBehavior_IsContainer(usdShade_ConnectableAPIBehavior_t const* _this, bool* _result) {
    try {
        *_result = _this->IsContainer();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPIBehavior_RequiresEncapsulation(usdShade_ConnectableAPIBehavior_t const* _this, bool* _result) {
    try {
        *_result = _this->RequiresEncapsulation();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPIBehavior_default(usdShade_ConnectableAPIBehavior_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPIBehavior();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPIBehavior_from_schema(bool const isContainer, bool const requiresEncapsulation, usdShade_ConnectableAPIBehavior_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPIBehavior(isContainer, requiresEncapsulation);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ConnectableAPIBehavior_dtor(usdShade_ConnectableAPIBehavior_t* _this) {
    delete _this;
    return 0;
}

int usdShade_CoordSysAPI_GetSchemaAttributeNames_00(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdShadeCoordSysAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetSchemaAttributeNames_01(bool includeInherited, tf_Token_t const* instanceName, tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(pxr::UsdShadeCoordSysAPI::GetSchemaAttributeNames(includeInherited, *instanceName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetName(usdShade_CoordSysAPI_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_Get_00(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_CoordSysAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeCoordSysAPI(pxr::UsdShadeCoordSysAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_Get_01(usd_Prim_t const* prim, tf_Token_t const* name, usdShade_CoordSysAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeCoordSysAPI(pxr::UsdShadeCoordSysAPI::Get(*prim, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetAll(usd_Prim_t const* prim, usdShade_CoordSysAPIVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeCoordSysAPI>(pxr::UsdShadeCoordSysAPI::GetAll(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_IsSchemaPropertyBaseName(tf_Token_t const* baseName, bool* _result) {
    try {
        *_result = pxr::UsdShadeCoordSysAPI::IsSchemaPropertyBaseName(*baseName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_IsCoordSysAPIPath(sdf_Path_t const* path, tf_Token_t* name, bool* _result) {
    try {
        *_result = pxr::UsdShadeCoordSysAPI::IsCoordSysAPIPath(*path, name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_CanApply(usd_Prim_t const* prim, tf_Token_t const* name, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdShadeCoordSysAPI::CanApply(*prim, *name, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_Apply(usd_Prim_t const* prim, tf_Token_t const* name, usdShade_CoordSysAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeCoordSysAPI(pxr::UsdShadeCoordSysAPI::Apply(*prim, *name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetBindingRel(usdShade_CoordSysAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetBindingRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_CreateBindingRel(usdShade_CoordSysAPI_t const* _this, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->CreateBindingRel());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_HasLocalBindings(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->HasLocalBindings();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_HasLocalBindingsForPrim(usd_Prim_t const* prim, bool* _result) {
    try {
        *_result = pxr::UsdShadeCoordSysAPI::HasLocalBindingsForPrim(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetLocalBindings(usdShade_CoordSysAPI_t const* _this, usdShade_CoordSysAPIBindingVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeCoordSysAPI::Binding>(_this->GetLocalBindings());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetLocalBindingsForPrim(usd_Prim_t const* prim, usdShade_CoordSysAPIBindingVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeCoordSysAPI::Binding>(pxr::UsdShadeCoordSysAPI::GetLocalBindingsForPrim(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetLocalBinding(usdShade_CoordSysAPI_t const* _this, usdShade_CoordSysAPIBinding_t** _result) {
    try {
        *_result = new pxr::UsdShadeCoordSysAPI::Binding(_this->GetLocalBinding());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_FindBindingsWithInheritance(usdShade_CoordSysAPI_t const* _this, usdShade_CoordSysAPIBindingVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeCoordSysAPI::Binding>(_this->FindBindingsWithInheritance());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_FindBindingsWithInheritanceForPrim(usd_Prim_t const* prim, usdShade_CoordSysAPIBindingVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeCoordSysAPI::Binding>(pxr::UsdShadeCoordSysAPI::FindBindingsWithInheritanceForPrim(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_FindBindingWithInheritance(usdShade_CoordSysAPI_t const* _this, usdShade_CoordSysAPIBinding_t** _result) {
    try {
        *_result = new pxr::UsdShadeCoordSysAPI::Binding(_this->FindBindingWithInheritance());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_Bind_00(usdShade_CoordSysAPI_t const* _this, tf_Token_t const* name, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->Bind(*name, *path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_Bind_01(usdShade_CoordSysAPI_t const* _this, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->Bind(*path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_ApplyAndBind(usdShade_CoordSysAPI_t const* _this, tf_Token_t const* name, sdf_Path_t const* path, bool* _result) {
    try {
        *_result = _this->ApplyAndBind(*name, *path);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_ClearBinding_00(usdShade_CoordSysAPI_t const* _this, tf_Token_t const* name, bool removeSpec, bool* _result) {
    try {
        *_result = _this->ClearBinding(*name, removeSpec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_ClearBinding_01(usdShade_CoordSysAPI_t const* _this, bool removeSpec, bool* _result) {
    try {
        *_result = _this->ClearBinding(removeSpec);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_BlockBinding_00(usdShade_CoordSysAPI_t const* _this, tf_Token_t const* name, bool* _result) {
    try {
        *_result = _this->BlockBinding(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_BlockBinding_01(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->BlockBinding();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetCoordSysRelationshipName(std_String_t const* coordSysName, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdShadeCoordSysAPI::GetCoordSysRelationshipName(*coordSysName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_CanContainPropertyName(tf_Token_t const* name, bool* _result) {
    try {
        *_result = pxr::UsdShadeCoordSysAPI::CanContainPropertyName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetBindingBaseName_00(tf_Token_t const* name, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdShadeCoordSysAPI::GetBindingBaseName(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetBindingBaseName_01(usdShade_CoordSysAPI_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBindingBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_IsConcrete(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_IsTyped(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_IsAPISchema(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_IsAppliedAPISchema(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_IsMultipleApplyAPISchema(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetSchemaKind(usdShade_CoordSysAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetPrim(usdShade_CoordSysAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetPath(usdShade_CoordSysAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_GetSchemaClassPrimDefinition(usdShade_CoordSysAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_op_bool(usdShade_CoordSysAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_from_prim(usd_Prim_t const* prim, tf_Token_t const* name, usdShade_CoordSysAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeCoordSysAPI(*prim, *name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_from_schema(usd_SchemaBase_t const* schemaObj, tf_Token_t const* name, usdShade_CoordSysAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeCoordSysAPI(*schemaObj, *name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_CoordSysAPI_dtor(usdShade_CoordSysAPI_t* _this) {
    delete _this;
    return 0;
}

int usdShade_CoordSysAPIVector_data(usdShade_CoordSysAPIVector_t* _this, usdShade_CoordSysAPI_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_CoordSysAPIVector_data_const(usdShade_CoordSysAPIVector_t const* _this, usdShade_CoordSysAPI_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_CoordSysAPIVector_empty(usdShade_CoordSysAPIVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdShade_CoordSysAPIVector_size(usdShade_CoordSysAPIVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdShade_CoordSysAPIVector_max_size(usdShade_CoordSysAPIVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdShade_CoordSysAPIVector_capacity(usdShade_CoordSysAPIVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdShade_CoordSysAPIVector_clear(usdShade_CoordSysAPIVector_t* _this) {
    _this->clear();
    return 0;
}

int usdShade_CoordSysAPIVector_pop_back(usdShade_CoordSysAPIVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdShade_CoordSysAPIVector_op_index(usdShade_CoordSysAPIVector_t const* _this, size_t __n, usdShade_CoordSysAPI_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdShade_CoordSysAPIVector_default(usdShade_CoordSysAPIVector_t** _result) {
    *_result = new std::vector<pxr::UsdShadeCoordSysAPI>();
    return 0;
}

int usdShade_CoordSysAPIVector_dtor(usdShade_CoordSysAPIVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_CoordSysAPIBinding_default(usdShade_CoordSysAPIBinding_t** _result) {
    *_result = new pxr::UsdShadeCoordSysAPI::Binding();
    return 0;
}

int usdShade_CoordSysAPIBinding_dtor(usdShade_CoordSysAPIBinding_t* _this) {
    delete _this;
    return 0;
}

int usdShade_CoordSysAPIBindingVector_data(usdShade_CoordSysAPIBindingVector_t* _this, usdShade_CoordSysAPIBinding_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_data_const(usdShade_CoordSysAPIBindingVector_t const* _this, usdShade_CoordSysAPIBinding_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_empty(usdShade_CoordSysAPIBindingVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_size(usdShade_CoordSysAPIBindingVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_max_size(usdShade_CoordSysAPIBindingVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_capacity(usdShade_CoordSysAPIBindingVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_clear(usdShade_CoordSysAPIBindingVector_t* _this) {
    _this->clear();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_pop_back(usdShade_CoordSysAPIBindingVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_op_index(usdShade_CoordSysAPIBindingVector_t const* _this, size_t __n, usdShade_CoordSysAPIBinding_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdShade_CoordSysAPIBindingVector_default(usdShade_CoordSysAPIBindingVector_t** _result) {
    *_result = new std::vector<pxr::UsdShadeCoordSysAPI::Binding>();
    return 0;
}

int usdShade_CoordSysAPIBindingVector_dtor(usdShade_CoordSysAPIBindingVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_Input_GetFullName(usdShade_Input_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetFullName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetBaseName(usdShade_Input_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetTypeName(usdShade_Input_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetPrim(usdShade_Input_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_Get_01(usdShade_Input_t const* _this, vt_Value_t* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Get(value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_Set_00(usdShade_Input_t const* _this, vt_Value_t const* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Set(*value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_SetRenderType(usdShade_Input_t const* _this, tf_Token_t const* renderType, bool* _result) {
    try {
        *_result = _this->SetRenderType(*renderType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetRenderType(usdShade_Input_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetRenderType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_HasRenderType(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->HasRenderType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetSdrMetadata(usdShade_Input_t const* _this, ndr_TokenMap_t** _result) {
    try {
        *_result = new pxr::NdrTokenMap(_this->GetSdrMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetSdrMetadataByKey(usdShade_Input_t const* _this, tf_Token_t const* key, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSdrMetadataByKey(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_SetSdrMetadata(usdShade_Input_t const* _this, ndr_TokenMap_t const* sdrMetadata) {
    try {
        _this->SetSdrMetadata(*sdrMetadata);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_SetSdrMetadataByKey(usdShade_Input_t const* _this, tf_Token_t const* key, std_String_t const* value) {
    try {
        _this->SetSdrMetadataByKey(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_HasSdrMetadata(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSdrMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_HasSdrMetadataByKey(usdShade_Input_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasSdrMetadataByKey(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ClearSdrMetadata(usdShade_Input_t const* _this) {
    try {
        _this->ClearSdrMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ClearSdrMetadataByKey(usdShade_Input_t const* _this, tf_Token_t const* key) {
    try {
        _this->ClearSdrMetadataByKey(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_IsInput(usd_Attribute_t const* attr, bool* _result) {
    try {
        *_result = pxr::UsdShadeInput::IsInput(*attr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_IsInterfaceInputName(std_String_t const* name, bool* _result) {
    try {
        *_result = pxr::UsdShadeInput::IsInterfaceInputName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetAttr(usdShade_Input_t const* _this, usd_Attribute_t const** _result) {
    try {
        *_result = &_this->GetAttr();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_IsDefined(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_SetDocumentation(usdShade_Input_t const* _this, std_String_t const* docs, bool* _result) {
    try {
        *_result = _this->SetDocumentation(*docs);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetDocumentation(usdShade_Input_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDocumentation());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_SetDisplayGroup(usdShade_Input_t const* _this, std_String_t const* displayGroup, bool* _result) {
    try {
        *_result = _this->SetDisplayGroup(*displayGroup);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetDisplayGroup(usdShade_Input_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetDisplayGroup());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_op_bool(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_CanConnect_00(usdShade_Input_t const* _this, usd_Attribute_t const* source, bool* _result) {
    try {
        *_result = _this->CanConnect(*source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_CanConnect_01(usdShade_Input_t const* _this, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = _this->CanConnect(*sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_CanConnect_02(usdShade_Input_t const* _this, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = _this->CanConnect(*sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ConnectToSource_00(usdShade_Input_t const* _this, usdShade_ConnectionSourceInfo_t const* source, int mod, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*source, static_cast<pxr::UsdShadeConnectionModification>(mod));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ConnectToSource_01(usdShade_Input_t const* _this, usdShade_ConnectableAPI_t const* source, tf_Token_t const* sourceName, int sourceType, sdf_ValueTypeName_t* typeName, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*source, *sourceName, static_cast<pxr::UsdShadeAttributeType>(sourceType), *typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ConnectToSource_02(usdShade_Input_t const* _this, sdf_Path_t const* sourcePath, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*sourcePath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ConnectToSource_03(usdShade_Input_t const* _this, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ConnectToSource_04(usdShade_Input_t const* _this, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_SetConnectedSources(usdShade_Input_t const* _this, usdShade_ConnectionSourceInfoVector_t const* sourceInfos, bool* _result) {
    try {
        *_result = _this->SetConnectedSources(*sourceInfos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetConnectedSources(usdShade_Input_t const* _this, sdf_PathVector_t* invalidSourcePaths, usdShade_InputSourceInfoVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput::SourceInfoVector(_this->GetConnectedSources(invalidSourcePaths));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetConnectedSource(usdShade_Input_t const* _this, usdShade_ConnectableAPI_t* source, tf_Token_t* sourceName, int* sourceType, bool* _result) {
    try {
        *_result = _this->GetConnectedSource(source, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetRawConnectedSourcePaths(usdShade_Input_t const* _this, sdf_PathVector_t* sourcePaths, bool* _result) {
    try {
        *_result = _this->GetRawConnectedSourcePaths(sourcePaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_HasConnectedSource(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->HasConnectedSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_IsSourceConnectionFromBaseMaterial(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->IsSourceConnectionFromBaseMaterial();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_DisconnectSource(usdShade_Input_t const* _this, usd_Attribute_t const* sourceAttr, bool* _result) {
    try {
        *_result = _this->DisconnectSource(*sourceAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ClearSources(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearSources();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ClearSource(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_SetConnectability(usdShade_Input_t const* _this, tf_Token_t const* connectability, bool* _result) {
    try {
        *_result = _this->SetConnectability(*connectability);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetConnectability(usdShade_Input_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetConnectability());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_ClearConnectability(usdShade_Input_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearConnectability();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetValueProducingAttributes(usdShade_Input_t const* _this, bool shaderOutputsOnly, usdShade_AttributeVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeAttributeVector(_this->GetValueProducingAttributes(shaderOutputsOnly));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_GetValueProducingAttribute(usdShade_Input_t const* _this, int* attrType, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetValueProducingAttribute(reinterpret_cast<pxr::UsdShadeAttributeType*>(attrType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_default(usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_from_schema(usd_Attribute_t const* attr, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(*attr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Input_dtor(usdShade_Input_t* _this) {
    delete _this;
    return 0;
}

int usdShade_InputVector_data(usdShade_InputVector_t* _this, usdShade_Input_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_InputVector_data_const(usdShade_InputVector_t const* _this, usdShade_Input_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_InputVector_empty(usdShade_InputVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdShade_InputVector_size(usdShade_InputVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdShade_InputVector_max_size(usdShade_InputVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdShade_InputVector_capacity(usdShade_InputVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdShade_InputVector_clear(usdShade_InputVector_t* _this) {
    _this->clear();
    return 0;
}

int usdShade_InputVector_pop_back(usdShade_InputVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdShade_InputVector_op_index(usdShade_InputVector_t const* _this, size_t __n, usdShade_Input_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdShade_InputVector_default(usdShade_InputVector_t** _result) {
    *_result = new std::vector<pxr::UsdShadeInput>();
    return 0;
}

int usdShade_InputVector_dtor(usdShade_InputVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_Material_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdShadeMaterial::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(pxr::UsdShadeMaterial::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(pxr::UsdShadeMaterial::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetSurfaceAttr(usdShade_Material_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetSurfaceAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateSurfaceAttr(usdShade_Material_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateSurfaceAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetDisplacementAttr(usdShade_Material_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetDisplacementAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateDisplacementAttr(usdShade_Material_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateDisplacementAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetVolumeAttr(usdShade_Material_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetVolumeAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateVolumeAttr(usdShade_Material_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateVolumeAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateSurfaceOutput(usdShade_Material_t const* _this, tf_Token_t const* renderContext, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateSurfaceOutput(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetSurfaceOutput(usdShade_Material_t const* _this, tf_Token_t const* renderContext, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetSurfaceOutput(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetSurfaceOutputs(usdShade_Material_t const* _this, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetSurfaceOutputs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeSurfaceSource_00(usdShade_Material_t const* _this, tf_Token_t const* renderContext, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeSurfaceSource(*renderContext, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeSurfaceSource_01(usdShade_Material_t const* _this, tf_TokenVector_t const* contextVector, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeSurfaceSource(*contextVector, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateDisplacementOutput(usdShade_Material_t const* _this, tf_Token_t const* renderContext, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateDisplacementOutput(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetDisplacementOutput(usdShade_Material_t const* _this, tf_Token_t const* renderContext, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetDisplacementOutput(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetDisplacementOutputs(usdShade_Material_t const* _this, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetDisplacementOutputs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeDisplacementSource_00(usdShade_Material_t const* _this, tf_Token_t const* renderContext, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeDisplacementSource(*renderContext, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeDisplacementSource_01(usdShade_Material_t const* _this, tf_TokenVector_t const* contextVector, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeDisplacementSource(*contextVector, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateVolumeOutput(usdShade_Material_t const* _this, tf_Token_t const* renderContext, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateVolumeOutput(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetVolumeOutput(usdShade_Material_t const* _this, tf_Token_t const* renderContext, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetVolumeOutput(*renderContext));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetVolumeOutputs(usdShade_Material_t const* _this, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetVolumeOutputs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeVolumeSource_00(usdShade_Material_t const* _this, tf_Token_t const* renderContext, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeVolumeSource(*renderContext, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeVolumeSource_01(usdShade_Material_t const* _this, tf_TokenVector_t const* contextVector, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeVolumeSource(*contextVector, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetEditContextForVariant(usdShade_Material_t const* _this, tf_Token_t const* MaterialVariantName, sdf_LayerHandle_t const* layer, usd_StageEditTargetPair_t** _result) {
    try {
        *_result = new std::pair<pxr::UsdStagePtr, pxr::UsdEditTarget>(_this->GetEditContextForVariant(*MaterialVariantName, *layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetMaterialVariant(usdShade_Material_t const* _this, usd_UsdVariantSet_t** _result) {
    try {
        *_result = new pxr::UsdVariantSet(_this->GetMaterialVariant());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateMasterMaterialVariant(usd_Prim_t const* masterPrim, usd_PrimVector_t const* MaterialPrims, tf_Token_t const* masterVariantSetName, bool* _result) {
    try {
        *_result = pxr::UsdShadeMaterial::CreateMasterMaterialVariant(*masterPrim, *MaterialPrims, *masterVariantSetName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetBaseMaterial(usdShade_Material_t const* _this, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(_this->GetBaseMaterial());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetBaseMaterialPath(usdShade_Material_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetBaseMaterialPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_FindBaseMaterialPathInPrimIndex(pcp_PrimIndex_t const* primIndex, void (*pathIsMaterialPredicate)(sdf_Path_t const* param00, bool* _result), sdf_Path_t** _result) {
    try {
        std::function<bool (pxr::SdfPath const&)> pathIsMaterialPredicate_wrapper = [&](pxr::SdfPath const& param00) {
        bool _result;
        pathIsMaterialPredicate(&param00, &_result);
        return _result;
    };
        *_result = new pxr::SdfPath(pxr::UsdShadeMaterial::FindBaseMaterialPathInPrimIndex(*primIndex, pathIsMaterialPredicate_wrapper));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_SetBaseMaterial(usdShade_Material_t const* _this, usdShade_Material_t const* baseMaterial) {
    try {
        _this->SetBaseMaterial(*baseMaterial);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_SetBaseMaterialPath(usdShade_Material_t const* _this, sdf_Path_t const* baseMaterialPath) {
    try {
        _this->SetBaseMaterialPath(*baseMaterialPath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ClearBaseMaterial(usdShade_Material_t const* _this) {
    try {
        _this->ClearBaseMaterial();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_HasBaseMaterial(usdShade_Material_t const* _this, bool* _result) {
    try {
        *_result = _this->HasBaseMaterial();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ConnectableAPI(usdShade_Material_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateOutput(usdShade_Material_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetOutput(usdShade_Material_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetOutputs(usdShade_Material_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeOutputSource(usdShade_Material_t const* _this, tf_Token_t const* outputName, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeOutputSource(*outputName, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_CreateInput(usdShade_Material_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetInput(usdShade_Material_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetInputs(usdShade_Material_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetInterfaceInputs(usdShade_Material_t const* _this, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInterfaceInputs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_ComputeInterfaceInputConsumersMap(usdShade_Material_t const* _this, bool computeTransitiveConsumers, usdShade_NodeGraphInterfaceInputConsumersMap_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeGraph::InterfaceInputConsumersMap(_this->ComputeInterfaceInputConsumersMap(computeTransitiveConsumers));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_IsConcrete(usdShade_Material_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_IsTyped(usdShade_Material_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_IsAPISchema(usdShade_Material_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_IsAppliedAPISchema(usdShade_Material_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_IsMultipleApplyAPISchema(usdShade_Material_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetSchemaKind(usdShade_Material_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetPrim(usdShade_Material_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetPath(usdShade_Material_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_GetSchemaClassPrimDefinition(usdShade_Material_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_op_bool(usdShade_Material_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_from_prim(usd_Prim_t const* prim, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_from_schema(usd_SchemaBase_t const* schemaObj, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Material_dtor(usdShade_Material_t* _this) {
    delete _this;
    return 0;
}

int usdShade_MaterialVector_data(usdShade_MaterialVector_t* _this, usdShade_Material_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_MaterialVector_data_const(usdShade_MaterialVector_t const* _this, usdShade_Material_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_MaterialVector_empty(usdShade_MaterialVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdShade_MaterialVector_size(usdShade_MaterialVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdShade_MaterialVector_max_size(usdShade_MaterialVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdShade_MaterialVector_capacity(usdShade_MaterialVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdShade_MaterialVector_clear(usdShade_MaterialVector_t* _this) {
    _this->clear();
    return 0;
}

int usdShade_MaterialVector_pop_back(usdShade_MaterialVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdShade_MaterialVector_op_index(usdShade_MaterialVector_t const* _this, size_t __n, usdShade_Material_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdShade_MaterialVector_default(usdShade_MaterialVector_t** _result) {
    *_result = new std::vector<pxr::UsdShadeMaterial>();
    return 0;
}

int usdShade_MaterialVector_dtor(usdShade_MaterialVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_MaterialBindingAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdShadeMaterialBindingAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_MaterialBindingAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI(pxr::UsdShadeMaterialBindingAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdShadeMaterialBindingAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_Apply(usd_Prim_t const* prim, usdShade_MaterialBindingAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI(pxr::UsdShadeMaterialBindingAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetDirectBindingRel(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* materialPurpose, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetDirectBindingRel(*materialPurpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetCollectionBindingRel(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* bindingName, tf_Token_t const* materialPurpose, usd_Relationship_t** _result) {
    try {
        *_result = new pxr::UsdRelationship(_this->GetCollectionBindingRel(*bindingName, *materialPurpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetCollectionBindingRels(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* materialPurpose, usd_RelationshipVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdRelationship>(_this->GetCollectionBindingRels(*materialPurpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetDirectBinding(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* materialPurpose, usdShade_MaterialBindingAPIDirectBinding_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI::DirectBinding(_this->GetDirectBinding(*materialPurpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetCollectionBindings(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* materialPurpose, usdShade_MaterialBindingAPICollectionBindinVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI::CollectionBindingVector(_this->GetCollectionBindings(*materialPurpose));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetMaterialBindingStrength(usd_Relationship_t const* bindingRel, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdShadeMaterialBindingAPI::GetMaterialBindingStrength(*bindingRel));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_SetMaterialBindingStrength(usd_Relationship_t const* bindingRel, tf_Token_t const* bindingStrength, bool* _result) {
    try {
        *_result = pxr::UsdShadeMaterialBindingAPI::SetMaterialBindingStrength(*bindingRel, *bindingStrength);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_Bind_00(usdShade_MaterialBindingAPI_t const* _this, usdShade_Material_t const* material, tf_Token_t const* bindingStrength, tf_Token_t const* materialPurpose, bool* _result) {
    try {
        *_result = _this->Bind(*material, *bindingStrength, *materialPurpose);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_Bind_01(usdShade_MaterialBindingAPI_t const* _this, usd_CollectionAPI_t const* collection, usdShade_Material_t const* material, tf_Token_t const* bindingName, tf_Token_t const* bindingStrength, tf_Token_t const* materialPurpose, bool* _result) {
    try {
        *_result = _this->Bind(*collection, *material, *bindingName, *bindingStrength, *materialPurpose);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_UnbindDirectBinding(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* materialPurpose, bool* _result) {
    try {
        *_result = _this->UnbindDirectBinding(*materialPurpose);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_UnbindCollectionBinding(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* bindingName, tf_Token_t const* materialPurpose, bool* _result) {
    try {
        *_result = _this->UnbindCollectionBinding(*bindingName, *materialPurpose);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_UnbindAllBindings(usdShade_MaterialBindingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->UnbindAllBindings();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_RemovePrimFromBindingCollection(usdShade_MaterialBindingAPI_t const* _this, usd_Prim_t const* prim, tf_Token_t const* bindingName, tf_Token_t const* materialPurpose, bool* _result) {
    try {
        *_result = _this->RemovePrimFromBindingCollection(*prim, *bindingName, *materialPurpose);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_AddPrimToBindingCollection(usdShade_MaterialBindingAPI_t const* _this, usd_Prim_t const* prim, tf_Token_t const* bindingName, tf_Token_t const* materialPurpose, bool* _result) {
    try {
        *_result = _this->AddPrimToBindingCollection(*prim, *bindingName, *materialPurpose);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetMaterialPurposes(tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(pxr::UsdShadeMaterialBindingAPI::GetMaterialPurposes());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetResolvedTargetPathFromBindingRel(usd_Relationship_t const* bindingRel, sdf_Path_t const** _result) {
    try {
        *_result = new pxr::SdfPath const(pxr::UsdShadeMaterialBindingAPI::GetResolvedTargetPathFromBindingRel(*bindingRel));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_ComputeBoundMaterial(usdShade_MaterialBindingAPI_t const* _this, tf_Token_t const* materialPurpose, usd_Relationship_t* bindingRel, bool supportLegacyBindings, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(_this->ComputeBoundMaterial(*materialPurpose, bindingRel, supportLegacyBindings));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_ComputeBoundMaterials(usd_PrimVector_t const* prims, tf_Token_t const* materialPurpose, usd_RelationshipVector_t* bindingRels, bool supportLegacyBindings, usdShade_MaterialVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeMaterial>(pxr::UsdShadeMaterialBindingAPI::ComputeBoundMaterials(*prims, *materialPurpose, bindingRels, supportLegacyBindings));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_CreateMaterialBindSubset(usdShade_MaterialBindingAPI_t* _this, tf_Token_t const* subsetName, vt_IntArray_t const* indices, tf_Token_t const* elementType, usdGeom_Subset_t** _result) {
    try {
        *_result = new pxr::UsdGeomSubset(_this->CreateMaterialBindSubset(*subsetName, *indices, *elementType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetMaterialBindSubsets(usdShade_MaterialBindingAPI_t* _this, usdGeom_SubsetVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdGeomSubset>(_this->GetMaterialBindSubsets());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_SetMaterialBindSubsetsFamilyType(usdShade_MaterialBindingAPI_t* _this, tf_Token_t const* familyType, bool* _result) {
    try {
        *_result = _this->SetMaterialBindSubsetsFamilyType(*familyType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetMaterialBindSubsetsFamilyType(usdShade_MaterialBindingAPI_t* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetMaterialBindSubsetsFamilyType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_CanContainPropertyName(tf_Token_t const* name, bool* _result) {
    try {
        *_result = pxr::UsdShadeMaterialBindingAPI::CanContainPropertyName(*name);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_IsConcrete(usdShade_MaterialBindingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_IsTyped(usdShade_MaterialBindingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_IsAPISchema(usdShade_MaterialBindingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_IsAppliedAPISchema(usdShade_MaterialBindingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_IsMultipleApplyAPISchema(usdShade_MaterialBindingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetSchemaKind(usdShade_MaterialBindingAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetPrim(usdShade_MaterialBindingAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetPath(usdShade_MaterialBindingAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_GetSchemaClassPrimDefinition(usdShade_MaterialBindingAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_op_bool(usdShade_MaterialBindingAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_from_prim(usd_Prim_t const* prim, usdShade_MaterialBindingAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdShade_MaterialBindingAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPI_dtor(usdShade_MaterialBindingAPI_t* _this) {
    delete _this;
    return 0;
}

int usdShade_MaterialBindingAPIDirectBinding_GetMaterial(usdShade_MaterialBindingAPIDirectBinding_t const* _this, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(_this->GetMaterial());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIDirectBinding_GetMaterialPath(usdShade_MaterialBindingAPIDirectBinding_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetMaterialPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIDirectBinding_GetBindingRel(usdShade_MaterialBindingAPIDirectBinding_t const* _this, usd_Relationship_t const** _result) {
    try {
        *_result = &_this->GetBindingRel();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIDirectBinding_GetMaterialPurpose(usdShade_MaterialBindingAPIDirectBinding_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetMaterialPurpose();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIDirectBinding_IsBound(usdShade_MaterialBindingAPIDirectBinding_t const* _this, bool* _result) {
    try {
        *_result = _this->IsBound();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIDirectBinding_default(usdShade_MaterialBindingAPIDirectBinding_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI::DirectBinding();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIDirectBinding_from_schema(usd_Relationship_t const* bindingRel, usdShade_MaterialBindingAPIDirectBinding_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI::DirectBinding(*bindingRel);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIDirectBinding_dtor(usdShade_MaterialBindingAPIDirectBinding_t* _this) {
    delete _this;
    return 0;
}

int usdShade_MaterialBindingAPICollectionBinding_GetMaterial(usdShade_MaterialBindingAPICollectionBinding_t const* _this, usdShade_Material_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterial(_this->GetMaterial());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_GetCollection(usdShade_MaterialBindingAPICollectionBinding_t const* _this, usd_CollectionAPI_t** _result) {
    try {
        *_result = new pxr::UsdCollectionAPI(_this->GetCollection());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_IsCollectionBindingRel(usd_Relationship_t const* bindingRel, bool* _result) {
    try {
        *_result = pxr::UsdShadeMaterialBindingAPI::CollectionBinding::IsCollectionBindingRel(*bindingRel);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_IsValid(usdShade_MaterialBindingAPICollectionBinding_t const* _this, bool* _result) {
    try {
        *_result = _this->IsValid();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_GetCollectionPath(usdShade_MaterialBindingAPICollectionBinding_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetCollectionPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_GetMaterialPath(usdShade_MaterialBindingAPICollectionBinding_t const* _this, sdf_Path_t const** _result) {
    try {
        *_result = &_this->GetMaterialPath();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_GetBindingRel(usdShade_MaterialBindingAPICollectionBinding_t const* _this, usd_Relationship_t const** _result) {
    try {
        *_result = &_this->GetBindingRel();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_default(usdShade_MaterialBindingAPICollectionBinding_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI::CollectionBinding();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_from_schema(usd_Relationship_t const* collBindingRel, usdShade_MaterialBindingAPICollectionBinding_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI::CollectionBinding(*collBindingRel);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPICollectionBinding_dtor(usdShade_MaterialBindingAPICollectionBinding_t* _this) {
    delete _this;
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_data(usdShade_MaterialBindingAPICollectionBindinVector_t* _this, usdShade_MaterialBindingAPICollectionBinding_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_data_const(usdShade_MaterialBindingAPICollectionBindinVector_t const* _this, usdShade_MaterialBindingAPICollectionBinding_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_empty(usdShade_MaterialBindingAPICollectionBindinVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_size(usdShade_MaterialBindingAPICollectionBindinVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_max_size(usdShade_MaterialBindingAPICollectionBindinVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_capacity(usdShade_MaterialBindingAPICollectionBindinVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_clear(usdShade_MaterialBindingAPICollectionBindinVector_t* _this) {
    _this->clear();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_pop_back(usdShade_MaterialBindingAPICollectionBindinVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_op_index(usdShade_MaterialBindingAPICollectionBindinVector_t const* _this, size_t __n, usdShade_MaterialBindingAPICollectionBinding_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_default(usdShade_MaterialBindingAPICollectionBindinVector_t** _result) {
    *_result = new pxr::UsdShadeMaterialBindingAPI::CollectionBindingVector();
    return 0;
}

int usdShade_MaterialBindingAPICollectionBindinVector_dtor(usdShade_MaterialBindingAPICollectionBindinVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_MaterialBindingAPIBindingsAtPrim_from_prim(usd_Prim_t const* prim, tf_Token_t const* materialPurpose, bool supportLegacyBindings, usdShade_MaterialBindingAPIBindingsAtPrim_t** _result) {
    try {
        *_result = new pxr::UsdShadeMaterialBindingAPI::BindingsAtPrim(*prim, *materialPurpose, supportLegacyBindings);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_MaterialBindingAPIBindingsAtPrim_dtor(usdShade_MaterialBindingAPIBindingsAtPrim_t* _this) {
    delete _this;
    return 0;
}

int usdShade_NodeDefAPI_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdShadeNodeDefAPI::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_NodeDefAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeDefAPI(pxr::UsdShadeNodeDefAPI::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_CanApply(usd_Prim_t const* prim, std_String_t* whyNot, bool* _result) {
    try {
        *_result = pxr::UsdShadeNodeDefAPI::CanApply(*prim, whyNot);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_Apply(usd_Prim_t const* prim, usdShade_NodeDefAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeDefAPI(pxr::UsdShadeNodeDefAPI::Apply(*prim));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetImplementationSourceAttr(usdShade_NodeDefAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetImplementationSourceAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_CreateImplementationSourceAttr(usdShade_NodeDefAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateImplementationSourceAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetIdAttr(usdShade_NodeDefAPI_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIdAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_CreateIdAttr(usdShade_NodeDefAPI_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIdAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetImplementationSource(usdShade_NodeDefAPI_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetImplementationSource());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_SetShaderId(usdShade_NodeDefAPI_t const* _this, tf_Token_t const* id, bool* _result) {
    try {
        *_result = _this->SetShaderId(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetShaderId(usdShade_NodeDefAPI_t const* _this, tf_Token_t* id, bool* _result) {
    try {
        *_result = _this->GetShaderId(id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_SetSourceAsset(usdShade_NodeDefAPI_t const* _this, sdf_AssetPath_t const* sourceAsset, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->SetSourceAsset(*sourceAsset, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetSourceAsset(usdShade_NodeDefAPI_t const* _this, sdf_AssetPath_t* sourceAsset, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->GetSourceAsset(sourceAsset, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_SetSourceAssetSubIdentifier(usdShade_NodeDefAPI_t const* _this, tf_Token_t const* subIdentifier, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->SetSourceAssetSubIdentifier(*subIdentifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetSourceAssetSubIdentifier(usdShade_NodeDefAPI_t const* _this, tf_Token_t* subIdentifier, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->GetSourceAssetSubIdentifier(subIdentifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_SetSourceCode(usdShade_NodeDefAPI_t const* _this, std_String_t const* sourceCode, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->SetSourceCode(*sourceCode, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetSourceCode(usdShade_NodeDefAPI_t const* _this, std_String_t* sourceCode, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->GetSourceCode(sourceCode, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetShaderNodeForSourceType(usdShade_NodeDefAPI_t const* _this, tf_Token_t const* sourceType, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeForSourceType(*sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_IsConcrete(usdShade_NodeDefAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_IsTyped(usdShade_NodeDefAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_IsAPISchema(usdShade_NodeDefAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_IsAppliedAPISchema(usdShade_NodeDefAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_IsMultipleApplyAPISchema(usdShade_NodeDefAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetSchemaKind(usdShade_NodeDefAPI_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetPrim(usdShade_NodeDefAPI_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetPath(usdShade_NodeDefAPI_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_GetSchemaClassPrimDefinition(usdShade_NodeDefAPI_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_op_bool(usdShade_NodeDefAPI_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_from_prim(usd_Prim_t const* prim, usdShade_NodeDefAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeDefAPI(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_from_schema(usd_SchemaBase_t const* schemaObj, usdShade_NodeDefAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeDefAPI(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeDefAPI_dtor(usdShade_NodeDefAPI_t* _this) {
    delete _this;
    return 0;
}

int usdShade_NodeGraph_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdShadeNodeGraph::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_NodeGraph_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeGraph(pxr::UsdShadeNodeGraph::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_NodeGraph_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeGraph(pxr::UsdShadeNodeGraph::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_ConnectableAPI(usdShade_NodeGraph_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_CreateOutput(usdShade_NodeGraph_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetOutput(usdShade_NodeGraph_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetOutputs(usdShade_NodeGraph_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_ComputeOutputSource(usdShade_NodeGraph_t const* _this, tf_Token_t const* outputName, tf_Token_t* sourceName, int* sourceType, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(_this->ComputeOutputSource(*outputName, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_CreateInput(usdShade_NodeGraph_t const* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetInput(usdShade_NodeGraph_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetInputs(usdShade_NodeGraph_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetInterfaceInputs(usdShade_NodeGraph_t const* _this, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInterfaceInputs());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_ComputeInterfaceInputConsumersMap(usdShade_NodeGraph_t const* _this, bool computeTransitiveConsumers, usdShade_NodeGraphInterfaceInputConsumersMap_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeGraph::InterfaceInputConsumersMap(_this->ComputeInterfaceInputConsumersMap(computeTransitiveConsumers));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_IsConcrete(usdShade_NodeGraph_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_IsTyped(usdShade_NodeGraph_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_IsAPISchema(usdShade_NodeGraph_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_IsAppliedAPISchema(usdShade_NodeGraph_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_IsMultipleApplyAPISchema(usdShade_NodeGraph_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetSchemaKind(usdShade_NodeGraph_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetPrim(usdShade_NodeGraph_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetPath(usdShade_NodeGraph_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_GetSchemaClassPrimDefinition(usdShade_NodeGraph_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_op_bool(usdShade_NodeGraph_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_from_prim(usd_Prim_t const* prim, usdShade_NodeGraph_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeGraph(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_from_schema(usd_SchemaBase_t const* schemaObj, usdShade_NodeGraph_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeGraph(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_from_connectable(usdShade_ConnectableAPI_t const* connectable, usdShade_NodeGraph_t** _result) {
    try {
        *_result = new pxr::UsdShadeNodeGraph(*connectable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_NodeGraph_dtor(usdShade_NodeGraph_t* _this) {
    delete _this;
    return 0;
}

int usdShade_NodeGraphInterfaceInputConsumersMap_dtor(usdShade_NodeGraphInterfaceInputConsumersMap_t* _this) {
    delete _this;
    return 0;
}

int usdShade_Output_GetFullName(usdShade_Output_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetFullName();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetBaseName(usdShade_Output_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetBaseName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetPrim(usdShade_Output_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetTypeName(usdShade_Output_t const* _this, sdf_ValueTypeName_t** _result) {
    try {
        *_result = new pxr::SdfValueTypeName(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_Set(usdShade_Output_t const* _this, vt_Value_t const* value, usd_TimeCode_t time, bool* _result) {
    try {
        *_result = _this->Set(*value, time);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_SetRenderType(usdShade_Output_t const* _this, tf_Token_t const* renderType, bool* _result) {
    try {
        *_result = _this->SetRenderType(*renderType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetRenderType(usdShade_Output_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetRenderType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_HasRenderType(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->HasRenderType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetSdrMetadata(usdShade_Output_t const* _this, ndr_TokenMap_t** _result) {
    try {
        *_result = new pxr::NdrTokenMap(_this->GetSdrMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetSdrMetadataByKey(usdShade_Output_t const* _this, tf_Token_t const* key, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSdrMetadataByKey(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_SetSdrMetadata(usdShade_Output_t const* _this, ndr_TokenMap_t const* sdrMetadata) {
    try {
        _this->SetSdrMetadata(*sdrMetadata);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_SetSdrMetadataByKey(usdShade_Output_t const* _this, tf_Token_t const* key, std_String_t const* value) {
    try {
        _this->SetSdrMetadataByKey(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_HasSdrMetadata(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSdrMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_HasSdrMetadataByKey(usdShade_Output_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasSdrMetadataByKey(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ClearSdrMetadata(usdShade_Output_t const* _this) {
    try {
        _this->ClearSdrMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ClearSdrMetadataByKey(usdShade_Output_t const* _this, tf_Token_t const* key) {
    try {
        _this->ClearSdrMetadataByKey(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_IsOutput(usd_Attribute_t const* attr, bool* _result) {
    try {
        *_result = pxr::UsdShadeOutput::IsOutput(*attr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetAttr(usdShade_Output_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_IsDefined(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->IsDefined();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_CanConnect_00(usdShade_Output_t const* _this, usd_Attribute_t const* source, bool* _result) {
    try {
        *_result = _this->CanConnect(*source);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_CanConnect_01(usdShade_Output_t const* _this, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = _this->CanConnect(*sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_CanConnect_02(usdShade_Output_t const* _this, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = _this->CanConnect(*sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ConnectToSource_00(usdShade_Output_t const* _this, usdShade_ConnectionSourceInfo_t const* source, int mod, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*source, static_cast<pxr::UsdShadeConnectionModification>(mod));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ConnectToSource_01(usdShade_Output_t const* _this, usdShade_ConnectableAPI_t const* source, tf_Token_t const* sourceName, int sourceType, sdf_ValueTypeName_t* typeName, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*source, *sourceName, static_cast<pxr::UsdShadeAttributeType>(sourceType), *typeName);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ConnectToSource_02(usdShade_Output_t const* _this, sdf_Path_t const* sourcePath, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*sourcePath);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ConnectToSource_03(usdShade_Output_t const* _this, usdShade_Input_t const* sourceInput, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*sourceInput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ConnectToSource_04(usdShade_Output_t const* _this, usdShade_Output_t const* sourceOutput, bool* _result) {
    try {
        *_result = _this->ConnectToSource(*sourceOutput);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_SetConnectedSources(usdShade_Output_t const* _this, usdShade_ConnectionSourceInfoVector_t const* sourceInfos, bool* _result) {
    try {
        *_result = _this->SetConnectedSources(*sourceInfos);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetConnectedSources(usdShade_Output_t const* _this, sdf_PathVector_t* invalidSourcePaths, usdShade_InputSourceInfoVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput::SourceInfoVector(_this->GetConnectedSources(invalidSourcePaths));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetConnectedSource(usdShade_Output_t const* _this, usdShade_ConnectableAPI_t* source, tf_Token_t* sourceName, int* sourceType, bool* _result) {
    try {
        *_result = _this->GetConnectedSource(source, sourceName, reinterpret_cast<pxr::UsdShadeAttributeType*>(sourceType));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetRawConnectedSourcePaths(usdShade_Output_t const* _this, sdf_PathVector_t* sourcePaths, bool* _result) {
    try {
        *_result = _this->GetRawConnectedSourcePaths(sourcePaths);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_HasConnectedSource(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->HasConnectedSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_IsSourceConnectionFromBaseMaterial(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->IsSourceConnectionFromBaseMaterial();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_DisconnectSource(usdShade_Output_t const* _this, usd_Attribute_t const* sourceAttr, bool* _result) {
    try {
        *_result = _this->DisconnectSource(*sourceAttr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ClearSources(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearSources();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_ClearSource(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->ClearSource();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_GetValueProducingAttributes(usdShade_Output_t const* _this, bool shaderOutputsOnly, usdShade_AttributeVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeAttributeVector(_this->GetValueProducingAttributes(shaderOutputsOnly));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_op_bool(usdShade_Output_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_default(usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_from_schema(usd_Attribute_t const* attr, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(*attr);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Output_dtor(usdShade_Output_t* _this) {
    delete _this;
    return 0;
}

int usdShade_OutputVector_data(usdShade_OutputVector_t* _this, usdShade_Output_t** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_OutputVector_data_const(usdShade_OutputVector_t const* _this, usdShade_Output_t const** _result) {
    *_result = _this->data();
    return 0;
}

int usdShade_OutputVector_empty(usdShade_OutputVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int usdShade_OutputVector_size(usdShade_OutputVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int usdShade_OutputVector_max_size(usdShade_OutputVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int usdShade_OutputVector_capacity(usdShade_OutputVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int usdShade_OutputVector_clear(usdShade_OutputVector_t* _this) {
    _this->clear();
    return 0;
}

int usdShade_OutputVector_pop_back(usdShade_OutputVector_t* _this) {
    _this->pop_back();
    return 0;
}

int usdShade_OutputVector_op_index(usdShade_OutputVector_t const* _this, size_t __n, usdShade_Output_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int usdShade_OutputVector_default(usdShade_OutputVector_t** _result) {
    *_result = new std::vector<pxr::UsdShadeOutput>();
    return 0;
}

int usdShade_OutputVector_dtor(usdShade_OutputVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_InputSourceInfoVector_dtor(usdShade_InputSourceInfoVector_t* _this) {
    delete _this;
    return 0;
}

int usdShade_Shader_GetSchemaAttributeNames(bool includeInherited, tf_TokenVector_t const** _result) {
    try {
        *_result = &pxr::UsdShadeShader::GetSchemaAttributeNames(includeInherited);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_Get(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(pxr::UsdShadeShader::Get(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_Define(usd_StageWeakPtr_t const* stage, sdf_Path_t const* path, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(pxr::UsdShadeShader::Define(*stage, *path));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_ConnectableAPI(usdShade_Shader_t const* _this, usdShade_ConnectableAPI_t** _result) {
    try {
        *_result = new pxr::UsdShadeConnectableAPI(_this->ConnectableAPI());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_CreateOutput(usdShade_Shader_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->CreateOutput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetOutput(usdShade_Shader_t const* _this, tf_Token_t const* name, usdShade_Output_t** _result) {
    try {
        *_result = new pxr::UsdShadeOutput(_this->GetOutput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetOutputs(usdShade_Shader_t const* _this, bool onlyAuthored, usdShade_OutputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeOutput>(_this->GetOutputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_CreateInput(usdShade_Shader_t* _this, tf_Token_t const* name, sdf_ValueTypeName_t const* typeName, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->CreateInput(*name, *typeName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetInput(usdShade_Shader_t const* _this, tf_Token_t const* name, usdShade_Input_t** _result) {
    try {
        *_result = new pxr::UsdShadeInput(_this->GetInput(*name));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetInputs(usdShade_Shader_t const* _this, bool onlyAuthored, usdShade_InputVector_t** _result) {
    try {
        *_result = new std::vector<pxr::UsdShadeInput>(_this->GetInputs(onlyAuthored));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetImplementationSourceAttr(usdShade_Shader_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetImplementationSourceAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_CreateImplementationSourceAttr(usdShade_Shader_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateImplementationSourceAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetIdAttr(usdShade_Shader_t const* _this, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->GetIdAttr());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_CreateIdAttr(usdShade_Shader_t const* _this, vt_Value_t const* defaultValue, bool writeSparsely, usd_Attribute_t** _result) {
    try {
        *_result = new pxr::UsdAttribute(_this->CreateIdAttr(*defaultValue, writeSparsely));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetImplementationSource(usdShade_Shader_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetImplementationSource());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_SetShaderId(usdShade_Shader_t const* _this, tf_Token_t const* id, bool* _result) {
    try {
        *_result = _this->SetShaderId(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetShaderId(usdShade_Shader_t const* _this, tf_Token_t* id, bool* _result) {
    try {
        *_result = _this->GetShaderId(id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_SetSourceAsset(usdShade_Shader_t const* _this, sdf_AssetPath_t const* sourceAsset, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->SetSourceAsset(*sourceAsset, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetSourceAsset(usdShade_Shader_t const* _this, sdf_AssetPath_t* sourceAsset, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->GetSourceAsset(sourceAsset, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_SetSourceAssetSubIdentifier(usdShade_Shader_t const* _this, tf_Token_t const* subIdentifier, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->SetSourceAssetSubIdentifier(*subIdentifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetSourceAssetSubIdentifier(usdShade_Shader_t const* _this, tf_Token_t* subIdentifier, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->GetSourceAssetSubIdentifier(subIdentifier, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_SetSourceCode(usdShade_Shader_t const* _this, std_String_t const* sourceCode, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->SetSourceCode(*sourceCode, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetSourceCode(usdShade_Shader_t const* _this, std_String_t* sourceCode, tf_Token_t const* sourceType, bool* _result) {
    try {
        *_result = _this->GetSourceCode(sourceCode, *sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetShaderNodeForSourceType(usdShade_Shader_t const* _this, tf_Token_t const* sourceType, sdr_ShaderNode_t const** _result) {
    try {
        *_result = _this->GetShaderNodeForSourceType(*sourceType);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetSdrMetadata(usdShade_Shader_t const* _this, ndr_TokenMap_t** _result) {
    try {
        *_result = new pxr::NdrTokenMap(_this->GetSdrMetadata());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetSdrMetadataByKey(usdShade_Shader_t const* _this, tf_Token_t const* key, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetSdrMetadataByKey(*key));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_SetSdrMetadata(usdShade_Shader_t const* _this, ndr_TokenMap_t const* sdrMetadata) {
    try {
        _this->SetSdrMetadata(*sdrMetadata);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_SetSdrMetadataByKey(usdShade_Shader_t const* _this, tf_Token_t const* key, std_String_t const* value) {
    try {
        _this->SetSdrMetadataByKey(*key, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_HasSdrMetadata(usdShade_Shader_t const* _this, bool* _result) {
    try {
        *_result = _this->HasSdrMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_HasSdrMetadataByKey(usdShade_Shader_t const* _this, tf_Token_t const* key, bool* _result) {
    try {
        *_result = _this->HasSdrMetadataByKey(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_ClearSdrMetadata(usdShade_Shader_t const* _this) {
    try {
        _this->ClearSdrMetadata();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_ClearSdrMetadataByKey(usdShade_Shader_t const* _this, tf_Token_t const* key) {
    try {
        _this->ClearSdrMetadataByKey(*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_IsConcrete(usdShade_Shader_t const* _this, bool* _result) {
    try {
        *_result = _this->IsConcrete();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_IsTyped(usdShade_Shader_t const* _this, bool* _result) {
    try {
        *_result = _this->IsTyped();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_IsAPISchema(usdShade_Shader_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_IsAppliedAPISchema(usdShade_Shader_t const* _this, bool* _result) {
    try {
        *_result = _this->IsAppliedAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_IsMultipleApplyAPISchema(usdShade_Shader_t const* _this, bool* _result) {
    try {
        *_result = _this->IsMultipleApplyAPISchema();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetSchemaKind(usdShade_Shader_t const* _this, int* _result) {
    try {
        *_result = static_cast<int>(_this->GetSchemaKind());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetPrim(usdShade_Shader_t const* _this, usd_Prim_t** _result) {
    try {
        *_result = new pxr::UsdPrim(_this->GetPrim());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetPath(usdShade_Shader_t const* _this, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(_this->GetPath());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_GetSchemaClassPrimDefinition(usdShade_Shader_t const* _this, usd_PrimDefinition_t const** _result) {
    try {
        *_result = _this->GetSchemaClassPrimDefinition();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_op_bool(usdShade_Shader_t const* _this, bool* _result) {
    try {
        *_result = _this->operator bool();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_from_prim(usd_Prim_t const* prim, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(*prim);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_from_schema(usd_SchemaBase_t const* schemaObj, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(*schemaObj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_from_connectable(usdShade_ConnectableAPI_t const* connectable, usdShade_Shader_t** _result) {
    try {
        *_result = new pxr::UsdShadeShader(*connectable);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Shader_dtor(usdShade_Shader_t* _this) {
    delete _this;
    return 0;
}

int usdShade_ShaderDefParserPlugin_Parse(usdShade_ShaderDefParserPlugin_t* _this, ndr_NodeDiscoveryResult_t const* discoveryResult, ndr_NodeUniquePtr_t** _result) {
    try {
        *_result = new pxr::NdrNodeUniquePtr(_this->Parse(*discoveryResult));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ShaderDefParserPlugin_GetDiscoveryTypes(usdShade_ShaderDefParserPlugin_t const* _this, tf_TokenVector_t const** _result) {
    try {
        *_result = &_this->GetDiscoveryTypes();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ShaderDefParserPlugin_GetSourceType(usdShade_ShaderDefParserPlugin_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->GetSourceType();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ShaderDefParserPlugin_default(usdShade_ShaderDefParserPlugin_t** _result) {
    try {
        *_result = new pxr::UsdShadeShaderDefParserPlugin();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ShaderDefParserPlugin_dtor(usdShade_ShaderDefParserPlugin_t* _this) {
    delete _this;
    return 0;
}

int usdShade_ShaderDefUtils_GetNodeDiscoveryResults(usdShade_Shader_t const* shaderDef, std_String_t const* sourceUri, ndr_NodeDiscoveryResultVector_t** _result) {
    try {
        *_result = new std::vector<pxr::NdrNodeDiscoveryResult>(pxr::UsdShadeShaderDefUtils::GetNodeDiscoveryResults(*shaderDef, *sourceUri));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ShaderDefUtils_GetShaderProperties(usdShade_ConnectableAPI_t const* shaderDef, ndr_PropertyUniquePtrVec_t** _result) {
    try {
        *_result = new pxr::NdrPropertyUniquePtrVec(pxr::UsdShadeShaderDefUtils::GetShaderProperties(*shaderDef));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ShaderDefUtils_GetPrimvarNamesMetadataString(ndr_TokenMap_t const* metadata, usdShade_ConnectableAPI_t const* shaderDef, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::UsdShadeShaderDefUtils::GetPrimvarNamesMetadataString(*metadata, *shaderDef));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_ShaderDefUtils_dtor(usdShade_ShaderDefUtils_t* _this) {
    delete _this;
    return 0;
}

int usdShade_TokensType_dtor(usdShade_TokensType_t* _this) {
    delete _this;
    return 0;
}

int usdShade_UdimUtils_IsUdimIdentifier(std_String_t const* identifier, bool* _result) {
    try {
        *_result = pxr::UsdShadeUdimUtils::IsUdimIdentifier(*identifier);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_UdimUtils_ReplaceUdimPattern(std_String_t const* identifierWithPattern, std_String_t const* replacement, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::UsdShadeUdimUtils::ReplaceUdimPattern(*identifierWithPattern, *replacement));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_UdimUtils_ResolveUdimPath(std_String_t const* udimPath, sdf_LayerHandle_t const* layer, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::UsdShadeUdimUtils::ResolveUdimPath(*udimPath, *layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_UdimUtils_ResolveUdimTilePaths(std_String_t const* udimPath, sdf_LayerHandle_t const* layer, std_StringPairVector_t** _result) {
    try {
        *_result = new std::vector<std::pair<std::string, std::string>>(pxr::UsdShadeUdimUtils::ResolveUdimTilePaths(*udimPath, *layer));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_UdimUtils_dtor(usdShade_UdimUtils_t* _this) {
    delete _this;
    return 0;
}

int usdShade_Utils_GetPrefixForAttributeType(int sourceType, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::UsdShadeUtils::GetPrefixForAttributeType(static_cast<pxr::UsdShadeAttributeType>(sourceType)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Utils_GetConnectedSourcePath(usdShade_ConnectionSourceInfo_t const* srcInfo, sdf_Path_t** _result) {
    try {
        *_result = new pxr::SdfPath(pxr::UsdShadeUtils::GetConnectedSourcePath(*srcInfo));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Utils_GetBaseNameAndType(tf_Token_t const* fullName, usdShade_TokenAttributeTypePair_t** _result) {
    try {
        *_result = new std::pair<pxr::TfToken, pxr::UsdShadeAttributeType>(pxr::UsdShadeUtils::GetBaseNameAndType(*fullName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Utils_GetType(tf_Token_t const* fullName, int* _result) {
    try {
        *_result = static_cast<int>(pxr::UsdShadeUtils::GetType(*fullName));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Utils_GetFullName(tf_Token_t const* baseName, int type, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(pxr::UsdShadeUtils::GetFullName(*baseName, static_cast<pxr::UsdShadeAttributeType>(type)));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Utils_GetValueProducingAttributes_00(usdShade_Input_t const* input, bool shaderOutputsOnly, usdShade_AttributeVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeAttributeVector(pxr::UsdShadeUtils::GetValueProducingAttributes(*input, shaderOutputsOnly));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Utils_GetValueProducingAttributes_01(usdShade_Output_t const* output, bool shaderOutputsOnly, usdShade_AttributeVector_t** _result) {
    try {
        *_result = new pxr::UsdShadeAttributeVector(pxr::UsdShadeUtils::GetValueProducingAttributes(*output, shaderOutputsOnly));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdShade_Utils_dtor(usdShade_Utils_t* _this) {
    delete _this;
    return 0;
}

int usdShade_TokenAttributeTypePair_dtor(usdShade_TokenAttributeTypePair_t* _this) {
    delete _this;
    return 0;
}

int usdImaging_GLEngine_SetRenderViewport(usdImaging_GLEngine_t* _this, gf_Vec4d_t const* viewport) {
    try {
        _this->SetRenderViewport(*viewport);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_SetCameraState(usdImaging_GLEngine_t* _this, gf_Matrix4d_t const* viewMatrix, gf_Matrix4d_t const* projectionMatrix) {
    try {
        _this->SetCameraState(*viewMatrix, *projectionMatrix);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_Render(usdImaging_GLEngine_t* _this, usd_Prim_t const* root, usdImaging_GLRenderParams_t const* params) {
    try {
        _this->Render(*root, *params);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_SetRendererSetting(usdImaging_GLEngine_t* _this, tf_Token_t const* id, vt_Value_t const* value) {
    try {
        _this->SetRendererSetting(*id, *value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_SetRendererAov(usdImaging_GLEngine_t* _this, tf_Token_t const* id, bool* _result) {
    try {
        *_result = _this->SetRendererAov(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_GetGPUEnabled(usdImaging_GLEngine_t const* _this, bool* _result) {
    try {
        *_result = _this->GetGPUEnabled();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_GetCurrentRendererId(usdImaging_GLEngine_t const* _this, tf_Token_t** _result) {
    try {
        *_result = new pxr::TfToken(_this->GetCurrentRendererId());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_SetRendererPlugin(usdImaging_GLEngine_t* _this, tf_Token_t const* id, bool* _result) {
    try {
        *_result = _this->SetRendererPlugin(*id);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_GetRendererPlugins(tf_TokenVector_t** _result) {
    try {
        *_result = new pxr::TfTokenVector(pxr::UsdImagingGLEngine::GetRendererPlugins());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_GetRendererDisplayName(tf_Token_t const* id, std_String_t** _result) {
    try {
        *_result = new std::string(pxr::UsdImagingGLEngine::GetRendererDisplayName(*id));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_SetColorCorrectionSettings(usdImaging_GLEngine_t* _this, tf_Token_t const* ccType, tf_Token_t const* ocioDisplay, tf_Token_t const* ocioView, tf_Token_t const* ocioColorSpace, tf_Token_t const* ocioLook) {
    try {
        _this->SetColorCorrectionSettings(*ccType, *ocioDisplay, *ocioView, *ocioColorSpace, *ocioLook);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_new(usdImaging_GLEngine_t** _result) {
    try {
        *_result = new pxr::UsdImagingGLEngine();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLEngine_dtor(usdImaging_GLEngine_t* _this) {
    delete _this;
    return 0;
}

int usdImaging_GLRenderParams_new(usdImaging_GLRenderParams_t** _result) {
    try {
        *_result = new pxr::UsdImagingGLRenderParams();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLRenderParams_dtor(usdImaging_GLRenderParams_t* _this) {
    delete _this;
    return 0;
}

int usdImaging_GLRenderParams_SetEnableLighting(usdImaging_GLRenderParams_t* params, bool enableLighting) {
    try {
        bblext::GLRenderParams_SetEnableLighting(*params, enableLighting);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLRenderParams_SetCullStyle(usdImaging_GLRenderParams_t* params, int cullStyle) {
    try {
        bblext::GLRenderParams_SetCullStyle(*params, static_cast<pxr::UsdImagingGLCullStyle>(cullStyle));
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int usdImaging_GLRenderParams_SetColorCorrectionMode(usdImaging_GLRenderParams_t* params, tf_Token_t* colorCorrectionMode) {
    try {
        bblext::GLRenderParams_SetColorCorrectionMode(*params, *colorCorrectionMode);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsArrayValued(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsArrayValued();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsEmpty(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsEmpty();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_GetArraySize(vt_Value_t const* _this, size_t* _result) {
    try {
        *_result = _this->GetArraySize();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_GetType(vt_Value_t const* _this, tf_Type_t** _result) {
    try {
        *_result = new pxr::TfType(_this->GetType());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_GetTypeName(vt_Value_t const* _this, std_String_t** _result) {
    try {
        *_result = new std::string(_this->GetTypeName());
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_bool(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<bool>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_bool(vt_Value_t const* _this, bool const** _result) {
    try {
        *_result = &_this->Get<bool>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_uchar(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<uint8_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_uchar(vt_Value_t const* _this, unsigned char const** _result) {
    try {
        *_result = &_this->Get<uint8_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_uint(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<uint32_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_uint(vt_Value_t const* _this, unsigned int const** _result) {
    try {
        *_result = &_this->Get<uint32_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_int(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<int>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_int(vt_Value_t const* _this, int const** _result) {
    try {
        *_result = &_this->Get<int>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_uint64(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<uint64_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_uint64(vt_Value_t const* _this, unsigned long const** _result) {
    try {
        *_result = &_this->Get<uint64_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_int64(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<int64_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_int64(vt_Value_t const* _this, long const** _result) {
    try {
        *_result = &_this->Get<int64_t>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_float(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<float>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_float(vt_Value_t const* _this, float const** _result) {
    try {
        *_result = &_this->Get<float>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_double(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<double>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_double(vt_Value_t const* _this, double const** _result) {
    try {
        *_result = &_this->Get<double>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_TfToken(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::TfToken>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_TfToken(vt_Value_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::TfToken>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_SdfAssetPath(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::SdfAssetPath>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_SdfAssetPath(vt_Value_t const* _this, sdf_AssetPath_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::SdfAssetPath>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_SdfTimeCode(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::SdfTimeCode>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_SdfTimeCode(vt_Value_t const* _this, sdf_TimeCode_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::SdfTimeCode>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_string(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<std::string>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_string(vt_Value_t const* _this, std_String_t const** _result) {
    try {
        *_result = &_this->Get<std::string>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec2d(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec2d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec2d(vt_Value_t const* _this, gf_Vec2d_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec2d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec2h(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec2h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec2h(vt_Value_t const* _this, gf_Vec2h_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec2h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec2f(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec2f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec2f(vt_Value_t const* _this, gf_Vec2f_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec2f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec2i(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec2i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec2i(vt_Value_t const* _this, gf_Vec2i_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec2i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec3d(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec3d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec3d(vt_Value_t const* _this, gf_Vec3d_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec3d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec3h(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec3h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec3h(vt_Value_t const* _this, gf_Vec3h_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec3h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec3f(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec3f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec3f(vt_Value_t const* _this, gf_Vec3f_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec3f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec3i(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec3i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec3i(vt_Value_t const* _this, gf_Vec3i_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec3i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec4d(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec4d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec4d(vt_Value_t const* _this, gf_Vec4d_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec4d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec4h(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec4h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec4h(vt_Value_t const* _this, gf_Vec4h_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec4h>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec4f(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec4f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec4f(vt_Value_t const* _this, gf_Vec4f_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec4f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfVec4i(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfVec4i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfVec4i(vt_Value_t const* _this, gf_Vec4i_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfVec4i>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfQuatd(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfQuatd>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfQuatd(vt_Value_t const* _this, gf_Quatd_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfQuatd>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfQuatf(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfQuatf>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfQuatf(vt_Value_t const* _this, gf_Quatf_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfQuatf>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfQuath(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfQuath>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfQuath(vt_Value_t const* _this, gf_Quath_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfQuath>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfMatrix2d(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfMatrix2d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfMatrix2d(vt_Value_t const* _this, gf_Matrix2d_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfMatrix2d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfMatrix2f(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfMatrix2f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfMatrix2f(vt_Value_t const* _this, gf_Matrix2f_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfMatrix2f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfMatrix3d(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfMatrix3d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfMatrix3d(vt_Value_t const* _this, gf_Matrix3d_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfMatrix3d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfMatrix3f(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfMatrix3f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfMatrix3f(vt_Value_t const* _this, gf_Matrix3f_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfMatrix3f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfMatrix4d(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfMatrix4d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfMatrix4d(vt_Value_t const* _this, gf_Matrix4d_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfMatrix4d>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_GfMatrix4f(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::GfMatrix4f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_GfMatrix4f(vt_Value_t const* _this, gf_Matrix4f_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::GfMatrix4f>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtTokenArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtTokenArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtTokenArray(vt_Value_t const* _this, vt_TokenArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtTokenArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtStringArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtStringArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtStringArray(vt_Value_t const* _this, vt_StringArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtStringArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtBoolArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtBoolArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtBoolArray(vt_Value_t const* _this, vt_BoolArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtBoolArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtUCharArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtUCharArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtUCharArray(vt_Value_t const* _this, vt_UCharArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtUCharArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtUIntArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtUIntArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtUIntArray(vt_Value_t const* _this, vt_UIntArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtUIntArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtIntArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtIntArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtIntArray(vt_Value_t const* _this, vt_IntArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtIntArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtUInt64Array(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtUInt64Array>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtUInt64Array(vt_Value_t const* _this, vt_UInt64Array_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtUInt64Array>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtInt64Array(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtInt64Array>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtInt64Array(vt_Value_t const* _this, vt_Int64Array_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtInt64Array>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtFloatArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtFloatArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtFloatArray(vt_Value_t const* _this, vt_FloatArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtFloatArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtDoubleArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtDoubleArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtDoubleArray(vt_Value_t const* _this, vt_DoubleArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtDoubleArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec2fArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec2fArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec2fArray(vt_Value_t const* _this, gf_Vec2fArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec2fArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec3fArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec3fArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec3fArray(vt_Value_t const* _this, gf_Vec3fArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec3fArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec4fArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec4fArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec4fArray(vt_Value_t const* _this, gf_Vec4fArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec4fArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec2dArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec2dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec2dArray(vt_Value_t const* _this, gf_Vec2dArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec2dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec3dArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec3dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec3dArray(vt_Value_t const* _this, gf_Vec3dArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec3dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec4dArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec4dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec4dArray(vt_Value_t const* _this, gf_Vec4dArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec4dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec2hArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec2hArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec2hArray(vt_Value_t const* _this, gf_Vec2hArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec2hArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec3hArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec3hArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec3hArray(vt_Value_t const* _this, gf_Vec3hArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec3hArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtVec4hArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtVec4hArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtVec4hArray(vt_Value_t const* _this, gf_Vec4hArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtVec4hArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtQuatfArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtQuatfArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtQuatfArray(vt_Value_t const* _this, gf_QuatfArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtQuatfArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtQuatdArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtQuatdArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtQuatdArray(vt_Value_t const* _this, gf_QuatdArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtQuatdArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtQuathArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtQuathArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtQuathArray(vt_Value_t const* _this, gf_QuathArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtQuathArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtMatrix2dArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtMatrix2dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtMatrix2dArray(vt_Value_t const* _this, gf_Matrix2dArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtMatrix2dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtMatrix3dArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtMatrix3dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtMatrix3dArray(vt_Value_t const* _this, gf_Matrix3dArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtMatrix3dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_IsHolding_VtMatrix4dArray(vt_Value_t const* _this, bool* _result) {
    try {
        *_result = _this->IsHolding<PXR_NS::VtMatrix4dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_Get_VtMatrix4dArray(vt_Value_t const* _this, gf_Matrix4dArray_t const** _result) {
    try {
        *_result = &_this->Get<PXR_NS::VtMatrix4dArray>();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_new(vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_ctor(float obj, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(obj);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_bool(bool value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_uchar(unsigned char value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_uint(unsigned int value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_int(int value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_uint64(unsigned long value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_int64(long value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_float(float value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_double(double value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_TfToken(tf_Token_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_SdfAssetPath(sdf_AssetPath_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_SdfTimeCode(sdf_TimeCode_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_string(std_String_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec2d(gf_Vec2d_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec2h(gf_Vec2h_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec2f(gf_Vec2f_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec2i(gf_Vec2i_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec3d(gf_Vec3d_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec3h(gf_Vec3h_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec3f(gf_Vec3f_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec3i(gf_Vec3i_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec4d(gf_Vec4d_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec4h(gf_Vec4h_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec4f(gf_Vec4f_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfVec4i(gf_Vec4i_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfQuatd(gf_Quatd_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfQuatf(gf_Quatf_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfQuath(gf_Quath_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfMatrix2d(gf_Matrix2d_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfMatrix2f(gf_Matrix2f_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfMatrix3d(gf_Matrix3d_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfMatrix3f(gf_Matrix3f_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfMatrix4d(gf_Matrix4d_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_GfMatrix4f(gf_Matrix4f_t value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtTokenArray(vt_TokenArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtStringArray(vt_StringArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtBoolArray(vt_BoolArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtUCharArray(vt_UCharArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtUIntArray(vt_UIntArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtIntArray(vt_IntArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtUInt64Array(vt_UInt64Array_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtInt64Array(vt_Int64Array_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtFloatArray(vt_FloatArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtDoubleArray(vt_DoubleArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec2fArray(gf_Vec2fArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec3fArray(gf_Vec3fArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec4fArray(gf_Vec4fArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec2dArray(gf_Vec2dArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec3dArray(gf_Vec3dArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec4dArray(gf_Vec4dArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec2hArray(gf_Vec2hArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec3hArray(gf_Vec3hArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtVec4hArray(gf_Vec4hArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtQuatfArray(gf_QuatfArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtQuatdArray(gf_QuatdArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtQuathArray(gf_QuathArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtMatrix2dArray(gf_Matrix2dArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtMatrix3dArray(gf_Matrix3dArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_from_VtMatrix4dArray(gf_Matrix4dArray_t* value, vt_Value_t** _result) {
    try {
        *_result = new pxr::VtValue(*value);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Value_dtor(vt_Value_t* _this) {
    delete _this;
    return 0;
}

int vt_ValueVector_data(vt_ValueVector_t* _this, vt_Value_t** _result) {
    *_result = _this->data();
    return 0;
}

int vt_ValueVector_data_const(vt_ValueVector_t const* _this, vt_Value_t const** _result) {
    *_result = _this->data();
    return 0;
}

int vt_ValueVector_empty(vt_ValueVector_t const* _this, bool* _result) {
    *_result = _this->empty();
    return 0;
}

int vt_ValueVector_size(vt_ValueVector_t const* _this, size_t* _result) {
    *_result = _this->size();
    return 0;
}

int vt_ValueVector_max_size(vt_ValueVector_t const* _this, size_t* _result) {
    *_result = _this->max_size();
    return 0;
}

int vt_ValueVector_capacity(vt_ValueVector_t const* _this, size_t* _result) {
    *_result = _this->capacity();
    return 0;
}

int vt_ValueVector_clear(vt_ValueVector_t* _this) {
    _this->clear();
    return 0;
}

int vt_ValueVector_pop_back(vt_ValueVector_t* _this) {
    _this->pop_back();
    return 0;
}

int vt_ValueVector_op_index(vt_ValueVector_t const* _this, size_t __n, vt_Value_t const** _result) {
    *_result = &_this->operator[](__n);
    return 0;
}

int vt_ValueVector_default(vt_ValueVector_t** _result) {
    *_result = new std::vector<pxr::VtValue>();
    return 0;
}

int vt_ValueVector_dtor(vt_ValueVector_t* _this) {
    delete _this;
    return 0;
}

int vt_TokenArray_data(vt_TokenArray_t* _this, tf_Token_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_TokenArray_data_const(vt_TokenArray_t const* _this, tf_Token_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_TokenArray_size(vt_TokenArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_TokenArray_op_index(vt_TokenArray_t* _this, size_t index, tf_Token_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_TokenArray_op_index_const(vt_TokenArray_t const* _this, size_t index, tf_Token_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_TokenArray_new(vt_TokenArray_t** _result) {
    try {
        *_result = new pxr::VtTokenArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_TokenArray_dtor(vt_TokenArray_t* _this) {
    delete _this;
    return 0;
}

int vt_StringArray_data(vt_StringArray_t* _this, std_String_t** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_StringArray_data_const(vt_StringArray_t const* _this, std_String_t const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_StringArray_size(vt_StringArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_StringArray_op_index(vt_StringArray_t* _this, size_t index, std_String_t** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_StringArray_op_index_const(vt_StringArray_t const* _this, size_t index, std_String_t const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_StringArray_new(vt_StringArray_t** _result) {
    try {
        *_result = new pxr::VtStringArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_StringArray_dtor(vt_StringArray_t* _this) {
    delete _this;
    return 0;
}

int vt_BoolArray_data(vt_BoolArray_t* _this, bool** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_BoolArray_data_const(vt_BoolArray_t const* _this, bool const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_BoolArray_size(vt_BoolArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_BoolArray_op_index(vt_BoolArray_t* _this, size_t index, bool** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_BoolArray_op_index_const(vt_BoolArray_t const* _this, size_t index, bool const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_BoolArray_new(vt_BoolArray_t** _result) {
    try {
        *_result = new pxr::VtBoolArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_BoolArray_dtor(vt_BoolArray_t* _this) {
    delete _this;
    return 0;
}

int vt_UCharArray_data(vt_UCharArray_t* _this, unsigned char** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UCharArray_data_const(vt_UCharArray_t const* _this, unsigned char const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UCharArray_size(vt_UCharArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UCharArray_op_index(vt_UCharArray_t* _this, size_t index, unsigned char** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UCharArray_op_index_const(vt_UCharArray_t const* _this, size_t index, unsigned char const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UCharArray_new(vt_UCharArray_t** _result) {
    try {
        *_result = new pxr::VtUCharArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UCharArray_dtor(vt_UCharArray_t* _this) {
    delete _this;
    return 0;
}

int vt_IntArray_data(vt_IntArray_t* _this, int** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_IntArray_data_const(vt_IntArray_t const* _this, int const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_IntArray_size(vt_IntArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_IntArray_op_index(vt_IntArray_t* _this, size_t index, int** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_IntArray_op_index_const(vt_IntArray_t const* _this, size_t index, int const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_IntArray_new(vt_IntArray_t** _result) {
    try {
        *_result = new pxr::VtIntArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_IntArray_dtor(vt_IntArray_t* _this) {
    delete _this;
    return 0;
}

int vt_UIntArray_data(vt_UIntArray_t* _this, unsigned int** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UIntArray_data_const(vt_UIntArray_t const* _this, unsigned int const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UIntArray_size(vt_UIntArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UIntArray_op_index(vt_UIntArray_t* _this, size_t index, unsigned int** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UIntArray_op_index_const(vt_UIntArray_t const* _this, size_t index, unsigned int const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UIntArray_new(vt_UIntArray_t** _result) {
    try {
        *_result = new pxr::VtUIntArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UIntArray_dtor(vt_UIntArray_t* _this) {
    delete _this;
    return 0;
}

int vt_Int64Array_data(vt_Int64Array_t* _this, long** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Int64Array_data_const(vt_Int64Array_t const* _this, long const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Int64Array_size(vt_Int64Array_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Int64Array_op_index(vt_Int64Array_t* _this, size_t index, long** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Int64Array_op_index_const(vt_Int64Array_t const* _this, size_t index, long const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Int64Array_new(vt_Int64Array_t** _result) {
    try {
        *_result = new pxr::VtInt64Array();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Int64Array_dtor(vt_Int64Array_t* _this) {
    delete _this;
    return 0;
}

int vt_UInt64Array_data(vt_UInt64Array_t* _this, unsigned long** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UInt64Array_data_const(vt_UInt64Array_t const* _this, unsigned long const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UInt64Array_size(vt_UInt64Array_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UInt64Array_op_index(vt_UInt64Array_t* _this, size_t index, unsigned long** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UInt64Array_op_index_const(vt_UInt64Array_t const* _this, size_t index, unsigned long const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UInt64Array_new(vt_UInt64Array_t** _result) {
    try {
        *_result = new pxr::VtUInt64Array();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_UInt64Array_dtor(vt_UInt64Array_t* _this) {
    delete _this;
    return 0;
}

int vt_FloatArray_data(vt_FloatArray_t* _this, float** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_FloatArray_data_const(vt_FloatArray_t const* _this, float const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_FloatArray_size(vt_FloatArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_FloatArray_op_index(vt_FloatArray_t* _this, size_t index, float** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_FloatArray_op_index_const(vt_FloatArray_t const* _this, size_t index, float const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_FloatArray_new(vt_FloatArray_t** _result) {
    try {
        *_result = new pxr::VtFloatArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_FloatArray_dtor(vt_FloatArray_t* _this) {
    delete _this;
    return 0;
}

int vt_DoubleArray_data(vt_DoubleArray_t* _this, double** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_DoubleArray_data_const(vt_DoubleArray_t const* _this, double const** _result) {
    try {
        *_result = _this->data();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_DoubleArray_size(vt_DoubleArray_t const* _this, size_t* _result) {
    try {
        *_result = _this->size();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_DoubleArray_op_index(vt_DoubleArray_t* _this, size_t index, double** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_DoubleArray_op_index_const(vt_DoubleArray_t const* _this, size_t index, double const** _result) {
    try {
        *_result = &_this->operator[](index);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_DoubleArray_new(vt_DoubleArray_t** _result) {
    try {
        *_result = new pxr::VtDoubleArray();
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_DoubleArray_dtor(vt_DoubleArray_t* _this) {
    delete _this;
    return 0;
}

int vt_Dictionary_op_index(vt_Dictionary_t* _this, std_String_t const* key, vt_Value_t** _result) {
    try {
        *_result = &_this->operator[](*key);
        return 0;
    } catch (std::exception& e) {
        _bbl_error_message = e.what();
        return 1;
    }
}

int vt_Dictionary_dtor(vt_Dictionary_t* _this) {
    delete _this;
    return 0;
}

} // extern "C"
